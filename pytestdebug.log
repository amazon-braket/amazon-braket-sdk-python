versions pytest-6.2.4, py-1.10.0, python-3.9.1.final.0
cwd=/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python
args=('--debug',)

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x11026b370>
    pytest_plugin_registered [hook]
        plugin: <Session amazon-braket-sdk-python exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x11026b370>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x110b68b50>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x1104b22b0>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_configure [hook]
          config: <_pytest.config.Config object at 0x11026b370>
      finish pytest_configure --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x110b27550>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x11026b370>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/usr/local/lib/python3.9/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/usr/local/lib/python3.9/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/usr/local/lib/python3.9/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/usr/local/lib/python3.9/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/usr/local/lib/python3.9/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/usr/local/lib/python3.9/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/usr/local/lib/python3.9/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/usr/local/lib/python3.9/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/usr/local/lib/python3.9/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/usr/local/lib/python3.9/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/usr/local/lib/python3.9/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/usr/local/lib/python3.9/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/usr/local/lib/python3.9/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/usr/local/lib/python3.9/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/usr/local/lib/python3.9/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/usr/local/lib/python3.9/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/usr/local/lib/python3.9/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/usr/local/lib/python3.9/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/usr/local/lib/python3.9/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/usr/local/lib/python3.9/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/usr/local/lib/python3.9/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/usr/local/lib/python3.9/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/usr/local/lib/python3.9/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/usr/local/lib/python3.9/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/usr/local/lib/python3.9/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/usr/local/lib/python3.9/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/usr/local/lib/python3.9/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/usr/local/lib/python3.9/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/usr/local/lib/python3.9/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/usr/local/lib/python3.9/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'xdist.plugin' from '/usr/local/lib/python3.9/site-packages/xdist/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'xdist.looponfail' from '/usr/local/lib/python3.9/site-packages/xdist/looponfail.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_forked' from '/usr/local/lib/python3.9/site-packages/pytest_forked/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_rerunfailures' from '/usr/local/lib/python3.9/site-packages/pytest_rerunfailures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=8 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=9 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=10 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=11 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=6 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x110b68b50>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x1104b22b0>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x110b27550>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x110e1a070>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x110e31460>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x11026b370>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/usr/local/lib/python3.9/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/usr/local/lib/python3.9/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/usr/local/lib/python3.9/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/usr/local/lib/python3.9/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/usr/local/lib/python3.9/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/usr/local/lib/python3.9/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/usr/local/lib/python3.9/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/usr/local/lib/python3.9/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/usr/local/lib/python3.9/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/usr/local/lib/python3.9/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/usr/local/lib/python3.9/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/usr/local/lib/python3.9/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/usr/local/lib/python3.9/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/usr/local/lib/python3.9/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/usr/local/lib/python3.9/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/usr/local/lib/python3.9/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/usr/local/lib/python3.9/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/usr/local/lib/python3.9/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/usr/local/lib/python3.9/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/usr/local/lib/python3.9/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/usr/local/lib/python3.9/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/usr/local/lib/python3.9/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/usr/local/lib/python3.9/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/usr/local/lib/python3.9/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/usr/local/lib/python3.9/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/usr/local/lib/python3.9/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/usr/local/lib/python3.9/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/usr/local/lib/python3.9/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/usr/local/lib/python3.9/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/usr/local/lib/python3.9/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'xdist.plugin' from '/usr/local/lib/python3.9/site-packages/xdist/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'xdist.looponfail' from '/usr/local/lib/python3.9/site-packages/xdist/looponfail.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_forked' from '/usr/local/lib/python3.9/site-packages/pytest_forked/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_rerunfailures' from '/usr/local/lib/python3.9/site-packages/pytest_rerunfailures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=8 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=9 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=10 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=11 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=6 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x110b68b50>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x1104b22b0>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x110b27550>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x110e1a070>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x110e31460>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x110b683a0>
          manager: <_pytest.config.PytestPluginManager object at 0x1102b2d90>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x11026b370>
          startdir: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python
      early skip of rewriting module: email.message [assertion]
      early skip of rewriting module: uu [assertion]
      early skip of rewriting module: email._encoded_words [assertion]
      early skip of rewriting module: email.iterators [assertion]
      finish pytest_report_header --> [['rootdir: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python, configfile: setup.cfg, testpaths: test/unit_tests', 'plugins: cov-2.12.1, xdist-2.3.0, forked-1.3.0, rerunfailures-10.0'], 'cachedir: .pytest_cache', ['using: pytest-6.2.4 pylib-1.10.0', 'setuptools registered plugins:', '  pytest-cov-2.12.1 at /usr/local/lib/python3.9/site-packages/pytest_cov/plugin.py', '  pytest-xdist-2.3.0 at /usr/local/lib/python3.9/site-packages/xdist/plugin.py', '  pytest-xdist-2.3.0 at /usr/local/lib/python3.9/site-packages/xdist/looponfail.py', '  pytest-forked-1.3.0 at /usr/local/lib/python3.9/site-packages/pytest_forked/__init__.py', '  pytest-rerunfailures-10.0 at /usr/local/lib/python3.9/site-packages/pytest_rerunfailures.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['test/unit_tests'] [collection]
        pytest_collectstart [hook]
            collector: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (local('/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests'), []) [collection]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
          early skip of rewriting module: py._code [assertion]
          early skip of rewriting module: py._code.code [assertion]
          early skip of rewriting module: repr [assertion]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/test_ipython_utils.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/test_ipython_utils.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/test_ipython_utils.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/test_ipython_utils.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/test_ipython_utils.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/annealing
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/annealing/test_problem.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/annealing/test_problem.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/annealing/test_problem.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/annealing/test_problem.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/annealing/test_problem.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/common_test_utils.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/common_test_utils.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_device.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_device.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_device.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/aws/test_aws_device.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/aws/test_aws_device.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_quantum_task.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_quantum_task.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_quantum_task.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/aws/test_aws_quantum_task.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/aws/test_aws_quantum_task.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_quantum_task_batch.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_quantum_task_batch.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_quantum_task_batch.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_session.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_session.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_session.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/aws/test_aws_session.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/aws/test_aws_session.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_angled_gate.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_angled_gate.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_angled_gate.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_angled_gate.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_angled_gate.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_circuit.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_circuit.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_circuit.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_circuit.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_circuit.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_circuit_helpers.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_circuit_helpers.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_circuit_helpers.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_circuit_helpers.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_circuit_helpers.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_gate.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_gate.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_gate.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_gate.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_gate.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_gates.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_gates.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_gates.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_gates.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_gates.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_instruction.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_instruction.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_instruction.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_instruction.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_instruction.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_moments.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_moments.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_moments.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_moments.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_moments.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_noise.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_noise.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_noise.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_noise.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_noise.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_noise_helpers.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_noise_helpers.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_noise_helpers.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_noise_helpers.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_noise_helpers.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_noises.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_noises.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_noises.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_noises.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_noises.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_observable.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_observable.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_observable.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_observable.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_observable.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_observables.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_observables.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_observables.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_observables.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_observables.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_quantum_operator.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_quantum_operator.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_quantum_operator.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_quantum_operator.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_quantum_operator.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_quantum_operator_helpers.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_quantum_operator_helpers.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_quantum_operator_helpers.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_quantum_operator_helpers.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_quantum_operator_helpers.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_qubit.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_qubit.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_qubit.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_qubit.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_qubit.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_qubit_set.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_qubit_set.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_qubit_set.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_qubit_set.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_qubit_set.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_result_type.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_result_type.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_result_type.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_result_type.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_result_type.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_result_types.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_result_types.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_result_types.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/circuits/test_result_types.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/circuits/test_result_types.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/devices
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/devices/test_local_simulator.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/devices/test_local_simulator.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/devices/test_local_simulator.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/devices/test_local_simulator.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/devices/test_local_simulator.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks/test_annealing_quantum_task_result.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks/test_annealing_quantum_task_result.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks/test_annealing_quantum_task_result.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/tasks/test_annealing_quantum_task_result.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/tasks/test_annealing_quantum_task_result.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks/test_gate_model_quantum_task_result.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks/test_gate_model_quantum_task_result.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks/test_gate_model_quantum_task_result.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/tasks/test_gate_model_quantum_task_result.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/tasks/test_gate_model_quantum_task_result.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks/test_local_quantum_task.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks/test_local_quantum_task.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks/test_local_quantum_task.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/tasks/test_local_quantum_task.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/tasks/test_local_quantum_task.py>] [hook]
            pytest_ignore_collect [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks/test_tasks_init.py
                config: <_pytest.config.Config object at 0x11026b370>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks/test_tasks_init.py
                parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/tasks/test_tasks_init.py
                  parent: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/unit_tests/braket/tasks/test_tasks_init.py> [hook]
            finish pytest_collect_file --> [<Module test/unit_tests/braket/tasks/test_tasks_init.py>] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=30 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=30 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module test/unit_tests/braket/test_ipython_utils.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/unit_tests/braket/test_ipython_utils.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/unit_tests/braket/test_ipython_utils.py>
      find_module called for: test_ipython_utils [assertion]
      matched test file '/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/test_ipython_utils.py' [assertion]
      found cached rewritten pyc for /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/test_ipython_utils.py [assertion]
      early skip of rewriting module: unittest [assertion]
      early skip of rewriting module: unittest.result [assertion]
      early skip of rewriting module: unittest.util [assertion]
      early skip of rewriting module: unittest.case [assertion]
      early skip of rewriting module: difflib [assertion]
      early skip of rewriting module: unittest.suite [assertion]
      early skip of rewriting module: unittest.loader [assertion]
      early skip of rewriting module: unittest.main [assertion]
      early skip of rewriting module: unittest.runner [assertion]
      early skip of rewriting module: unittest.signals [assertion]
      early skip of rewriting module: unittest.mock [assertion]
      early skip of rewriting module: asyncio [assertion]
      early skip of rewriting module: asyncio.base_events [assertion]
      early skip of rewriting module: concurrent [assertion]
      early skip of rewriting module: concurrent.futures [assertion]
      early skip of rewriting module: concurrent.futures._base [assertion]
      early skip of rewriting module: ssl [assertion]
      early skip of rewriting module: _ssl [assertion]
      early skip of rewriting module: asyncio.constants [assertion]
      early skip of rewriting module: asyncio.coroutines [assertion]
      early skip of rewriting module: asyncio.base_futures [assertion]
      early skip of rewriting module: asyncio.format_helpers [assertion]
      early skip of rewriting module: asyncio.log [assertion]
      early skip of rewriting module: asyncio.events [assertion]
      early skip of rewriting module: contextvars [assertion]
      early skip of rewriting module: _contextvars [assertion]
      early skip of rewriting module: _asyncio [assertion]
      early skip of rewriting module: asyncio.exceptions [assertion]
      early skip of rewriting module: asyncio.base_tasks [assertion]
      early skip of rewriting module: asyncio.futures [assertion]
      early skip of rewriting module: asyncio.protocols [assertion]
      early skip of rewriting module: asyncio.sslproto [assertion]
      early skip of rewriting module: asyncio.transports [assertion]
      early skip of rewriting module: asyncio.staggered [assertion]
      early skip of rewriting module: asyncio.locks [assertion]
      early skip of rewriting module: asyncio.tasks [assertion]
      early skip of rewriting module: asyncio.trsock [assertion]
      early skip of rewriting module: asyncio.runners [assertion]
      early skip of rewriting module: asyncio.queues [assertion]
      early skip of rewriting module: asyncio.streams [assertion]
      early skip of rewriting module: asyncio.subprocess [assertion]
      early skip of rewriting module: asyncio.threads [assertion]
      early skip of rewriting module: asyncio.unix_events [assertion]
      early skip of rewriting module: asyncio.base_subprocess [assertion]
      early skip of rewriting module: asyncio.selector_events [assertion]
      early skip of rewriting module: braket [assertion]
      early skip of rewriting module: braket.ipython_utils [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/test_ipython_utils.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/test_ipython_utils.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/test_ipython_utils.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/test_ipython_utils.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/test_ipython_utils.py>
            name: ipython_utils
            obj: <module 'braket.ipython_utils' from '/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/src/braket/ipython_utils.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/test_ipython_utils.py>
            name: test_running_in_jupyter
            obj: <function test_running_in_jupyter at 0x110e789d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x110e83970>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_running_in_jupyter>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/test_ipython_utils.py>
            name: test_ipython_imported_but_ipython_none
            obj: <function test_ipython_imported_but_ipython_none at 0x111092dc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x110e83ac0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ipython_imported_but_ipython_none>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/test_ipython_utils.py>
            name: test_ipython_imported_but_not_in_jupyter
            obj: <function test_ipython_imported_but_not_in_jupyter at 0x111092e50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x110e83c10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ipython_imported_but_not_in_jupyter>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/test_ipython_utils.py>
            name: test_ipython_imported_and_in_jupyter
            obj: <function test_ipython_imported_and_in_jupyter at 0x111092ee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x110e83970>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ipython_imported_and_in_jupyter>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/test_ipython_utils.py>
            name: get_ipython
            obj: <function get_ipython at 0x111092f70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/test_ipython_utils.py>
            name: _mock_ipython
            obj: <function _mock_ipython at 0x11108d040>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/test_ipython_utils.py>
            name: MockIPython
            obj: <class 'test_ipython_utils.MockIPython'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/unit_tests/braket/test_ipython_utils.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_running_in_jupyter> [collection]
      pytest_itemcollected [hook]
          item: <Function test_running_in_jupyter>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_ipython_imported_but_ipython_none> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ipython_imported_but_ipython_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_ipython_imported_but_not_in_jupyter> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ipython_imported_but_not_in_jupyter>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_ipython_imported_and_in_jupyter> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ipython_imported_and_in_jupyter>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/unit_tests/braket/test_ipython_utils.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/unit_tests/braket/annealing/test_problem.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/unit_tests/braket/annealing/test_problem.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/unit_tests/braket/annealing/test_problem.py>
      find_module called for: test_problem [assertion]
      matched test file '/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/annealing/test_problem.py' [assertion]
      found cached rewritten pyc for /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/annealing/test_problem.py [assertion]
      early skip of rewriting module: braket.ir [assertion]
      early skip of rewriting module: braket.ir.annealing [assertion]
      early skip of rewriting module: braket.ir.annealing.problem_v1 [assertion]
      early skip of rewriting module: pydantic [assertion]
      early skip of rewriting module: pydantic.dataclasses [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.class_validators [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.errors [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.typing [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: typing_extensions [assertion]
      early skip of rewriting module: pydantic.utils [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.version [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.error_wrappers [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.json [assertion]
      early skip of rewriting module: ipaddress [assertion]
      early skip of rewriting module: pydantic.color [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: colorsys [assertion]
      early skip of rewriting module: pydantic.types [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.validators [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.datetime_parse [assertion]
      early skip of rewriting module: pydantic.fields [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.main [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.parse [assertion]
      early skip of rewriting module: pydantic.schema [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.networks [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.annotated_types [assertion]
      early skip of rewriting module: pydantic.decorator [assertion]
      early skip of rewriting module: pydantic.env_settings [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pydantic.tools [assertion]
      early skip of rewriting module: braket.schema_common [assertion]
      early skip of rewriting module: braket.schema_common.schema_base [assertion]
      early skip of rewriting module: braket.schema_common.schema_header [assertion]
      early skip of rewriting module: dataclasses [assertion]
      early skip of rewriting module: braket.annealing [assertion]
      early skip of rewriting module: braket.annealing.problem [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/annealing/test_problem.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/annealing/test_problem.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/annealing/test_problem.py>
            name: ir
            obj: <module 'braket.ir.annealing' from '/usr/local/lib/python3.9/site-packages/braket/ir/annealing/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/annealing/test_problem.py>
            name: Problem
            obj: <class 'braket.annealing.problem.Problem'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/annealing/test_problem.py>
            name: ProblemType
            obj: <enum 'ProblemType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/annealing/test_problem.py>
            name: test_creation
            obj: <function test_creation at 0x11108d5e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1110907f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_creation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/annealing/test_problem.py>
            name: test_add_linear_term
            obj: <function test_add_linear_term at 0x11108d820>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x11109e0a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_add_linear_term>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/annealing/test_problem.py>
            name: test_add_linear_terms
            obj: <function test_add_linear_terms at 0x11108d700>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x11109e0a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_add_linear_terms>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/annealing/test_problem.py>
            name: test_add_quadratic_term
            obj: <function test_add_quadratic_term at 0x110dc9dc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x11109e0a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_add_quadratic_term>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/annealing/test_problem.py>
            name: test_add_quadratic_terms
            obj: <function test_add_quadratic_terms at 0x110ddd940>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x11109e0a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_add_quadratic_terms>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/annealing/test_problem.py>
            name: test__to_ir
            obj: <function test__to_ir at 0x110ddddc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x11109e0a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test__to_ir>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/unit_tests/braket/annealing/test_problem.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function test_creation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_creation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_add_linear_term> [collection]
      pytest_itemcollected [hook]
          item: <Function test_add_linear_term>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_add_linear_terms> [collection]
      pytest_itemcollected [hook]
          item: <Function test_add_linear_terms>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_add_quadratic_term> [collection]
      pytest_itemcollected [hook]
          item: <Function test_add_quadratic_term>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_add_quadratic_terms> [collection]
      pytest_itemcollected [hook]
          item: <Function test_add_quadratic_terms>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test__to_ir> [collection]
      pytest_itemcollected [hook]
          item: <Function test__to_ir>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/unit_tests/braket/annealing/test_problem.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/unit_tests/braket/aws/test_aws_device.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
      find_module called for: test_aws_device [assertion]
      matched test file '/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_device.py' [assertion]
      found cached rewritten pyc for /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_device.py [assertion]
      early skip of rewriting module: common_test_utils [assertion]
      early skip of rewriting module: braket.aws [assertion]
      early skip of rewriting module: braket.aws.aws_device [assertion]
      early skip of rewriting module: boto3 [assertion]
      early skip of rewriting module: boto3.session [assertion]
      early skip of rewriting module: botocore [assertion]
      early skip of rewriting module: botocore.session [assertion]
      early skip of rewriting module: botocore.configloader [assertion]
      early skip of rewriting module: botocore.compat [assertion]
      early skip of rewriting module: botocore.vendored [assertion]
      early skip of rewriting module: botocore.vendored.six [assertion]
      early skip of rewriting module: botocore.exceptions [assertion]
      early skip of rewriting module: botocore.vendored.requests [assertion]
      early skip of rewriting module: botocore.vendored.requests.exceptions [assertion]
      early skip of rewriting module: botocore.vendored.requests.packages [assertion]
      early skip of rewriting module: botocore.vendored.requests.packages.urllib3 [assertion]
      early skip of rewriting module: botocore.vendored.requests.packages.urllib3.exceptions [assertion]
      early skip of rewriting module: dateutil [assertion]
      early skip of rewriting module: dateutil._version [assertion]
      early skip of rewriting module: dateutil.tz [assertion]
      early skip of rewriting module: dateutil.tz.tz [assertion]
      early skip of rewriting module: six [assertion]
      early skip of rewriting module: six.moves [assertion]
      early skip of rewriting module: dateutil.tz._common [assertion]
      early skip of rewriting module: dateutil.tz._factories [assertion]
      early skip of rewriting module: dateutil.tz.win [assertion]
      early skip of rewriting module: six.moves.winreg [assertion]
      early skip of rewriting module: urllib3 [assertion]
      early skip of rewriting module: urllib3.exceptions [assertion]
      early skip of rewriting module: urllib3.packages [assertion]
      early skip of rewriting module: urllib3.packages.ssl_match_hostname [assertion]
      early skip of rewriting module: urllib3.packages.six [assertion]
      early skip of rewriting module: urllib3.packages.six.moves [assertion]
      early skip of rewriting module: urllib3.packages.six.moves.http_client [assertion]
      early skip of rewriting module: http [assertion]
      early skip of rewriting module: http.client [assertion]
      early skip of rewriting module: urllib3._version [assertion]
      early skip of rewriting module: urllib3.connectionpool [assertion]
      early skip of rewriting module: urllib3.connection [assertion]
      early skip of rewriting module: urllib3.util [assertion]
      early skip of rewriting module: urllib3.util.connection [assertion]
      early skip of rewriting module: urllib3.contrib [assertion]
      early skip of rewriting module: urllib3.contrib._appengine_environ [assertion]
      early skip of rewriting module: urllib3.util.wait [assertion]
      early skip of rewriting module: urllib3.util.request [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: urllib3.util.response [assertion]
      early skip of rewriting module: urllib3.util.retry [assertion]
      early skip of rewriting module: urllib3.util.ssl_ [assertion]
      early skip of rewriting module: hmac [assertion]
      early skip of rewriting module: urllib3.util.url [assertion]
      early skip of rewriting module: urllib3.util.ssltransport [assertion]
      early skip of rewriting module: urllib3.util.timeout [assertion]
      early skip of rewriting module: urllib3.util.proxy [assertion]
      early skip of rewriting module: urllib3._collections [assertion]
      early skip of rewriting module: urllib3.request [assertion]
      early skip of rewriting module: urllib3.filepost [assertion]
      early skip of rewriting module: urllib3.fields [assertion]
      early skip of rewriting module: mimetypes [assertion]
      early skip of rewriting module: winreg [assertion]
      early skip of rewriting module: urllib3.packages.six.moves.urllib [assertion]
      early skip of rewriting module: urllib3.packages.six.moves.urllib.parse [assertion]
      early skip of rewriting module: urllib3.response [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: urllib3.util.queue [assertion]
      early skip of rewriting module: urllib3.poolmanager [assertion]
      early skip of rewriting module: botocore.vendored.six.moves [assertion]
      early skip of rewriting module: xml.etree.cElementTree [assertion]
      early skip of rewriting module: awscrt [assertion]
      early skip of rewriting module: botocore.credentials [assertion]
      early skip of rewriting module: getpass [assertion]
      early skip of rewriting module: termios [assertion]
      early skip of rewriting module: dateutil.parser [assertion]
      early skip of rewriting module: dateutil.parser._parser [assertion]
      early skip of rewriting module: dateutil.relativedelta [assertion]
      early skip of rewriting module: dateutil._common [assertion]
      early skip of rewriting module: dateutil.parser.isoparser [assertion]
      early skip of rewriting module: botocore.config [assertion]
      early skip of rewriting module: botocore.endpoint [assertion]
      early skip of rewriting module: botocore.awsrequest [assertion]
      early skip of rewriting module: botocore.utils [assertion]
      early skip of rewriting module: cgi [assertion]
      early skip of rewriting module: html [assertion]
      early skip of rewriting module: html.entities [assertion]
      early skip of rewriting module: botocore.httpsession [assertion]
      early skip of rewriting module: urllib3.contrib.pyopenssl [assertion]
      early skip of rewriting module: OpenSSL [assertion]
      early skip of rewriting module: botocore.vendored.six.moves.urllib_parse [assertion]
      early skip of rewriting module: certifi [assertion]
      early skip of rewriting module: certifi.core [assertion]
      early skip of rewriting module: importlib.resources [assertion]
      early skip of rewriting module: importlib._common [assertion]
      early skip of rewriting module: botocore.vendored.six.moves.urllib [assertion]
      early skip of rewriting module: botocore.vendored.six.moves.urllib.request [assertion]
      early skip of rewriting module: urllib.request [assertion]
      early skip of rewriting module: urllib.error [assertion]
      early skip of rewriting module: urllib.response [assertion]
      early skip of rewriting module: _scproxy [assertion]
      early skip of rewriting module: botocore.hooks [assertion]
      early skip of rewriting module: botocore.history [assertion]
      early skip of rewriting module: botocore.response [assertion]
      early skip of rewriting module: botocore.parsers [assertion]
      early skip of rewriting module: botocore.eventstream [assertion]
      early skip of rewriting module: botocore.client [assertion]
      early skip of rewriting module: botocore.waiter [assertion]
      early skip of rewriting module: jmespath [assertion]
      early skip of rewriting module: jmespath.parser [assertion]
      early skip of rewriting module: jmespath.lexer [assertion]
      early skip of rewriting module: jmespath.exceptions [assertion]
      early skip of rewriting module: jmespath.compat [assertion]
      early skip of rewriting module: jmespath.ast [assertion]
      early skip of rewriting module: jmespath.visitor [assertion]
      early skip of rewriting module: jmespath.functions [assertion]
      early skip of rewriting module: botocore.docs [assertion]
      early skip of rewriting module: botocore.docs.service [assertion]
      early skip of rewriting module: botocore.docs.utils [assertion]
      early skip of rewriting module: botocore.docs.client [assertion]
      early skip of rewriting module: botocore.docs.method [assertion]
      early skip of rewriting module: botocore.docs.params [assertion]
      early skip of rewriting module: botocore.docs.shape [assertion]
      early skip of rewriting module: botocore.docs.example [assertion]
      early skip of rewriting module: botocore.docs.sharedexample [assertion]
      early skip of rewriting module: botocore.docs.waiter [assertion]
      early skip of rewriting module: botocore.docs.paginator [assertion]
      early skip of rewriting module: botocore.docs.bcdoc [assertion]
      early skip of rewriting module: botocore.docs.bcdoc.restdoc [assertion]
      early skip of rewriting module: botocore.docs.bcdoc.docstringparser [assertion]
      early skip of rewriting module: html.parser [assertion]
      early skip of rewriting module: _markupbase [assertion]
      early skip of rewriting module: botocore.docs.bcdoc.style [assertion]
      early skip of rewriting module: botocore.docs.docstring [assertion]
      early skip of rewriting module: botocore.args [assertion]
      early skip of rewriting module: botocore.serialize [assertion]
      early skip of rewriting module: botocore.validate [assertion]
      early skip of rewriting module: botocore.signers [assertion]
      early skip of rewriting module: botocore.auth [assertion]
      early skip of rewriting module: botocore.model [assertion]
      early skip of rewriting module: botocore.paginate [assertion]
      early skip of rewriting module: botocore.discovery [assertion]
      early skip of rewriting module: botocore.retries [assertion]
      early skip of rewriting module: botocore.retries.standard [assertion]
      early skip of rewriting module: botocore.retries.quota [assertion]
      early skip of rewriting module: botocore.retries.special [assertion]
      early skip of rewriting module: botocore.retries.base [assertion]
      early skip of rewriting module: botocore.retries.adaptive [assertion]
      early skip of rewriting module: botocore.retries.bucket [assertion]
      early skip of rewriting module: botocore.retries.throttling [assertion]
      early skip of rewriting module: botocore.configprovider [assertion]
      early skip of rewriting module: botocore.errorfactory [assertion]
      early skip of rewriting module: botocore.handlers [assertion]
      early skip of rewriting module: botocore.retryhandler [assertion]
      early skip of rewriting module: botocore.translate [assertion]
      early skip of rewriting module: botocore.loaders [assertion]
      early skip of rewriting module: botocore.regions [assertion]
      early skip of rewriting module: botocore.monitoring [assertion]
      early skip of rewriting module: boto3.utils [assertion]
      early skip of rewriting module: boto3.exceptions [assertion]
      early skip of rewriting module: boto3.resources [assertion]
      early skip of rewriting module: boto3.resources.factory [assertion]
      early skip of rewriting module: boto3.resources.action [assertion]
      early skip of rewriting module: boto3.resources.params [assertion]
      early skip of rewriting module: boto3.resources.response [assertion]
      early skip of rewriting module: boto3.resources.model [assertion]
      early skip of rewriting module: boto3.docs [assertion]
      early skip of rewriting module: boto3.docs.service [assertion]
      early skip of rewriting module: boto3.docs.client [assertion]
      early skip of rewriting module: boto3.docs.resource [assertion]
      early skip of rewriting module: boto3.docs.base [assertion]
      early skip of rewriting module: boto3.docs.action [assertion]
      early skip of rewriting module: boto3.docs.method [assertion]
      early skip of rewriting module: boto3.docs.utils [assertion]
      early skip of rewriting module: boto3.docs.waiter [assertion]
      early skip of rewriting module: boto3.docs.collection [assertion]
      early skip of rewriting module: boto3.docs.subresource [assertion]
      early skip of rewriting module: boto3.docs.attr [assertion]
      early skip of rewriting module: boto3.docs.docstring [assertion]
      early skip of rewriting module: boto3.resources.base [assertion]
      early skip of rewriting module: boto3.resources.collection [assertion]
      early skip of rewriting module: boto3.compat [assertion]
      early skip of rewriting module: networkx [assertion]
      early skip of rewriting module: networkx.release [assertion]
      early skip of rewriting module: version [assertion]
      early skip of rewriting module: networkx.exception [assertion]
      early skip of rewriting module: networkx.utils [assertion]
      early skip of rewriting module: networkx.utils.misc [assertion]
      early skip of rewriting module: networkx.utils.decorators [assertion]
      early skip of rewriting module: decorator [assertion]
      early skip of rewriting module: networkx.utils.random_sequence [assertion]
      early skip of rewriting module: networkx.utils.union_find [assertion]
      early skip of rewriting module: networkx.utils.rcm [assertion]
      early skip of rewriting module: networkx.utils.heaps [assertion]
      early skip of rewriting module: networkx.utils.contextmanagers [assertion]
      early skip of rewriting module: networkx.classes [assertion]
      early skip of rewriting module: networkx.classes.graph [assertion]
      early skip of rewriting module: networkx.classes.coreviews [assertion]
      early skip of rewriting module: networkx.classes.reportviews [assertion]
      early skip of rewriting module: networkx.convert [assertion]
      early skip of rewriting module: networkx.classes.digraph [assertion]
      early skip of rewriting module: networkx.classes.multigraph [assertion]
      early skip of rewriting module: networkx.classes.multidigraph [assertion]
      early skip of rewriting module: networkx.classes.ordered [assertion]
      early skip of rewriting module: networkx.classes.function [assertion]
      early skip of rewriting module: networkx.classes.graphviews [assertion]
      early skip of rewriting module: networkx.classes.filters [assertion]
      early skip of rewriting module: networkx.convert_matrix [assertion]
      early skip of rewriting module: networkx.relabel [assertion]
      early skip of rewriting module: networkx.generators [assertion]
      early skip of rewriting module: networkx.generators.atlas [assertion]
      early skip of rewriting module: gzip [assertion]
      early skip of rewriting module: networkx.generators.classic [assertion]
      early skip of rewriting module: networkx.generators.cographs [assertion]
      early skip of rewriting module: networkx.generators.community [assertion]
      early skip of rewriting module: scipy [assertion]
      early skip of rewriting module: numpy [assertion]
      early skip of rewriting module: numpy._globals [assertion]
      early skip of rewriting module: numpy.__config__ [assertion]
      early skip of rewriting module: numpy.version [assertion]
      early skip of rewriting module: numpy._distributor_init [assertion]
      early skip of rewriting module: numpy.core [assertion]
      early skip of rewriting module: numpy.core.multiarray [assertion]
      early skip of rewriting module: numpy.core.overrides [assertion]
      early skip of rewriting module: numpy.core._multiarray_umath [assertion]
      early skip of rewriting module: numpy.compat [assertion]
      early skip of rewriting module: numpy.compat._inspect [assertion]
      early skip of rewriting module: numpy.compat.py3k [assertion]
      early skip of rewriting module: pickle5 [assertion]
      early skip of rewriting module: numpy.core.umath [assertion]
      early skip of rewriting module: numpy.core.numerictypes [assertion]
      early skip of rewriting module: numpy.core._string_helpers [assertion]
      early skip of rewriting module: numpy.core._type_aliases [assertion]
      early skip of rewriting module: numpy.core._dtype [assertion]
      early skip of rewriting module: numpy.core.numeric [assertion]
      early skip of rewriting module: numpy.core.shape_base [assertion]
      early skip of rewriting module: numpy.core._asarray [assertion]
      early skip of rewriting module: numpy.core.fromnumeric [assertion]
      early skip of rewriting module: numpy.core._methods [assertion]
      early skip of rewriting module: numpy.core._exceptions [assertion]
      early skip of rewriting module: numpy.core._ufunc_config [assertion]
      early skip of rewriting module: numpy.core.arrayprint [assertion]
      early skip of rewriting module: numpy.core.defchararray [assertion]
      early skip of rewriting module: numpy.core.records [assertion]
      early skip of rewriting module: numpy.core.memmap [assertion]
      early skip of rewriting module: numpy.core.function_base [assertion]
      early skip of rewriting module: numpy.core.machar [assertion]
      early skip of rewriting module: numpy.core.getlimits [assertion]
      early skip of rewriting module: numpy.core.einsumfunc [assertion]
      early skip of rewriting module: numpy.core._add_newdocs [assertion]
      early skip of rewriting module: numpy.core._multiarray_tests [assertion]
      early skip of rewriting module: numpy.core._dtype_ctypes [assertion]
      early skip of rewriting module: numpy.core._internal [assertion]
      early skip of rewriting module: ctypes [assertion]
      early skip of rewriting module: _ctypes [assertion]
      early skip of rewriting module: ctypes._endian [assertion]
      early skip of rewriting module: numpy._pytesttester [assertion]
      early skip of rewriting module: numpy.lib [assertion]
      early skip of rewriting module: numpy.lib.mixins [assertion]
      early skip of rewriting module: numpy.lib.scimath [assertion]
      early skip of rewriting module: numpy.lib.type_check [assertion]
      early skip of rewriting module: numpy.lib.ufunclike [assertion]
      early skip of rewriting module: numpy.lib.index_tricks [assertion]
      early skip of rewriting module: numpy.matrixlib [assertion]
      early skip of rewriting module: numpy.matrixlib.defmatrix [assertion]
      early skip of rewriting module: numpy.linalg [assertion]
      early skip of rewriting module: numpy.linalg.linalg [assertion]
      early skip of rewriting module: numpy.lib.twodim_base [assertion]
      early skip of rewriting module: numpy.linalg.lapack_lite [assertion]
      early skip of rewriting module: numpy.linalg._umath_linalg [assertion]
      early skip of rewriting module: numpy.lib.function_base [assertion]
      early skip of rewriting module: numpy.lib.histograms [assertion]
      early skip of rewriting module: numpy.lib.stride_tricks [assertion]
      early skip of rewriting module: numpy.lib.nanfunctions [assertion]
      early skip of rewriting module: numpy.lib.shape_base [assertion]
      early skip of rewriting module: numpy.lib.polynomial [assertion]
      early skip of rewriting module: numpy.lib.utils [assertion]
      early skip of rewriting module: numpy.lib.arraysetops [assertion]
      early skip of rewriting module: numpy.lib.npyio [assertion]
      early skip of rewriting module: numpy.lib.format [assertion]
      early skip of rewriting module: numpy.lib._datasource [assertion]
      early skip of rewriting module: numpy.lib._iotools [assertion]
      early skip of rewriting module: numpy.lib.financial [assertion]
      early skip of rewriting module: numpy.lib.arrayterator [assertion]
      early skip of rewriting module: numpy.lib.arraypad [assertion]
      early skip of rewriting module: numpy.lib._version [assertion]
      early skip of rewriting module: numpy.fft [assertion]
      early skip of rewriting module: numpy.fft._pocketfft [assertion]
      early skip of rewriting module: numpy.fft._pocketfft_internal [assertion]
      early skip of rewriting module: numpy.fft.helper [assertion]
      early skip of rewriting module: numpy.polynomial [assertion]
      early skip of rewriting module: numpy.polynomial.polynomial [assertion]
      early skip of rewriting module: numpy.polynomial.polyutils [assertion]
      early skip of rewriting module: numpy.polynomial._polybase [assertion]
      early skip of rewriting module: numpy.polynomial.chebyshev [assertion]
      early skip of rewriting module: numpy.polynomial.legendre [assertion]
      early skip of rewriting module: numpy.polynomial.hermite [assertion]
      early skip of rewriting module: numpy.polynomial.hermite_e [assertion]
      early skip of rewriting module: numpy.polynomial.laguerre [assertion]
      early skip of rewriting module: numpy.random [assertion]
      early skip of rewriting module: numpy.random._pickle [assertion]
      early skip of rewriting module: numpy.random.mtrand [assertion]
      early skip of rewriting module: numpy.random.bit_generator [assertion]
      early skip of rewriting module: numpy.random._common [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: secrets [assertion]
      early skip of rewriting module: numpy.random._bounded_integers [assertion]
      early skip of rewriting module: numpy.random._mt19937 [assertion]
      early skip of rewriting module: numpy.random._philox [assertion]
      early skip of rewriting module: numpy.random._pcg64 [assertion]
      early skip of rewriting module: numpy.random._sfc64 [assertion]
      early skip of rewriting module: numpy.random._generator [assertion]
      early skip of rewriting module: numpy.ctypeslib [assertion]
      early skip of rewriting module: numpy.ma [assertion]
      early skip of rewriting module: numpy.ma.core [assertion]
      early skip of rewriting module: numpy.ma.extras [assertion]
      early skip of rewriting module: scipy._lib [assertion]
      early skip of rewriting module: scipy._lib._testutils [assertion]
      early skip of rewriting module: scipy._lib.deprecation [assertion]
      early skip of rewriting module: scipy.__config__ [assertion]
      early skip of rewriting module: scipy.version [assertion]
      early skip of rewriting module: scipy._distributor_init [assertion]
      early skip of rewriting module: scipy._lib._pep440 [assertion]
      early skip of rewriting module: scipy._lib._ccallback [assertion]
      early skip of rewriting module: scipy._lib._ccallback_c [assertion]
      early skip of rewriting module: scipy.special [assertion]
      early skip of rewriting module: scipy.special.sf_error [assertion]
      early skip of rewriting module: scipy.special._ufuncs [assertion]
      early skip of rewriting module: scipy.special._ufuncs_cxx [assertion]
      early skip of rewriting module: scipy.special._basic [assertion]
      early skip of rewriting module: scipy.special.specfun [assertion]
      early skip of rewriting module: scipy.special.orthogonal [assertion]
      early skip of rewriting module: scipy.linalg [assertion]
      early skip of rewriting module: scipy.linalg.misc [assertion]
      early skip of rewriting module: scipy.linalg.blas [assertion]
      early skip of rewriting module: scipy.linalg._fblas [assertion]
      early skip of rewriting module: scipy.linalg._cblas [assertion]
      early skip of rewriting module: scipy.linalg._fblas_64 [assertion]
      early skip of rewriting module: scipy.linalg.lapack [assertion]
      early skip of rewriting module: scipy.linalg._flapack [assertion]
      early skip of rewriting module: scipy.linalg._clapack [assertion]
      early skip of rewriting module: scipy.linalg._flapack_64 [assertion]
      early skip of rewriting module: scipy._lib._util [assertion]
      early skip of rewriting module: scipy.linalg.basic [assertion]
      early skip of rewriting module: scipy.linalg.flinalg [assertion]
      early skip of rewriting module: scipy.linalg._flinalg [assertion]
      early skip of rewriting module: scipy.linalg.decomp [assertion]
      early skip of rewriting module: scipy.linalg.decomp_svd [assertion]
      early skip of rewriting module: scipy.linalg._solve_toeplitz [assertion]
      early skip of rewriting module: scipy.linalg.decomp_lu [assertion]
      early skip of rewriting module: scipy.linalg._decomp_ldl [assertion]
      early skip of rewriting module: scipy.linalg.decomp_cholesky [assertion]
      early skip of rewriting module: scipy.linalg.decomp_qr [assertion]
      early skip of rewriting module: scipy.linalg._decomp_qz [assertion]
      early skip of rewriting module: scipy.linalg.decomp_schur [assertion]
      early skip of rewriting module: scipy.linalg._decomp_polar [assertion]
      early skip of rewriting module: scipy.linalg.matfuncs [assertion]
      early skip of rewriting module: scipy.linalg.special_matrices [assertion]
      early skip of rewriting module: scipy.linalg._expm_frechet [assertion]
      early skip of rewriting module: scipy.linalg._matfuncs_sqrtm [assertion]
      early skip of rewriting module: scipy.linalg._matfuncs_sqrtm_triu [assertion]
      early skip of rewriting module: scipy.linalg._solvers [assertion]
      early skip of rewriting module: scipy.linalg._procrustes [assertion]
      early skip of rewriting module: scipy.linalg._decomp_update [assertion]
      early skip of rewriting module: scipy.linalg.cython_blas [assertion]
      early skip of rewriting module: scipy.linalg.cython_lapack [assertion]
      early skip of rewriting module: scipy.linalg._sketches [assertion]
      early skip of rewriting module: scipy.sparse [assertion]
      early skip of rewriting module: scipy.sparse.base [assertion]
      early skip of rewriting module: scipy.sparse.sputils [assertion]
      early skip of rewriting module: scipy.sparse.csr [assertion]
      early skip of rewriting module: scipy.sparse._sparsetools [assertion]
      early skip of rewriting module: scipy.sparse.compressed [assertion]
      early skip of rewriting module: scipy.sparse.data [assertion]
      early skip of rewriting module: scipy.sparse.dia [assertion]
      early skip of rewriting module: scipy.sparse._index [assertion]
      early skip of rewriting module: scipy.sparse.csc [assertion]
      early skip of rewriting module: scipy.sparse.lil [assertion]
      early skip of rewriting module: scipy.sparse._csparsetools [assertion]
      early skip of rewriting module: scipy.sparse.dok [assertion]
      early skip of rewriting module: scipy.sparse.coo [assertion]
      early skip of rewriting module: scipy.sparse.bsr [assertion]
      early skip of rewriting module: scipy.sparse.construct [assertion]
      early skip of rewriting module: scipy.sparse.extract [assertion]
      early skip of rewriting module: scipy.sparse._matrix_io [assertion]
      early skip of rewriting module: scipy.sparse.csgraph [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._laplacian [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._shortest_path [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._validation [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._tools [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._traversal [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._min_spanning_tree [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._flow [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._matching [assertion]
      early skip of rewriting module: scipy.sparse.csgraph._reordering [assertion]
      early skip of rewriting module: scipy.linalg._decomp_cossin [assertion]
      early skip of rewriting module: scipy.special._comb [assertion]
      early skip of rewriting module: scipy.special._logsumexp [assertion]
      early skip of rewriting module: scipy.special.spfun_stats [assertion]
      early skip of rewriting module: scipy.special._ellip_harm [assertion]
      early skip of rewriting module: scipy.special._ellip_harm_2 [assertion]
      early skip of rewriting module: scipy.special._lambertw [assertion]
      early skip of rewriting module: scipy.special._spherical_bessel [assertion]
      early skip of rewriting module: networkx.generators.degree_seq [assertion]
      early skip of rewriting module: networkx.generators.directed [assertion]
      early skip of rewriting module: networkx.generators.duplication [assertion]
      early skip of rewriting module: networkx.generators.ego [assertion]
      early skip of rewriting module: networkx.generators.expanders [assertion]
      early skip of rewriting module: networkx.generators.geometric [assertion]
      early skip of rewriting module: scipy.spatial [assertion]
      early skip of rewriting module: scipy.spatial.kdtree [assertion]
      early skip of rewriting module: scipy.spatial.ckdtree [assertion]
      early skip of rewriting module: scipy.spatial.qhull [assertion]
      early skip of rewriting module: scipy._lib.messagestream [assertion]
      early skip of rewriting module: scipy.spatial._spherical_voronoi [assertion]
      early skip of rewriting module: scipy.spatial._voronoi [assertion]
      early skip of rewriting module: scipy.spatial._plotutils [assertion]
      early skip of rewriting module: scipy._lib.decorator [assertion]
      early skip of rewriting module: scipy.spatial._procrustes [assertion]
      early skip of rewriting module: scipy.spatial._geometric_slerp [assertion]
      early skip of rewriting module: scipy.spatial.distance [assertion]
      early skip of rewriting module: scipy.spatial._distance_wrap [assertion]
      early skip of rewriting module: scipy.spatial._hausdorff [assertion]
      early skip of rewriting module: scipy.spatial._distance_pybind [assertion]
      early skip of rewriting module: scipy.spatial.transform [assertion]
      early skip of rewriting module: scipy.spatial.transform.rotation [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: scipy.spatial.transform._rotation_groups [assertion]
      early skip of rewriting module: scipy.constants [assertion]
      early skip of rewriting module: scipy.constants.codata [assertion]
      early skip of rewriting module: scipy.constants.constants [assertion]
      early skip of rewriting module: scipy.spatial.transform._rotation_spline [assertion]
      early skip of rewriting module: networkx.generators.internet_as_graphs [assertion]
      early skip of rewriting module: networkx.generators.intersection [assertion]
      early skip of rewriting module: networkx.algorithms [assertion]
      early skip of rewriting module: networkx.algorithms.assortativity [assertion]
      early skip of rewriting module: networkx.algorithms.assortativity.connectivity [assertion]
      early skip of rewriting module: networkx.algorithms.assortativity.correlation [assertion]
      early skip of rewriting module: networkx.algorithms.assortativity.mixing [assertion]
      early skip of rewriting module: networkx.algorithms.assortativity.pairs [assertion]
      early skip of rewriting module: networkx.algorithms.assortativity.neighbor_degree [assertion]
      early skip of rewriting module: networkx.algorithms.asteroidal [assertion]
      early skip of rewriting module: networkx.algorithms.boundary [assertion]
      early skip of rewriting module: networkx.algorithms.bridges [assertion]
      early skip of rewriting module: networkx.algorithms.chains [assertion]
      early skip of rewriting module: networkx.algorithms.centrality [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.betweenness [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.betweenness_subset [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.closeness [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.subgraph_alg [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.current_flow_closeness [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.flow_matrix [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.current_flow_betweenness [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.current_flow_betweenness_subset [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.degree_alg [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.dispersion [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.eigenvector [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.group [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.harmonic [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.katz [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.load [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.reaching [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.percolation [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.second_order [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.trophic [assertion]
      early skip of rewriting module: networkx.algorithms.centrality.voterank_alg [assertion]
      early skip of rewriting module: networkx.algorithms.chordal [assertion]
      early skip of rewriting module: networkx.algorithms.components [assertion]
      early skip of rewriting module: networkx.algorithms.components.connected [assertion]
      early skip of rewriting module: networkx.algorithms.components.strongly_connected [assertion]
      early skip of rewriting module: networkx.algorithms.components.weakly_connected [assertion]
      early skip of rewriting module: networkx.algorithms.components.attracting [assertion]
      early skip of rewriting module: networkx.algorithms.components.biconnected [assertion]
      early skip of rewriting module: networkx.algorithms.components.semiconnected [assertion]
      early skip of rewriting module: networkx.algorithms.cluster [assertion]
      early skip of rewriting module: networkx.algorithms.clique [assertion]
      early skip of rewriting module: networkx.algorithms.communicability_alg [assertion]
      early skip of rewriting module: networkx.algorithms.coloring [assertion]
      early skip of rewriting module: networkx.algorithms.coloring.greedy_coloring [assertion]
      early skip of rewriting module: networkx.algorithms.coloring.greedy_coloring_with_interchange [assertion]
      early skip of rewriting module: networkx.algorithms.coloring.equitable_coloring [assertion]
      early skip of rewriting module: networkx.algorithms.core [assertion]
      early skip of rewriting module: networkx.algorithms.covering [assertion]
      early skip of rewriting module: networkx.algorithms.cycles [assertion]
      early skip of rewriting module: networkx.algorithms.cuts [assertion]
      early skip of rewriting module: networkx.algorithms.d_separation [assertion]
      early skip of rewriting module: networkx.algorithms.dag [assertion]
      early skip of rewriting module: networkx.algorithms.traversal [assertion]
      early skip of rewriting module: networkx.algorithms.traversal.beamsearch [assertion]
      early skip of rewriting module: networkx.algorithms.traversal.breadth_first_search [assertion]
      early skip of rewriting module: networkx.algorithms.traversal.depth_first_search [assertion]
      early skip of rewriting module: networkx.algorithms.traversal.edgedfs [assertion]
      early skip of rewriting module: networkx.algorithms.traversal.edgebfs [assertion]
      early skip of rewriting module: networkx.generators.trees [assertion]
      early skip of rewriting module: networkx.algorithms.distance_measures [assertion]
      early skip of rewriting module: networkx.algorithms.distance_regular [assertion]
      early skip of rewriting module: networkx.algorithms.dominance [assertion]
      early skip of rewriting module: networkx.algorithms.dominating [assertion]
      early skip of rewriting module: networkx.algorithms.efficiency_measures [assertion]
      early skip of rewriting module: networkx.algorithms.euler [assertion]
      early skip of rewriting module: networkx.algorithms.graphical [assertion]
      early skip of rewriting module: networkx.algorithms.hierarchy [assertion]
      early skip of rewriting module: networkx.algorithms.hybrid [assertion]
      early skip of rewriting module: networkx.algorithms.link_analysis [assertion]
      early skip of rewriting module: networkx.algorithms.link_analysis.pagerank_alg [assertion]
      early skip of rewriting module: networkx.algorithms.link_analysis.hits_alg [assertion]
      early skip of rewriting module: networkx.algorithms.link_prediction [assertion]
      early skip of rewriting module: networkx.algorithms.lowest_common_ancestors [assertion]
      early skip of rewriting module: networkx.algorithms.isolate [assertion]
      early skip of rewriting module: networkx.algorithms.matching [assertion]
      early skip of rewriting module: networkx.algorithms.minors [assertion]
      early skip of rewriting module: networkx.algorithms.mis [assertion]
      early skip of rewriting module: networkx.algorithms.moral [assertion]
      early skip of rewriting module: networkx.algorithms.non_randomness [assertion]
      early skip of rewriting module: networkx.algorithms.operators [assertion]
      early skip of rewriting module: networkx.algorithms.operators.all [assertion]
      early skip of rewriting module: networkx.algorithms.operators.binary [assertion]
      early skip of rewriting module: networkx.algorithms.operators.product [assertion]
      early skip of rewriting module: networkx.algorithms.operators.unary [assertion]
      early skip of rewriting module: networkx.algorithms.planarity [assertion]
      early skip of rewriting module: networkx.algorithms.planar_drawing [assertion]
      early skip of rewriting module: networkx.algorithms.reciprocity [assertion]
      early skip of rewriting module: networkx.algorithms.regular [assertion]
      early skip of rewriting module: networkx.algorithms.richclub [assertion]
      early skip of rewriting module: networkx.algorithms.shortest_paths [assertion]
      early skip of rewriting module: networkx.algorithms.shortest_paths.generic [assertion]
      early skip of rewriting module: networkx.algorithms.shortest_paths.unweighted [assertion]
      early skip of rewriting module: networkx.algorithms.shortest_paths.weighted [assertion]
      early skip of rewriting module: networkx.algorithms.shortest_paths.astar [assertion]
      early skip of rewriting module: networkx.algorithms.shortest_paths.dense [assertion]
      early skip of rewriting module: networkx.algorithms.similarity [assertion]
      early skip of rewriting module: networkx.algorithms.graph_hashing [assertion]
      early skip of rewriting module: networkx.algorithms.simple_paths [assertion]
      early skip of rewriting module: networkx.algorithms.smallworld [assertion]
      early skip of rewriting module: networkx.algorithms.smetric [assertion]
      early skip of rewriting module: networkx.algorithms.structuralholes [assertion]
      early skip of rewriting module: networkx.algorithms.sparsifiers [assertion]
      early skip of rewriting module: networkx.algorithms.swap [assertion]
      early skip of rewriting module: networkx.algorithms.triads [assertion]
      early skip of rewriting module: networkx.algorithms.vitality [assertion]
      early skip of rewriting module: networkx.algorithms.voronoi [assertion]
      early skip of rewriting module: networkx.algorithms.wiener [assertion]
      early skip of rewriting module: networkx.algorithms.bipartite [assertion]
      early skip of rewriting module: networkx.algorithms.bipartite.basic [assertion]
      early skip of rewriting module: networkx.algorithms.bipartite.centrality [assertion]
      early skip of rewriting module: networkx.algorithms.bipartite.cluster [assertion]
      early skip of rewriting module: networkx.algorithms.bipartite.covering [assertion]
      early skip of rewriting module: networkx.algorithms.bipartite.matching [assertion]
      early skip of rewriting module: networkx.algorithms.bipartite.matrix [assertion]
      early skip of rewriting module: networkx.algorithms.bipartite.edgelist [assertion]
      early skip of rewriting module: networkx.algorithms.bipartite.projection [assertion]
      early skip of rewriting module: networkx.algorithms.bipartite.redundancy [assertion]
      early skip of rewriting module: networkx.algorithms.bipartite.spectral [assertion]
      early skip of rewriting module: networkx.algorithms.bipartite.generators [assertion]
      early skip of rewriting module: networkx.algorithms.node_classification [assertion]
      early skip of rewriting module: networkx.algorithms.node_classification.hmn [assertion]
      early skip of rewriting module: networkx.algorithms.node_classification.utils [assertion]
      early skip of rewriting module: networkx.algorithms.node_classification.lgc [assertion]
      early skip of rewriting module: networkx.algorithms.connectivity [assertion]
      early skip of rewriting module: networkx.algorithms.connectivity.connectivity [assertion]
      early skip of rewriting module: networkx.algorithms.flow [assertion]
      early skip of rewriting module: networkx.algorithms.flow.maxflow [assertion]
      early skip of rewriting module: networkx.algorithms.flow.boykovkolmogorov [assertion]
      early skip of rewriting module: networkx.algorithms.flow.utils [assertion]
      early skip of rewriting module: networkx.algorithms.flow.dinitz_alg [assertion]
      early skip of rewriting module: networkx.algorithms.flow.edmondskarp [assertion]
      early skip of rewriting module: networkx.algorithms.flow.preflowpush [assertion]
      early skip of rewriting module: networkx.algorithms.flow.shortestaugmentingpath [assertion]
      early skip of rewriting module: networkx.algorithms.flow.mincost [assertion]
      early skip of rewriting module: networkx.algorithms.flow.gomory_hu [assertion]
      early skip of rewriting module: networkx.algorithms.flow.capacityscaling [assertion]
      early skip of rewriting module: networkx.algorithms.flow.networksimplex [assertion]
      early skip of rewriting module: networkx.algorithms.connectivity.utils [assertion]
      early skip of rewriting module: networkx.algorithms.connectivity.cuts [assertion]
      early skip of rewriting module: networkx.algorithms.connectivity.edge_augmentation [assertion]
      early skip of rewriting module: networkx.algorithms.connectivity.edge_kcomponents [assertion]
      early skip of rewriting module: networkx.algorithms.connectivity.disjoint_paths [assertion]
      early skip of rewriting module: networkx.algorithms.connectivity.kcomponents [assertion]
      early skip of rewriting module: networkx.algorithms.connectivity.kcutsets [assertion]
      early skip of rewriting module: networkx.algorithms.connectivity.stoerwagner [assertion]
      early skip of rewriting module: networkx.algorithms.community [assertion]
      early skip of rewriting module: networkx.algorithms.community.asyn_fluid [assertion]
      early skip of rewriting module: networkx.algorithms.community.centrality [assertion]
      early skip of rewriting module: networkx.algorithms.community.kclique [assertion]
      early skip of rewriting module: networkx.algorithms.community.kernighan_lin [assertion]
      early skip of rewriting module: networkx.algorithms.community.community_utils [assertion]
      early skip of rewriting module: networkx.algorithms.community.label_propagation [assertion]
      early skip of rewriting module: networkx.algorithms.community.lukes [assertion]
      early skip of rewriting module: networkx.algorithms.community.modularity_max [assertion]
      early skip of rewriting module: networkx.algorithms.community.quality [assertion]
      early skip of rewriting module: networkx.utils.mapped_queue [assertion]
      early skip of rewriting module: networkx.algorithms.isomorphism [assertion]
      early skip of rewriting module: networkx.algorithms.isomorphism.isomorph [assertion]
      early skip of rewriting module: networkx.algorithms.isomorphism.vf2userfunc [assertion]
      early skip of rewriting module: networkx.algorithms.isomorphism.isomorphvf2 [assertion]
      early skip of rewriting module: networkx.algorithms.isomorphism.matchhelpers [assertion]
      early skip of rewriting module: networkx.algorithms.isomorphism.temporalisomorphvf2 [assertion]
      early skip of rewriting module: networkx.algorithms.isomorphism.ismags [assertion]
      early skip of rewriting module: networkx.algorithms.isomorphism.tree_isomorphism [assertion]
      early skip of rewriting module: networkx.algorithms.tournament [assertion]
      early skip of rewriting module: networkx.algorithms.tree [assertion]
      early skip of rewriting module: networkx.algorithms.tree.branchings [assertion]
      early skip of rewriting module: networkx.algorithms.tree.recognition [assertion]
      early skip of rewriting module: networkx.algorithms.tree.coding [assertion]
      early skip of rewriting module: networkx.algorithms.tree.mst [assertion]
      early skip of rewriting module: networkx.algorithms.tree.operations [assertion]
      early skip of rewriting module: networkx.algorithms.tree.decomposition [assertion]
      early skip of rewriting module: networkx.generators.interval_graph [assertion]
      early skip of rewriting module: networkx.generators.joint_degree_seq [assertion]
      early skip of rewriting module: networkx.generators.lattice [assertion]
      early skip of rewriting module: networkx.generators.line [assertion]
      early skip of rewriting module: networkx.generators.mycielski [assertion]
      early skip of rewriting module: networkx.generators.nonisomorphic_trees [assertion]
      early skip of rewriting module: networkx.generators.random_clustered [assertion]
      early skip of rewriting module: networkx.generators.random_graphs [assertion]
      early skip of rewriting module: networkx.generators.small [assertion]
      early skip of rewriting module: networkx.generators.social [assertion]
      early skip of rewriting module: networkx.generators.sudoku [assertion]
      early skip of rewriting module: networkx.generators.spectral_graph_forge [assertion]
      early skip of rewriting module: networkx.generators.stochastic [assertion]
      early skip of rewriting module: networkx.generators.triads [assertion]
      early skip of rewriting module: networkx.readwrite [assertion]
      early skip of rewriting module: networkx.readwrite.adjlist [assertion]
      early skip of rewriting module: networkx.readwrite.multiline_adjlist [assertion]
      early skip of rewriting module: networkx.readwrite.edgelist [assertion]
      early skip of rewriting module: networkx.readwrite.gpickle [assertion]
      early skip of rewriting module: networkx.readwrite.pajek [assertion]
      early skip of rewriting module: networkx.readwrite.leda [assertion]
      early skip of rewriting module: networkx.readwrite.sparse6 [assertion]
      early skip of rewriting module: networkx.readwrite.graph6 [assertion]
      early skip of rewriting module: networkx.readwrite.nx_yaml [assertion]
      early skip of rewriting module: networkx.readwrite.gml [assertion]
      early skip of rewriting module: networkx.readwrite.graphml [assertion]
      early skip of rewriting module: lxml [assertion]
      early skip of rewriting module: networkx.readwrite.gexf [assertion]
      early skip of rewriting module: networkx.readwrite.nx_shp [assertion]
      early skip of rewriting module: networkx.readwrite.json_graph [assertion]
      early skip of rewriting module: networkx.readwrite.json_graph.node_link [assertion]
      early skip of rewriting module: networkx.readwrite.json_graph.adjacency [assertion]
      early skip of rewriting module: networkx.readwrite.json_graph.tree [assertion]
      early skip of rewriting module: networkx.readwrite.json_graph.jit [assertion]
      early skip of rewriting module: networkx.readwrite.json_graph.cytoscape [assertion]
      early skip of rewriting module: networkx.linalg [assertion]
      early skip of rewriting module: networkx.linalg.attrmatrix [assertion]
      early skip of rewriting module: networkx.linalg.spectrum [assertion]
      early skip of rewriting module: networkx.linalg.graphmatrix [assertion]
      early skip of rewriting module: networkx.linalg.laplacianmatrix [assertion]
      early skip of rewriting module: networkx.linalg.algebraicconnectivity [assertion]
      early skip of rewriting module: scipy.sparse.linalg [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve.iterative [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve._iterative [assertion]
      early skip of rewriting module: scipy.sparse.linalg.interface [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve.utils [assertion]
      early skip of rewriting module: scipy._lib._threadsafety [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve.minres [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve.lgmres [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve._gcrotmk [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve.lsqr [assertion]
      early skip of rewriting module: scipy.sparse.linalg.isolve.lsmr [assertion]
      early skip of rewriting module: scipy.sparse.linalg.dsolve [assertion]
      early skip of rewriting module: scipy.sparse.linalg.dsolve.linsolve [assertion]
      early skip of rewriting module: scipy.sparse.linalg.dsolve._superlu [assertion]
      early skip of rewriting module: scikits [assertion]
      early skip of rewriting module: scipy.sparse.linalg.dsolve._add_newdocs [assertion]
      early skip of rewriting module: scipy.sparse.linalg.eigen [assertion]
      early skip of rewriting module: scipy.sparse.linalg.eigen.arpack [assertion]
      early skip of rewriting module: scipy.sparse.linalg.eigen.arpack.arpack [assertion]
      early skip of rewriting module: scipy.sparse.linalg.eigen.arpack._arpack [assertion]
      early skip of rewriting module: scipy.sparse.linalg.eigen.lobpcg [assertion]
      early skip of rewriting module: scipy.sparse.linalg.eigen.lobpcg.lobpcg [assertion]
      early skip of rewriting module: scipy.sparse.linalg.matfuncs [assertion]
      early skip of rewriting module: scipy.sparse.linalg._expm_multiply [assertion]
      early skip of rewriting module: scipy.sparse.linalg._onenormest [assertion]
      early skip of rewriting module: scipy.sparse.linalg._norm [assertion]
      early skip of rewriting module: scikits [assertion]
      early skip of rewriting module: networkx.linalg.modularitymatrix [assertion]
      early skip of rewriting module: networkx.linalg.bethehessianmatrix [assertion]
      early skip of rewriting module: networkx.testing [assertion]
      early skip of rewriting module: networkx.testing.utils [assertion]
      early skip of rewriting module: networkx.testing.test [assertion]
      early skip of rewriting module: networkx.drawing [assertion]
      early skip of rewriting module: networkx.drawing.layout [assertion]
      early skip of rewriting module: networkx.drawing.nx_pylab [assertion]
      early skip of rewriting module: networkx.drawing.nx_agraph [assertion]
      early skip of rewriting module: networkx.drawing.nx_pydot [assertion]
      early skip of rewriting module: braket.aws.aws_quantum_task [assertion]
      early skip of rewriting module: braket.aws.aws_session [assertion]
      early skip of rewriting module: backoff [assertion]
      early skip of rewriting module: backoff._decorator [assertion]
      early skip of rewriting module: backoff._common [assertion]
      early skip of rewriting module: backoff._jitter [assertion]
      early skip of rewriting module: backoff._sync [assertion]
      early skip of rewriting module: backoff._wait_gen [assertion]
      early skip of rewriting module: braket._schemas [assertion]
      early skip of rewriting module: braket._schemas._version [assertion]
      early skip of rewriting module: braket._sdk [assertion]
      early skip of rewriting module: braket._sdk._version [assertion]
      early skip of rewriting module: braket.circuits [assertion]
      early skip of rewriting module: braket.circuits.circuit [assertion]
      early skip of rewriting module: braket.circuits.ascii_circuit_diagram [assertion]
      early skip of rewriting module: braket.circuits.circuit_diagram [assertion]
      early skip of rewriting module: braket.circuits.gate [assertion]
      early skip of rewriting module: braket.circuits.quantum_operator [assertion]
      early skip of rewriting module: braket.circuits.operator [assertion]
      early skip of rewriting module: braket.circuits.qubit_set [assertion]
      early skip of rewriting module: boltons [assertion]
      early skip of rewriting module: boltons.setutils [assertion]
      early skip of rewriting module: typeutils [assertion]
      early skip of rewriting module: braket.circuits.qubit [assertion]
      early skip of rewriting module: braket.circuits.instruction [assertion]
      early skip of rewriting module: braket.circuits.noise [assertion]
      early skip of rewriting module: braket.circuits.result_type [assertion]
      early skip of rewriting module: braket.circuits.observable [assertion]
      early skip of rewriting module: braket.circuits.moments [assertion]
      early skip of rewriting module: braket.circuits.noise_helpers [assertion]
      early skip of rewriting module: braket.circuits.quantum_operator_helpers [assertion]
      early skip of rewriting module: braket.circuits.observables [assertion]
      early skip of rewriting module: braket.circuits.unitary_calculation [assertion]
      early skip of rewriting module: braket.ir.jaqcd [assertion]
      early skip of rewriting module: braket.ir.jaqcd.instructions [assertion]
      early skip of rewriting module: braket.ir.jaqcd.shared_models [assertion]
      early skip of rewriting module: braket.ir.jaqcd.program_v1 [assertion]
      early skip of rewriting module: braket.ir.jaqcd.results [assertion]
      early skip of rewriting module: braket.circuits.gates [assertion]
      early skip of rewriting module: braket.circuits.angled_gate [assertion]
      early skip of rewriting module: braket.circuits.noises [assertion]
      early skip of rewriting module: braket.circuits.result_types [assertion]
      early skip of rewriting module: braket.circuits.circuit_helpers [assertion]
      early skip of rewriting module: braket.device_schema [assertion]
      early skip of rewriting module: braket.device_schema.device_action_properties [assertion]
      early skip of rewriting module: braket.device_schema.device_capabilities [assertion]
      early skip of rewriting module: braket.device_schema.device_service_properties_v1 [assertion]
      early skip of rewriting module: braket.device_schema.device_execution_window [assertion]
      early skip of rewriting module: braket.device_schema.device_connectivity [assertion]
      early skip of rewriting module: braket.device_schema.gate_model_parameters_v1 [assertion]
      early skip of rewriting module: braket.device_schema.gate_model_qpu_paradigm_properties_v1 [assertion]
      early skip of rewriting module: braket.device_schema.jaqcd_device_action_properties [assertion]
      early skip of rewriting module: braket.device_schema.dwave [assertion]
      early skip of rewriting module: braket.device_schema.dwave.dwave_2000Q_device_level_parameters_v1 [assertion]
      early skip of rewriting module: braket.device_schema.dwave.dwave_provider_level_parameters_v1 [assertion]
      early skip of rewriting module: braket.device_schema.dwave.dwave_2000Q_device_parameters_v1 [assertion]
      early skip of rewriting module: braket.device_schema.dwave.dwave_advantage_device_level_parameters_v1 [assertion]
      early skip of rewriting module: braket.device_schema.dwave.dwave_advantage_device_parameters_v1 [assertion]
      early skip of rewriting module: braket.device_schema.dwave.dwave_device_capabilities_v1 [assertion]
      early skip of rewriting module: braket.device_schema.dwave.dwave_provider_properties_v1 [assertion]
      early skip of rewriting module: braket.device_schema.dwave.dwave_device_parameters_v1 [assertion]
      early skip of rewriting module: braket.device_schema.ionq [assertion]
      early skip of rewriting module: braket.device_schema.ionq.ionq_device_capabilities_v1 [assertion]
      early skip of rewriting module: braket.device_schema.ionq.ionq_provider_properties_v1 [assertion]
      early skip of rewriting module: braket.device_schema.ionq.ionq_device_parameters_v1 [assertion]
      early skip of rewriting module: braket.device_schema.rigetti [assertion]
      early skip of rewriting module: braket.device_schema.rigetti.rigetti_device_capabilities_v1 [assertion]
      early skip of rewriting module: braket.device_schema.rigetti.rigetti_provider_properties_v1 [assertion]
      early skip of rewriting module: braket.device_schema.rigetti.rigetti_device_parameters_v1 [assertion]
      early skip of rewriting module: braket.device_schema.simulators [assertion]
      early skip of rewriting module: braket.device_schema.simulators.gate_model_simulator_device_capabilities_v1 [assertion]
      early skip of rewriting module: braket.device_schema.simulators.gate_model_simulator_paradigm_properties_v1 [assertion]
      early skip of rewriting module: braket.device_schema.simulators.gate_model_simulator_device_parameters_v1 [assertion]
      early skip of rewriting module: braket.task_result [assertion]
      early skip of rewriting module: braket.task_result.additional_metadata [assertion]
      early skip of rewriting module: braket.task_result.dwave_metadata_v1 [assertion]
      early skip of rewriting module: braket.task_result.rigetti_metadata_v1 [assertion]
      early skip of rewriting module: braket.task_result.simulator_metadata_v1 [assertion]
      early skip of rewriting module: braket.task_result.annealing_task_result_v1 [assertion]
      early skip of rewriting module: braket.task_result.task_metadata_v1 [assertion]
      early skip of rewriting module: braket.task_result.gate_model_task_result_v1 [assertion]
      early skip of rewriting module: braket.tasks [assertion]
      early skip of rewriting module: braket.tasks.annealing_quantum_task_result [assertion]
      early skip of rewriting module: braket.tasks.gate_model_quantum_task_result [assertion]
      early skip of rewriting module: braket.tasks.quantum_task [assertion]
      early skip of rewriting module: braket.aws.aws_quantum_task_batch [assertion]
      early skip of rewriting module: concurrent.futures.thread [assertion]
      early skip of rewriting module: braket.devices [assertion]
      early skip of rewriting module: braket.devices.device [assertion]
      early skip of rewriting module: braket.devices.local_simulator [assertion]
      early skip of rewriting module: braket.simulator [assertion]
      early skip of rewriting module: braket.simulator.braket_simulator [assertion]
      early skip of rewriting module: braket.tasks.local_quantum_task [assertion]
      early skip of rewriting module: jsonschema [assertion]
      early skip of rewriting module: jsonschema.exceptions [assertion]
      early skip of rewriting module: jsonschema._utils [assertion]
      early skip of rewriting module: jsonschema.compat [assertion]
      early skip of rewriting module: jsonschema._format [assertion]
      early skip of rewriting module: idna [assertion]
      early skip of rewriting module: idna.package_data [assertion]
      early skip of rewriting module: idna.core [assertion]
      early skip of rewriting module: idna.idnadata [assertion]
      early skip of rewriting module: idna.intranges [assertion]
      early skip of rewriting module: rfc3987 [assertion]
      early skip of rewriting module: rfc3986_validator [assertion]
      early skip of rewriting module: strict_rfc3339 [assertion]
      early skip of rewriting module: rfc3339_validator [assertion]
      early skip of rewriting module: webcolors [assertion]
      early skip of rewriting module: jsonpointer [assertion]
      early skip of rewriting module: uritemplate [assertion]
      early skip of rewriting module: jsonschema._types [assertion]
      early skip of rewriting module: pyrsistent [assertion]
      early skip of rewriting module: pyrsistent._pmap [assertion]
      early skip of rewriting module: pyrsistent._pvector [assertion]
      early skip of rewriting module: pyrsistent._transformations [assertion]
      early skip of rewriting module: pvectorc [assertion]
      early skip of rewriting module: pyrsistent._pset [assertion]
      early skip of rewriting module: pyrsistent._pbag [assertion]
      early skip of rewriting module: pyrsistent._plist [assertion]
      early skip of rewriting module: pyrsistent._pdeque [assertion]
      early skip of rewriting module: pyrsistent._checked_types [assertion]
      early skip of rewriting module: pyrsistent._field_common [assertion]
      early skip of rewriting module: pyrsistent._precord [assertion]
      early skip of rewriting module: pyrsistent._pclass [assertion]
      early skip of rewriting module: pyrsistent._immutable [assertion]
      early skip of rewriting module: pyrsistent._helpers [assertion]
      early skip of rewriting module: pyrsistent._toolz [assertion]
      early skip of rewriting module: jsonschema.validators [assertion]
      early skip of rewriting module: jsonschema._legacy_validators [assertion]
      early skip of rewriting module: jsonschema._validators [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: patch
            obj: <function patch at 0x1110871f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: DWAVE_ARN
            obj: arn:aws:braket:::device/qpu/d-wave/Advantage_system1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: IONQ_ARN
            obj: arn:aws:braket:::device/qpu/ionq/ionQdevice
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: RIGETTI_ARN
            obj: arn:aws:braket:::device/qpu/rigetti/Aspen-9
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: RIGETTI_REGION
            obj: us-west-1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: SV1_ARN
            obj: arn:aws:braket:::device/quantum-simulator/amazon/sv1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: TN1_ARN
            obj: arn:aws:braket:::device/quantum-simulator/amazon/tn1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: run_and_assert
            obj: <function run_and_assert at 0x110ddd790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: run_batch_and_assert
            obj: <function run_batch_and_assert at 0x1118790d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: validate
            obj: <function validate at 0x12e6d7280>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: AwsDevice
            obj: <class 'braket.aws.aws_device.AwsDevice'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: AwsDeviceType
            obj: <enum 'AwsDeviceType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: AwsQuantumTask
            obj: <class 'braket.aws.aws_quantum_task.AwsQuantumTask'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: Circuit
            obj: <class 'braket.circuits.circuit.Circuit'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: DwaveDeviceCapabilities
            obj: <class 'braket.device_schema.dwave.dwave_device_capabilities_v1.DwaveDeviceCapabilities'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: RigettiDeviceCapabilities
            obj: <class 'braket.device_schema.rigetti.rigetti_device_capabilities_v1.RigettiDeviceCapabilities'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: GateModelSimulatorDeviceCapabilities
            obj: <class 'braket.device_schema.simulators.gate_model_simulator_device_capabilities_v1.GateModelSimulatorDeviceCapabilities'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: MOCK_GATE_MODEL_QPU_CAPABILITIES_JSON_1
            obj: {'braketSchemaHeader': {'name': 'braket.device_schema.rigetti.rigetti_device_capabilities', 'version': '1'}, 'service': {'executionWindows': [{'executionDay': 'Everyday', 'windowStartHour': '11:00', 'windowEndHour': '12:00'}], 'shotsRange': [1, 10]}, 'action': {'braket.ir.jaqcd.program': {'actionType': 'braket.ir.jaqcd.program', 'version': ['1'], 'supportedOperations': ['H']}}, 'paradigm': {'qubitCount': 30, 'nativeGateSet': ['ccnot', 'cy'], 'connectivity': {'fullyConnected': False, 'connectivityGraph': {'1': ['2', '3']}}}, 'deviceParameters': {}}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: MOCK_GATE_MODEL_QPU_CAPABILITIES_1
            obj: service=DeviceServiceProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.device_service_properties', version='1'), executionWindows=[DeviceExecutionWindow(executionDay=<ExecutionDay.EVERYDAY: 'Everyday'>, windowStartHour=datetime.time(11, 0), windowEndHour=datetime.time(12, 0))], shotsRange=(1, 10), deviceCost=None, deviceDocumentation=None, deviceLocation=None, updatedAt=None) action={<DeviceActionType.JAQCD: 'braket.ir.jaqcd.program'>: JaqcdDeviceActionProperties(version=['1'], actionType=<DeviceActionType.JAQCD: 'braket.ir.jaqcd.program'>, supportedOperations=['H'], supportedResultTypes=None, disabledQubitRewiringSupported=None)} deviceParameters={} braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.rigetti.rigetti_device_capabilities', version='1') paradigm=GateModelQpuParadigmProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.gate_model_qpu_paradigm_properties', version='1'), connectivity=DeviceConnectivity(fullyConnected=False, connectivityGraph={'1': ['2', '3']}), qubitCount=30, nativeGateSet=['ccnot', 'cy']) provider=None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_mock_regetti_schema_1
            obj: <function test_mock_regetti_schema_1 at 0x110dddaf0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e748c10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_mock_regetti_schema_1>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: MOCK_GATE_MODEL_QPU_1
            obj: {'deviceName': 'Aspen-9', 'deviceType': 'QPU', 'providerName': 'provider1', 'deviceStatus': 'OFFLINE', 'deviceCapabilities': '{"service": {"braketSchemaHeader": {"name": "braket.device_schema.device_service_properties", "version": "1"}, "executionWindows": [{"executionDay": "Everyday", "windowStartHour": "11:00:00", "windowEndHour": "12:00:00"}], "shotsRange": [1, 10], "deviceCost": null, "deviceDocumentation": null, "deviceLocation": null, "updatedAt": null}, "action": {"braket.ir.jaqcd.program": {"version": ["1"], "actionType": "braket.ir.jaqcd.program", "supportedOperations": ["H"], "supportedResultTypes": null, "disabledQubitRewiringSupported": null}}, "deviceParameters": {}, "braketSchemaHeader": {"name": "braket.device_schema.rigetti.rigetti_device_capabilities", "version": "1"}, "paradigm": {"braketSchemaHeader": {"name": "braket.device_schema.gate_model_qpu_paradigm_properties", "version": "1"}, "connectivity": {"fullyConnected": false, "connectivityGraph": {"1": ["2", "3"]}}, "qubitCount": 30, "nativeGateSet": ["ccnot", "cy"]}, "provider": null}'}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: MOCK_GATE_MODEL_QPU_CAPABILITIES_JSON_2
            obj: {'braketSchemaHeader': {'name': 'braket.device_schema.rigetti.rigetti_device_capabilities', 'version': '1'}, 'service': {'executionWindows': [{'executionDay': 'Everyday', 'windowStartHour': '11:00', 'windowEndHour': '12:00'}], 'shotsRange': [1, 10]}, 'action': {'braket.ir.jaqcd.program': {'actionType': 'braket.ir.jaqcd.program', 'version': ['1'], 'supportedOperations': ['H']}}, 'paradigm': {'qubitCount': 30, 'nativeGateSet': ['ccnot', 'cy'], 'connectivity': {'fullyConnected': True, 'connectivityGraph': {}}}, 'deviceParameters': {}}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: MOCK_GATE_MODEL_QPU_CAPABILITIES_2
            obj: service=DeviceServiceProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.device_service_properties', version='1'), executionWindows=[DeviceExecutionWindow(executionDay=<ExecutionDay.EVERYDAY: 'Everyday'>, windowStartHour=datetime.time(11, 0), windowEndHour=datetime.time(12, 0))], shotsRange=(1, 10), deviceCost=None, deviceDocumentation=None, deviceLocation=None, updatedAt=None) action={<DeviceActionType.JAQCD: 'braket.ir.jaqcd.program'>: JaqcdDeviceActionProperties(version=['1'], actionType=<DeviceActionType.JAQCD: 'braket.ir.jaqcd.program'>, supportedOperations=['H'], supportedResultTypes=None, disabledQubitRewiringSupported=None)} deviceParameters={} braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.rigetti.rigetti_device_capabilities', version='1') paradigm=GateModelQpuParadigmProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.gate_model_qpu_paradigm_properties', version='1'), connectivity=DeviceConnectivity(fullyConnected=True, connectivityGraph={}), qubitCount=30, nativeGateSet=['ccnot', 'cy']) provider=None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_mock_regetti_schema_2
            obj: <function test_mock_regetti_schema_2 at 0x111879670>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e748c10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_mock_regetti_schema_2>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: MOCK_GATE_MODEL_QPU_2
            obj: {'deviceName': 'Blah', 'deviceType': 'QPU', 'providerName': 'blahhhh', 'deviceStatus': 'OFFLINE', 'deviceCapabilities': '{"service": {"braketSchemaHeader": {"name": "braket.device_schema.device_service_properties", "version": "1"}, "executionWindows": [{"executionDay": "Everyday", "windowStartHour": "11:00:00", "windowEndHour": "12:00:00"}], "shotsRange": [1, 10], "deviceCost": null, "deviceDocumentation": null, "deviceLocation": null, "updatedAt": null}, "action": {"braket.ir.jaqcd.program": {"version": ["1"], "actionType": "braket.ir.jaqcd.program", "supportedOperations": ["H"], "supportedResultTypes": null, "disabledQubitRewiringSupported": null}}, "deviceParameters": {}, "braketSchemaHeader": {"name": "braket.device_schema.rigetti.rigetti_device_capabilities", "version": "1"}, "paradigm": {"braketSchemaHeader": {"name": "braket.device_schema.gate_model_qpu_paradigm_properties", "version": "1"}, "connectivity": {"fullyConnected": true, "connectivityGraph": {}}, "qubitCount": 30, "nativeGateSet": ["ccnot", "cy"]}, "provider": null}'}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: MOCK_DWAVE_QPU_CAPABILITIES_JSON
            obj: {'braketSchemaHeader': {'name': 'braket.device_schema.dwave.dwave_device_capabilities', 'version': '1'}, 'provider': {'annealingOffsetStep': 1.45, 'annealingOffsetStepPhi0': 1.45, 'annealingOffsetRanges': [[1.45, 1.45], [1.45, 1.45]], 'annealingDurationRange': [1, 2, 3], 'couplers': [[1, 2], [1, 2]], 'defaultAnnealingDuration': 1, 'defaultProgrammingThermalizationDuration': 1, 'defaultReadoutThermalizationDuration': 1, 'extendedJRange': [1, 2, 3], 'hGainScheduleRange': [1, 2, 3], 'hRange': [1, 2, 3], 'jRange': [1, 2, 3], 'maximumAnnealingSchedulePoints': 1, 'maximumHGainSchedulePoints': 1, 'perQubitCouplingRange': [1, 2, 3], 'programmingThermalizationDurationRange': [1, 2, 3], 'qubits': [1, 2, 3], 'qubitCount': 1, 'quotaConversionRate': 1, 'readoutThermalizationDurationRange': [1, 2, 3], 'taskRunDurationRange': [1, 2, 3], 'topology': {}}, 'service': {'executionWindows': [{'executionDay': 'Everyday', 'windowStartHour': '11:00', 'windowEndHour': '12:00'}], 'shotsRange': [1, 10]}, 'action': {'braket.ir.annealing.problem': {'actionType': 'braket.ir.annealing.problem', 'version': ['1']}}, 'deviceParameters': {}}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: MOCK_DWAVE_QPU_CAPABILITIES
            obj: braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_device_capabilities', version='1') service=DeviceServiceProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.device_service_properties', version='1'), executionWindows=[DeviceExecutionWindow(executionDay=<ExecutionDay.EVERYDAY: 'Everyday'>, windowStartHour=datetime.time(11, 0), windowEndHour=datetime.time(12, 0))], shotsRange=(1, 10), deviceCost=None, deviceDocumentation=None, deviceLocation=None, updatedAt=None) action={<DeviceActionType.ANNEALING: 'braket.ir.annealing.problem'>: DeviceActionProperties(version=['1'], actionType=<DeviceActionType.ANNEALING: 'braket.ir.annealing.problem'>)} deviceParameters={} provider=DwaveProviderProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_provider_properties', version='1'), annealingOffsetStep=1.45, annealingOffsetStepPhi0=1.45, annealingOffsetRanges=[[1.45, 1.45], [1.45, 1.45]], annealingDurationRange=[1, 2, 3], couplers=[[1, 2], [1, 2]], defaultAnnealingDuration=1, defaultProgrammingThermalizationDuration=1, defaultReadoutThermalizationDuration=1, extendedJRange=[1.0, 2.0, 3.0], hGainScheduleRange=[1.0, 2.0, 3.0], hRange=[1.0, 2.0, 3.0], jRange=[1.0, 2.0, 3.0], maximumAnnealingSchedulePoints=1, maximumHGainSchedulePoints=1, perQubitCouplingRange=[1.0, 2.0, 3.0], programmingThermalizationDurationRange=[1, 2, 3], qubits=[1, 2, 3], qubitCount=1, quotaConversionRate=1.0, readoutThermalizationDurationRange=[1, 2, 3], taskRunDurationRange=[1, 2, 3], topology={})
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_d_wave_schema
            obj: <function test_d_wave_schema at 0x12e5d2700>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e748c10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_d_wave_schema>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: MOCK_DWAVE_QPU
            obj: {'deviceName': 'Advantage_system1.1', 'deviceType': 'QPU', 'providerName': 'provider1', 'deviceStatus': 'ONLINE', 'deviceCapabilities': '{"braketSchemaHeader": {"name": "braket.device_schema.dwave.dwave_device_capabilities", "version": "1"}, "service": {"braketSchemaHeader": {"name": "braket.device_schema.device_service_properties", "version": "1"}, "executionWindows": [{"executionDay": "Everyday", "windowStartHour": "11:00:00", "windowEndHour": "12:00:00"}], "shotsRange": [1, 10], "deviceCost": null, "deviceDocumentation": null, "deviceLocation": null, "updatedAt": null}, "action": {"braket.ir.annealing.problem": {"version": ["1"], "actionType": "braket.ir.annealing.problem"}}, "deviceParameters": {}, "provider": {"braketSchemaHeader": {"name": "braket.device_schema.dwave.dwave_provider_properties", "version": "1"}, "annealingOffsetStep": 1.45, "annealingOffsetStepPhi0": 1.45, "annealingOffsetRanges": [[1.45, 1.45], [1.45, 1.45]], "annealingDurationRange": [1, 2, 3], "couplers": [[1, 2], [1, 2]], "defaultAnnealingDuration": 1, "defaultProgrammingThermalizationDuration": 1, "defaultReadoutThermalizationDuration": 1, "extendedJRange": [1.0, 2.0, 3.0], "hGainScheduleRange": [1.0, 2.0, 3.0], "hRange": [1.0, 2.0, 3.0], "jRange": [1.0, 2.0, 3.0], "maximumAnnealingSchedulePoints": 1, "maximumHGainSchedulePoints": 1, "perQubitCouplingRange": [1.0, 2.0, 3.0], "programmingThermalizationDurationRange": [1, 2, 3], "qubits": [1, 2, 3], "qubitCount": 1, "quotaConversionRate": 1.0, "readoutThermalizationDurationRange": [1, 2, 3], "taskRunDurationRange": [1, 2, 3], "topology": {}}}'}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: MOCK_GATE_MODEL_SIMULATOR_CAPABILITIES_JSON
            obj: {'braketSchemaHeader': {'name': 'braket.device_schema.simulators.gate_model_simulator_device_capabilities', 'version': '1'}, 'service': {'executionWindows': [{'executionDay': 'Everyday', 'windowStartHour': '11:00', 'windowEndHour': '12:00'}], 'shotsRange': [1, 10]}, 'action': {'braket.ir.jaqcd.program': {'actionType': 'braket.ir.jaqcd.program', 'version': ['1'], 'supportedOperations': ['H']}}, 'paradigm': {'qubitCount': 30}, 'deviceParameters': {}}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: MOCK_GATE_MODEL_SIMULATOR_CAPABILITIES
            obj: service=DeviceServiceProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.device_service_properties', version='1'), executionWindows=[DeviceExecutionWindow(executionDay=<ExecutionDay.EVERYDAY: 'Everyday'>, windowStartHour=datetime.time(11, 0), windowEndHour=datetime.time(12, 0))], shotsRange=(1, 10), deviceCost=None, deviceDocumentation=None, deviceLocation=None, updatedAt=None) action={<DeviceActionType.JAQCD: 'braket.ir.jaqcd.program'>: JaqcdDeviceActionProperties(version=['1'], actionType=<DeviceActionType.JAQCD: 'braket.ir.jaqcd.program'>, supportedOperations=['H'], supportedResultTypes=None, disabledQubitRewiringSupported=None)} deviceParameters={} braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.simulators.gate_model_simulator_device_capabilities', version='1') paradigm=GateModelSimulatorParadigmProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.simulators.gate_model_simulator_paradigm_properties', version='1'), qubitCount=30)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_gate_model_sim_schema
            obj: <function test_gate_model_sim_schema at 0x12e11ddc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e748c10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_gate_model_sim_schema>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: MOCK_GATE_MODEL_SIMULATOR
            obj: {'deviceName': 'SV1', 'deviceType': 'SIMULATOR', 'providerName': 'provider1', 'deviceStatus': 'ONLINE', 'deviceCapabilities': '{"service": {"braketSchemaHeader": {"name": "braket.device_schema.device_service_properties", "version": "1"}, "executionWindows": [{"executionDay": "Everyday", "windowStartHour": "11:00:00", "windowEndHour": "12:00:00"}], "shotsRange": [1, 10], "deviceCost": null, "deviceDocumentation": null, "deviceLocation": null, "updatedAt": null}, "action": {"braket.ir.jaqcd.program": {"version": ["1"], "actionType": "braket.ir.jaqcd.program", "supportedOperations": ["H"], "supportedResultTypes": null, "disabledQubitRewiringSupported": null}}, "deviceParameters": {}, "braketSchemaHeader": {"name": "braket.device_schema.simulators.gate_model_simulator_device_capabilities", "version": "1"}, "paradigm": {"braketSchemaHeader": {"name": "braket.device_schema.simulators.gate_model_simulator_paradigm_properties", "version": "1"}, "qubitCount": 30}}'}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: arn
            obj: <function arn at 0x12e6f1b80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: s3_destination_folder
            obj: <function s3_destination_folder at 0x12e6f1ca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: circuit
            obj: <function circuit at 0x12e6f1dc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: boto_session
            obj: <function boto_session at 0x12e6f1ee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: aws_explicit_session
            obj: <function aws_explicit_session at 0x12e742040>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: aws_session
            obj: <function aws_session at 0x12e742160>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: device
            obj: <function device at 0x12e742280>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_device_aws_session
            obj: <function test_device_aws_session at 0x12e742310>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e748f40>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: service=DeviceServiceProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.device_service_properties', version='1'), executionWindows=[DeviceExecutionWindow(executionDay=<ExecutionDay.EVERYDAY: 'Everyday'>, windowStartHour=datetime.time(11, 0), windowEndHour=datetime.time(12, 0))], shotsRange=(1, 10), deviceCost=None, deviceDocumentation=None, deviceLocation=None, updatedAt=None) action={<DeviceActionType.JAQCD: 'braket.ir.jaqcd.program'>: JaqcdDeviceActionProperties(version=['1'], actionType=<DeviceActionType.JAQCD: 'braket.ir.jaqcd.program'>, supportedOperations=['H'], supportedResultTypes=None, disabledQubitRewiringSupported=None)} deviceParameters={} braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.simulators.gate_model_simulator_device_capabilities', version='1') paradigm=GateModelSimulatorParadigmProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.simulators.gate_model_simulator_paradigm_properties', version='1'), qubitCount=30)
                argname: device_capabilities
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'deviceName': 'SV1', 'deviceType': 'SIMULATOR', 'providerName': 'provider1', 'deviceStatus': 'ONLINE', 'deviceCapabilities': '{"service": {"braketSchemaHeader": {"name": "braket.device_schema.device_service_properties", "version": "1"}, "executionWindows": [{"executionDay": "Everyday", "windowStartHour": "11:00:00", "windowEndHour": "12:00:00"}], "shotsRange": [1, 10], "deviceCost": null, "deviceDocumentation": null, "deviceLocation": null, "updatedAt": null}, "action": {"braket.ir.jaqcd.program": {"version": ["1"], "actionType": "braket.ir.jaqcd.program", "supportedOperations": ["H"], "supportedResultTypes": null, "disabledQubitRewiringSupported": null}}, "deviceParameters": {}, "braketSchemaHeader": {"name": "braket.device_schema.simulators.gate_model_simulator_device_capabilities", "version": "1"}, "paradigm": {"braketSchemaHeader": {"name": "braket.device_schema.simulators.gate_model_simulator_paradigm_properties", "version": "1"}, "qubitCount": 30}}'}
                argname: get_device_data
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: service=DeviceServiceProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.device_service_properties', version='1'), executionWindows=[DeviceExecutionWindow(executionDay=<ExecutionDay.EVERYDAY: 'Everyday'>, windowStartHour=datetime.time(11, 0), windowEndHour=datetime.time(12, 0))], shotsRange=(1, 10), deviceCost=None, deviceDocumentation=None, deviceLocation=None, updatedAt=None) action={<DeviceActionType.JAQCD: 'braket.ir.jaqcd.program'>: JaqcdDeviceActionProperties(version=['1'], actionType=<DeviceActionType.JAQCD: 'braket.ir.jaqcd.program'>, supportedOperations=['H'], supportedResultTypes=None, disabledQubitRewiringSupported=None)} deviceParameters={} braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.rigetti.rigetti_device_capabilities', version='1') paradigm=GateModelQpuParadigmProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.gate_model_qpu_paradigm_properties', version='1'), connectivity=DeviceConnectivity(fullyConnected=False, connectivityGraph={'1': ['2', '3']}), qubitCount=30, nativeGateSet=['ccnot', 'cy']) provider=None
                argname: device_capabilities
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'deviceName': 'Aspen-9', 'deviceType': 'QPU', 'providerName': 'provider1', 'deviceStatus': 'OFFLINE', 'deviceCapabilities': '{"service": {"braketSchemaHeader": {"name": "braket.device_schema.device_service_properties", "version": "1"}, "executionWindows": [{"executionDay": "Everyday", "windowStartHour": "11:00:00", "windowEndHour": "12:00:00"}], "shotsRange": [1, 10], "deviceCost": null, "deviceDocumentation": null, "deviceLocation": null, "updatedAt": null}, "action": {"braket.ir.jaqcd.program": {"version": ["1"], "actionType": "braket.ir.jaqcd.program", "supportedOperations": ["H"], "supportedResultTypes": null, "disabledQubitRewiringSupported": null}}, "deviceParameters": {}, "braketSchemaHeader": {"name": "braket.device_schema.rigetti.rigetti_device_capabilities", "version": "1"}, "paradigm": {"braketSchemaHeader": {"name": "braket.device_schema.gate_model_qpu_paradigm_properties", "version": "1"}, "connectivity": {"fullyConnected": false, "connectivityGraph": {"1": ["2", "3"]}}, "qubitCount": 30, "nativeGateSet": ["ccnot", "cy"]}, "provider": null}'}
                argname: get_device_data
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_device_capabilities', version='1') service=DeviceServiceProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.device_service_properties', version='1'), executionWindows=[DeviceExecutionWindow(executionDay=<ExecutionDay.EVERYDAY: 'Everyday'>, windowStartHour=datetime.time(11, 0), windowEndHour=datetime.time(12, 0))], shotsRange=(1, 10), deviceCost=None, deviceDocumentation=None, deviceLocation=None, updatedAt=None) action={<DeviceActionType.ANNEALING: 'braket.ir.annealing.problem'>: DeviceActionProperties(version=['1'], actionType=<DeviceActionType.ANNEALING: 'braket.ir.annealing.problem'>)} deviceParameters={} provider=DwaveProviderProperties(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_provider_properties', version='1'), annealingOffsetStep=1.45, annealingOffsetStepPhi0=1.45, annealingOffsetRanges=[[1.45, 1.45], [1.45, 1.45]], annealingDurationRange=[1, 2, 3], couplers=[[1, 2], [1, 2]], defaultAnnealingDuration=1, defaultProgrammingThermalizationDuration=1, defaultReadoutThermalizationDuration=1, extendedJRange=[1.0, 2.0, 3.0], hGainScheduleRange=[1.0, 2.0, 3.0], hRange=[1.0, 2.0, 3.0], jRange=[1.0, 2.0, 3.0], maximumAnnealingSchedulePoints=1, maximumHGainSchedulePoints=1, perQubitCouplingRange=[1.0, 2.0, 3.0], programmingThermalizationDurationRange=[1, 2, 3], qubits=[1, 2, 3], qubitCount=1, quotaConversionRate=1.0, readoutThermalizationDurationRange=[1, 2, 3], taskRunDurationRange=[1, 2, 3], topology={})
                argname: device_capabilities
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'deviceName': 'Advantage_system1.1', 'deviceType': 'QPU', 'providerName': 'provider1', 'deviceStatus': 'ONLINE', 'deviceCapabilities': '{"braketSchemaHeader": {"name": "braket.device_schema.dwave.dwave_device_capabilities", "version": "1"}, "service": {"braketSchemaHeader": {"name": "braket.device_schema.device_service_properties", "version": "1"}, "executionWindows": [{"executionDay": "Everyday", "windowStartHour": "11:00:00", "windowEndHour": "12:00:00"}], "shotsRange": [1, 10], "deviceCost": null, "deviceDocumentation": null, "deviceLocation": null, "updatedAt": null}, "action": {"braket.ir.annealing.problem": {"version": ["1"], "actionType": "braket.ir.annealing.problem"}}, "deviceParameters": {}, "provider": {"braketSchemaHeader": {"name": "braket.device_schema.dwave.dwave_provider_properties", "version": "1"}, "annealingOffsetStep": 1.45, "annealingOffsetStepPhi0": 1.45, "annealingOffsetRanges": [[1.45, 1.45], [1.45, 1.45]], "annealingDurationRange": [1, 2, 3], "couplers": [[1, 2], [1, 2]], "defaultAnnealingDuration": 1, "defaultProgrammingThermalizationDuration": 1, "defaultReadoutThermalizationDuration": 1, "extendedJRange": [1.0, 2.0, 3.0], "hGainScheduleRange": [1.0, 2.0, 3.0], "hRange": [1.0, 2.0, 3.0], "jRange": [1.0, 2.0, 3.0], "maximumAnnealingSchedulePoints": 1, "maximumHGainSchedulePoints": 1, "perQubitCouplingRange": [1.0, 2.0, 3.0], "programmingThermalizationDurationRange": [1, 2, 3], "qubits": [1, 2, 3], "qubitCount": 1, "quotaConversionRate": 1.0, "readoutThermalizationDurationRange": [1, 2, 3], "taskRunDurationRange": [1, 2, 3], "topology": {}}}'}
                argname: get_device_data
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_device_aws_session[device_capabilities0-get_device_data0]>, <Function test_device_aws_session[device_capabilities1-get_device_data1]>, <Function test_device_aws_session[device_capabilities2-get_device_data2]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_device_simulator_no_aws_session
            obj: <function test_device_simulator_no_aws_session at 0x12e7424c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_device_simulator_no_aws_session>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_copy_session
            obj: <function test_copy_session at 0x12e742670>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f730>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_copy_session>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_copy_explicit_session
            obj: <function test_copy_explicit_session at 0x12e742820>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f8e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_copy_explicit_session>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_device_qpu_no_aws_session
            obj: <function test_device_qpu_no_aws_session at 0x12e742a60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74fa90>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: [{'deviceName': 'Aspen-9', 'deviceType': 'QPU', 'providerName': 'provider1', 'deviceStatus': 'OFFLINE', 'deviceCapabilities': '{"service": {"braketSchemaHeader": {"name": "braket.device_schema.device_service_properties", "version": "1"}, "executionWindows": [{"executionDay": "Everyday", "windowStartHour": "11:00:00", "windowEndHour": "12:00:00"}], "shotsRange": [1, 10], "deviceCost": null, "deviceDocumentation": null, "deviceLocation": null, "updatedAt": null}, "action": {"braket.ir.jaqcd.program": {"version": ["1"], "actionType": "braket.ir.jaqcd.program", "supportedOperations": ["H"], "supportedResultTypes": null, "disabledQubitRewiringSupported": null}}, "deviceParameters": {}, "braketSchemaHeader": {"name": "braket.device_schema.rigetti.rigetti_device_capabilities", "version": "1"}, "paradigm": {"braketSchemaHeader": {"name": "braket.device_schema.gate_model_qpu_paradigm_properties", "version": "1"}, "connectivity": {"fullyConnected": false, "connectivityGraph": {"1": ["2", "3"]}}, "qubitCount": 30, "nativeGateSet": ["ccnot", "cy"]}, "provider": null}'}]
                argname: get_device_side_effect
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: [ValueError(), {'deviceName': 'Aspen-9', 'deviceType': 'QPU', 'providerName': 'provider1', 'deviceStatus': 'OFFLINE', 'deviceCapabilities': '{"service": {"braketSchemaHeader": {"name": "braket.device_schema.device_service_properties", "version": "1"}, "executionWindows": [{"executionDay": "Everyday", "windowStartHour": "11:00:00", "windowEndHour": "12:00:00"}], "shotsRange": [1, 10], "deviceCost": null, "deviceDocumentation": null, "deviceLocation": null, "updatedAt": null}, "action": {"braket.ir.jaqcd.program": {"version": ["1"], "actionType": "braket.ir.jaqcd.program", "supportedOperations": ["H"], "supportedResultTypes": null, "disabledQubitRewiringSupported": null}}, "deviceParameters": {}, "braketSchemaHeader": {"name": "braket.device_schema.rigetti.rigetti_device_capabilities", "version": "1"}, "paradigm": {"braketSchemaHeader": {"name": "braket.device_schema.gate_model_qpu_paradigm_properties", "version": "1"}, "connectivity": {"fullyConnected": false, "connectivityGraph": {"1": ["2", "3"]}}, "qubitCount": 30, "nativeGateSet": ["ccnot", "cy"]}, "provider": null}'}]
                argname: get_device_side_effect
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_device_qpu_no_aws_session[get_device_side_effect0]>, <Function test_device_qpu_no_aws_session[get_device_side_effect1]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_device_refresh_metadata
            obj: <function test_device_refresh_metadata at 0x12e742af0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f8e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_device_refresh_metadata>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_equality
            obj: <function test_equality at 0x12e742b80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74fc70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_equality>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_repr
            obj: <function test_repr at 0x12e742c10>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74fcd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_repr>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_device_simulator_not_found
            obj: <function test_device_simulator_not_found at 0x12e742ca0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f8e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_device_simulator_not_found>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_device_qpu_not_found
            obj: <function test_device_qpu_not_found at 0x12e742e50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74fc70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_device_qpu_not_found>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_run_no_extra
            obj: <function test_run_no_extra at 0x12e745040>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74fcd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_no_extra>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_run_with_positional_args
            obj: <function test_run_with_positional_args at 0x12e7451f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f8e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_with_positional_args>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_run_with_kwargs
            obj: <function test_run_with_kwargs at 0x12e7453a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74fa30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_with_kwargs>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_run_with_shots
            obj: <function test_run_with_shots at 0x12e745550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f790>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_with_shots>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_run_with_shots_kwargs
            obj: <function test_run_with_shots_kwargs at 0x12e745700>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f790>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_with_shots_kwargs>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_run_with_qpu_no_shots
            obj: <function test_run_with_qpu_no_shots at 0x12e7458b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f940>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_with_qpu_no_shots>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_run_with_shots_poll_timeout_kwargs
            obj: <function test_run_with_shots_poll_timeout_kwargs at 0x12e745a60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_with_shots_poll_timeout_kwargs>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_run_with_positional_args_and_kwargs
            obj: <function test_run_with_positional_args_and_kwargs at 0x12e745c10>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f790>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_with_positional_args_and_kwargs>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_run_batch_no_extra
            obj: <function test_run_batch_no_extra at 0x12e745e50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f940>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_batch_no_extra>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_run_batch_with_shots
            obj: <function test_run_batch_with_shots at 0x12e74a0d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_batch_with_shots>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_run_batch_with_max_parallel_and_kwargs
            obj: <function test_run_batch_with_max_parallel_and_kwargs at 0x12e74a310>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f790>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_run_batch_with_max_parallel_and_kwargs>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: _run_and_assert
            obj: <function _run_and_assert at 0x12e74a3a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: _run_batch_and_assert
            obj: <function _run_batch_and_assert at 0x12e74a430>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: _assert_device_fields
            obj: <function _assert_device_fields at 0x12e74a4c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_get_devices
            obj: <function test_get_devices at 0x12e74a670>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f790>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_devices>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_get_devices_simulators_only
            obj: <function test_get_devices_simulators_only at 0x12e74a820>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_devices_simulators_only>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_device.py>
            name: test_get_devices_invalid_order_by
            obj: <function test_get_devices_invalid_order_by at 0x12e74a8b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e74f940>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_devices_invalid_order_by>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/unit_tests/braket/aws/test_aws_device.py' lenresult=31 outcome='passed'> [hook]
    genitems <Function test_mock_regetti_schema_1> [collection]
      pytest_itemcollected [hook]
          item: <Function test_mock_regetti_schema_1>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_mock_regetti_schema_2> [collection]
      pytest_itemcollected [hook]
          item: <Function test_mock_regetti_schema_2>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_d_wave_schema> [collection]
      pytest_itemcollected [hook]
          item: <Function test_d_wave_schema>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_gate_model_sim_schema> [collection]
      pytest_itemcollected [hook]
          item: <Function test_gate_model_sim_schema>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_device_aws_session[device_capabilities0-get_device_data0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_device_aws_session[device_capabilities0-get_device_data0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_device_aws_session[device_capabilities1-get_device_data1]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_device_aws_session[device_capabilities1-get_device_data1]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_device_aws_session[device_capabilities2-get_device_data2]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_device_aws_session[device_capabilities2-get_device_data2]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_device_simulator_no_aws_session> [collection]
      pytest_itemcollected [hook]
          item: <Function test_device_simulator_no_aws_session>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_copy_session> [collection]
      pytest_itemcollected [hook]
          item: <Function test_copy_session>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_copy_explicit_session> [collection]
      pytest_itemcollected [hook]
          item: <Function test_copy_explicit_session>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_device_qpu_no_aws_session[get_device_side_effect0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_device_qpu_no_aws_session[get_device_side_effect0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_device_qpu_no_aws_session[get_device_side_effect1]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_device_qpu_no_aws_session[get_device_side_effect1]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_device_refresh_metadata> [collection]
      pytest_itemcollected [hook]
          item: <Function test_device_refresh_metadata>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_equality> [collection]
      pytest_itemcollected [hook]
          item: <Function test_equality>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_repr> [collection]
      pytest_itemcollected [hook]
          item: <Function test_repr>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_device_simulator_not_found> [collection]
      pytest_itemcollected [hook]
          item: <Function test_device_simulator_not_found>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_device_qpu_not_found> [collection]
      pytest_itemcollected [hook]
          item: <Function test_device_qpu_not_found>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_no_extra> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_no_extra>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_with_positional_args> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_with_positional_args>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_with_kwargs> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_with_kwargs>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_with_shots> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_with_shots>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_with_shots_kwargs> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_with_shots_kwargs>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_with_qpu_no_shots> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_with_qpu_no_shots>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_with_shots_poll_timeout_kwargs> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_with_shots_poll_timeout_kwargs>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_with_positional_args_and_kwargs> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_with_positional_args_and_kwargs>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_batch_no_extra> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_batch_no_extra>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_batch_with_shots> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_batch_with_shots>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_run_batch_with_max_parallel_and_kwargs> [collection]
      pytest_itemcollected [hook]
          item: <Function test_run_batch_with_max_parallel_and_kwargs>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_devices> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_devices>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_devices_simulators_only> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_devices_simulators_only>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_devices_invalid_order_by> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_devices_invalid_order_by>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/unit_tests/braket/aws/test_aws_device.py' lenresult=31 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/unit_tests/braket/aws/test_aws_quantum_task.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
      find_module called for: test_aws_quantum_task [assertion]
      matched test file '/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_quantum_task.py' [assertion]
      found cached rewritten pyc for /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_quantum_task.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: asyncio
            obj: <module 'asyncio' from '/usr/local/Cellar/python@3.9/3.9.1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: json
            obj: <module 'json' from '/usr/local/Cellar/python@3.9/3.9.1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: threading
            obj: <module 'threading' from '/usr/local/Cellar/python@3.9/3.9.1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/threading.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: time
            obj: <module 'time' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: patch
            obj: <function patch at 0x1110871f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: MockS3
            obj: <class 'common_test_utils.MockS3'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: validate
            obj: <function validate at 0x12e6d7280>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: Problem
            obj: <class 'braket.annealing.problem.Problem'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: ProblemType
            obj: <enum 'ProblemType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: AwsQuantumTask
            obj: <class 'braket.aws.aws_quantum_task.AwsQuantumTask'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: _create_annealing_device_params
            obj: <function _create_annealing_device_params at 0x12e5d7b80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: AwsSession
            obj: <class 'braket.aws.aws_session.AwsSession'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: Circuit
            obj: <class 'braket.circuits.circuit.Circuit'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: GateModelParameters
            obj: <class 'braket.device_schema.gate_model_parameters_v1.GateModelParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: Dwave2000QDeviceParameters
            obj: <class 'braket.device_schema.dwave.dwave_2000Q_device_parameters_v1.Dwave2000QDeviceParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: DwaveAdvantageDeviceParameters
            obj: <class 'braket.device_schema.dwave.dwave_advantage_device_parameters_v1.DwaveAdvantageDeviceParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: DwaveDeviceParameters
            obj: <class 'braket.device_schema.dwave.dwave_device_parameters_v1.DwaveDeviceParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: IonqDeviceParameters
            obj: <class 'braket.device_schema.ionq.ionq_device_parameters_v1.IonqDeviceParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: RigettiDeviceParameters
            obj: <class 'braket.device_schema.rigetti.rigetti_device_parameters_v1.RigettiDeviceParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: GateModelSimulatorDeviceParameters
            obj: <class 'braket.device_schema.simulators.gate_model_simulator_device_parameters_v1.GateModelSimulatorDeviceParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: AnnealingQuantumTaskResult
            obj: <class 'braket.tasks.annealing_quantum_task_result.AnnealingQuantumTaskResult'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: GateModelQuantumTaskResult
            obj: <class 'braket.tasks.gate_model_quantum_task_result.GateModelQuantumTaskResult'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: S3_TARGET
            obj: S3DestinationFolder(bucket='foo', key='bar')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: aws_session
            obj: <function aws_session at 0x12e771f70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: quantum_task
            obj: <function quantum_task at 0x12e77a0d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: circuit_task
            obj: <function circuit_task at 0x12e77a1f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: annealing_task
            obj: <function annealing_task at 0x12e77a310>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: arn
            obj: <function arn at 0x12e77a430>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: circuit
            obj: <function circuit at 0x12e77a550>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: problem
            obj: <function problem at 0x12e77a670>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_equality
            obj: <function test_equality at 0x12e77a700>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_equality>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_str
            obj: <function test_str at 0x12e77a790>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785670>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_str>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_hash
            obj: <function test_hash at 0x12e77a820>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7858b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_hash>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_id_getter
            obj: <function test_id_getter at 0x12e77a8b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785ac0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_id_getter>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_no_id_setter
            obj: <function test_no_id_setter at 0x12e77a940>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785c70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_no_id_setter>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_metadata
            obj: <function test_metadata at 0x12e77a9d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785eb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_metadata>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_metadata_call_if_none
            obj: <function test_metadata_call_if_none at 0x12e77aa60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785a90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_metadata_call_if_none>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_state
            obj: <function test_state at 0x12e77aaf0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785610>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_state>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_cancel
            obj: <function test_cancel at 0x12e77ab80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785580>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_cancel>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_cancel_without_fetching_result
            obj: <function test_cancel_without_fetching_result at 0x12e77ac10>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785a90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_cancel_without_fetching_result>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: asyncio_get_event_loop_side_effect
            obj: <function asyncio_get_event_loop_side_effect at 0x12e77aca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_initialize_asyncio_event_loop_if_required
            obj: <function test_initialize_asyncio_event_loop_if_required at 0x12e77ae50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785a90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_initialize_asyncio_event_loop_if_required>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_result_circuit
            obj: <function test_result_circuit at 0x12e77aee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785580>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_result_circuit>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_result_annealing
            obj: <function test_result_annealing at 0x12e77af70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785610>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_result_annealing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_result_invalid_type
            obj: <function test_result_invalid_type at 0x12e77d040>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785a90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_result_invalid_type>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_result_circuit_cached
            obj: <function test_result_circuit_cached at 0x12e77d0d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785580>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_result_circuit_cached>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_no_result
            obj: <function test_no_result at 0x12e77d160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785610>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_no_result>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_result_cached_future
            obj: <function test_result_cached_future at 0x12e77d1f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785a90>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {"braketSchemaHeader": {"name": "braket.task_result.gate_model_task_result", "version": "1"}, "measurements": [[0, 0], [0, 0], [0, 0], [1, 1]], "measuredQubits": [0, 1], "taskMetadata": {"braketSchemaHeader": {"name": "braket.task_result.task_metadata", "version": "1"}, "id": "task_arn", "shots": 100, "deviceId": "default"}, "additionalMetadata": {"action": {"braketSchemaHeader": {"name": "braket.ir.jaqcd.program", "version": "1"}, "instructions": [{"control": 0, "target": 1, "type": "cnot"}]}}}
                argname: result_string
            finish pytest_make_parametrize_id --> None [hook]
          early skip of rewriting module: encodings.unicode_escape [assertion]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {"braketSchemaHeader": {"name": "braket.task_result.gate_model_task_result", "version": "1"}, "measurements": [[0, 0], [0, 0], [0, 0], [1, 1]], "measuredQubits": [0, 1], "resultTypes": [{"type": {"observable": ["h", "x"], "targets": [0, 1], "type": "expectation"}, "value": 0.7071067811865474}, {"type": {"states": ["01", "10", "00", "11"], "type": "amplitude"}, "value": {"01": [0.0, 0.0], "10": [0.0, 0.0], "00": [0.7071067811865475, 0.0], "11": [0.7071067811865475, 0.0]}}], "taskMetadata": {"braketSchemaHeader": {"name": "braket.task_result.task_metadata", "version": "1"}, "id": "task_arn", "shots": 100, "deviceId": "default"}, "additionalMetadata": {"action": {"braketSchemaHeader": {"name": "braket.ir.jaqcd.program", "version": "1"}, "instructions": [{"control": 0, "target": 1, "type": "cnot"}]}}}
                argname: result_string
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_result_cached_future[{"braketSchemaHeader": {"name": "braket.task_result.gate_model_task_result", "version": "1"}, "measurements": [[0, 0], [0, 0], [0, 0], [1, 1]], "measuredQubits": [0, 1], "taskMetadata": {"braketSchemaHeader": {"name": "braket.task_result.task_metadata", "version": "1"}, "id": "task_arn", "shots": 100, "deviceId": "default"}, "additionalMetadata": {"action": {"braketSchemaHeader": {"name": "braket.ir.jaqcd.program", "version": "1"}, "instructions": [{"control": 0, "target": 1, "type": "cnot"}]}}}]>, <Function test_result_cached_future[{"braketSchemaHeader": {"name": "braket.task_result.gate_model_task_result", "version": "1"}, "measurements": [[0, 0], [0, 0], [0, 0], [1, 1]], "measuredQubits": [0, 1], "resultTypes": [{"type": {"observable": ["h", "x"], "targets": [0, 1], "type": "expectation"}, "value": 0.7071067811865474}, {"type": {"states": ["01", "10", "00", "11"], "type": "amplitude"}, "value": {"01": [0.0, 0.0], "10": [0.0, 0.0], "00": [0.7071067811865475, 0.0], "11": [0.7071067811865475, 0.0]}}], "taskMetadata": {"braketSchemaHeader": {"name": "braket.task_result.task_metadata", "version": "1"}, "id": "task_arn", "shots": 100, "deviceId": "default"}, "additionalMetadata": {"action": {"braketSchemaHeader": {"name": "braket.ir.jaqcd.program", "version": "1"}, "instructions": [{"control": 0, "target": 1, "type": "cnot"}]}}}]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_async_result
            obj: <function test_async_result at 0x12e74aca0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e795460>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: COMPLETED
                argname: status
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: GateModelQuantumTaskResult(task_metadata=TaskMetadata(braketSchemaHeader=BraketSchemaHeader(name='braket.task_result.task_metadata', version='1'), id='task_arn', shots=100, deviceId='default', deviceParameters=None, createdAt=None, endedAt=None, status=None, failureReason=None), additional_metadata=AdditionalMetadata(action=Program(braketSchemaHeader=BraketSchemaHeader(name='braket.ir.jaqcd.program', version='1'), instructions=[CNot(control=0, target=1, type=<Type.cnot: 'cnot'>)], results=None, basis_rotation_instructions=None), dwaveMetadata=None, rigettiMetadata=None, simulatorMetadata=None), result_types=[], values=[], measurements=array([[0, 0],
       [0, 0],
       [0, 0],
       [1, 1]]), measured_qubits=[0, 1], measurement_counts=Counter({'00': 3, '11': 1}), measurement_probabilities={'00': 0.75, '11': 0.25}, measurements_copied_from_device=True, measurement_counts_copied_from_device=False, measurement_probabilities_copied_from_device=False, _result_types_indices={})
                argname: result
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: FAILED
                argname: status
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: None
                argname: result
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_async_result[COMPLETED-result0]>, <Function test_async_result[FAILED-None]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_failed_task
            obj: <function test_failed_task at 0x12e74ac10>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e78ee20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_failed_task>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_timeout_completed
            obj: <function test_timeout_completed at 0x12e74a940>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e78e970>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_timeout_completed>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_timeout_no_result_terminal_state
            obj: <function test_timeout_no_result_terminal_state at 0x12e74a9d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e78e400>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_timeout_no_result_terminal_state>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_create_invalid_s3_folder
            obj: <function test_create_invalid_s3_folder at 0x12e77d280>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e78e640>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_create_invalid_s3_folder>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_create_invalid_task_specification
            obj: <function test_create_invalid_task_specification at 0x12e77d310>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e78e970>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_create_invalid_task_specification>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_from_circuit_with_shots
            obj: <function test_from_circuit_with_shots at 0x12e77d3a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e78e400>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: device/qpu/ionq
                argname: device_arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: <class 'braket.device_schema.ionq.ionq_device_parameters_v1.IonqDeviceParameters'>
                argname: device_parameters_class
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: device/qpu/rigetti
                argname: device_arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: <class 'braket.device_schema.rigetti.rigetti_device_parameters_v1.RigettiDeviceParameters'>
                argname: device_parameters_class
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: device/quantum-simulator
                argname: device_arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: <class 'braket.device_schema.simulators.gate_model_simulator_device_parameters_v1.GateModelSimulatorDeviceParameters'>
                argname: device_parameters_class
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_from_circuit_with_shots[device/qpu/ionq-IonqDeviceParameters]>, <Function test_from_circuit_with_shots[device/qpu/rigetti-RigettiDeviceParameters]>, <Function test_from_circuit_with_shots[device/quantum-simulator-GateModelSimulatorDeviceParameters]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_from_circuit_with_disabled_rewiring
            obj: <function test_from_circuit_with_disabled_rewiring at 0x12e77d430>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e795df0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: device/qpu/rigetti
                argname: device_arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: <class 'braket.device_schema.rigetti.rigetti_device_parameters_v1.RigettiDeviceParameters'>
                argname: device_parameters_class
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_from_circuit_with_disabled_rewiring[device/qpu/rigetti-RigettiDeviceParameters]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_from_circuit_with_shots_value_error
            obj: <function test_from_circuit_with_shots_value_error at 0x12e77d4c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7a1340>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_from_circuit_with_shots_value_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_from_annealing
            obj: <function test_from_annealing at 0x12e77d550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7a15e0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'providerLevelParameters': {'postprocessingType': 'OPTIMIZATION', 'annealingOffsets': [3.67, 6.123], 'annealingSchedule': [[13.37, 10.08], [3.14, 1.618]], 'annealingDuration': 1, 'autoScale': False, 'beta': 0.2, 'chains': [[0, 1, 5], [6]], 'compensateFluxDrift': False, 'fluxBiases': [1.1, 2.2, 3.3, 4.4], 'initialState': [1, 3, 0, 1], 'maxResults': 1, 'programmingThermalizationDuration': 625, 'readoutThermalizationDuration': 256, 'reduceIntersampleCorrelation': False, 'reinitializeState': True, 'resultFormat': 'RAW', 'spinReversalTransformCount': 100}}
                argname: device_parameters
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: arn:aws:braket:::device/qpu/d-wave/Advantage_system1
                argname: arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'deviceLevelParameters': {'postprocessingType': 'OPTIMIZATION', 'beta': 0.2, 'annealingOffsets': [3.67, 6.123], 'annealingSchedule': [[13.37, 10.08], [3.14, 1.618]], 'annealingDuration': 1, 'autoScale': False, 'chains': [[0, 1, 5], [6]], 'compensateFluxDrift': False, 'fluxBiases': [1.1, 2.2, 3.3, 4.4], 'initialState': [1, 3, 0, 1], 'maxResults': 1, 'programmingThermalizationDuration': 625, 'readoutThermalizationDuration': 256, 'reduceIntersampleCorrelation': False, 'reinitializeState': True, 'resultFormat': 'RAW', 'spinReversalTransformCount': 100}}
                argname: device_parameters
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6
                argname: arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'deviceLevelParameters': {'postprocessingType': 'OPTIMIZATION', 'beta': 0.2, 'annealingOffsets': [3.67, 6.123], 'annealingSchedule': [[13.37, 10.08], [3.14, 1.618]], 'annealingDuration': 1, 'autoScale': False, 'chains': [[0, 1, 5], [6]], 'compensateFluxDrift': False, 'fluxBiases': [1.1, 2.2, 3.3, 4.4], 'initialState': [1, 3, 0, 1], 'maxResults': 1, 'programmingThermalizationDuration': 625, 'readoutThermalizationDuration': 256, 'reduceIntersampleCorrelation': False, 'reinitializeState': True, 'resultFormat': 'RAW', 'spinReversalTransformCount': 100}}
                argname: device_parameters
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: arn:aws:braket:::device/qpu/d-wave/Advantage_system1
                argname: arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'deviceLevelParameters': {'postprocessingType': 'OPTIMIZATION', 'beta': 0.2, 'annealingOffsets': [3.67, 6.123], 'annealingSchedule': [[13.37, 10.08], [3.14, 1.618]], 'annealingDuration': 1, 'autoScale': False, 'chains': [[0, 1, 5], [6]], 'compensateFluxDrift': False, 'fluxBiases': [1.1, 2.2, 3.3, 4.4], 'initialState': [1, 3, 0, 1], 'maxResults': 1, 'programmingThermalizationDuration': 625, 'readoutThermalizationDuration': 256, 'reduceIntersampleCorrelation': False, 'reinitializeState': True, 'resultFormat': 'RAW', 'spinReversalTransformCount': 100}}
                argname: device_parameters
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: arn:aws:braket:::device/qpu/d-wave/fake_arn
                argname: arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'deviceLevelParameters': {'postprocessingType': 'OPTIMIZATION', 'annealingOffsets': [3.67, 6.123], 'annealingSchedule': [[13.37, 10.08], [3.14, 1.618]], 'annealingDuration': 1, 'autoScale': False, 'beta': 0.2, 'chains': [[0, 1, 5], [6]], 'compensateFluxDrift': False, 'fluxBiases': [1.1, 2.2, 3.3, 4.4], 'initialState': [1, 3, 0, 1], 'maxResults': 1, 'programmingThermalizationDuration': 625, 'readoutThermalizationDuration': 256, 'reduceIntersampleCorrelation': False, 'reinitializeState': True, 'resultFormat': 'RAW', 'spinReversalTransformCount': 100}}
                argname: device_parameters
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6
                argname: arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_device_parameters', version='1') providerLevelParameters=DwaveProviderLevelParameters(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_provider_level_parameters', version='1'), annealingOffsets=[3.67, 6.123], annealingSchedule=[[13.37, 10.08], [3.14, 1.618]], annealingDuration=1, autoScale=False, beta=0.2, chains=[[0, 1, 5], [6]], compensateFluxDrift=False, fluxBiases=[1.1, 2.2, 3.3, 4.4], initialState=[1, 3, 0, 1], maxResults=1, postprocessingType=<PostProcessingType.OPTIMIZATION: 'OPTIMIZATION'>, programmingThermalizationDuration=625, readoutThermalizationDuration=256, reduceIntersampleCorrelation=False, reinitializeState=True, resultFormat=<ResultFormat.RAW: 'RAW'>, spinReversalTransformCount=100) deviceLevelParameters=None
                argname: device_parameters
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: arn:aws:braket:::device/qpu/d-wave/Advantage_system1
                argname: arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_device_parameters', version='1') providerLevelParameters=None deviceLevelParameters=DwaveAdvantageDeviceLevelParameters(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_advantage_device_level_parameters', version='1'), annealingOffsets=[3.67, 6.123], annealingSchedule=[[13.37, 10.08], [3.14, 1.618]], annealingDuration=1, autoScale=False, compensateFluxDrift=False, fluxBiases=[1.1, 2.2, 3.3, 4.4], initialState=[1, 3, 0, 1], maxResults=1, programmingThermalizationDuration=625, readoutThermalizationDuration=256, reduceIntersampleCorrelation=False, reinitializeState=True, resultFormat=<ResultFormat.RAW: 'RAW'>, spinReversalTransformCount=100)
                argname: device_parameters
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: arn:aws:braket:::device/qpu/d-wave/Advantage_system1
                argname: arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_advantage_device_parameters', version='1') deviceLevelParameters=DwaveAdvantageDeviceLevelParameters(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_advantage_device_level_parameters', version='1'), annealingOffsets=[3.67, 6.123], annealingSchedule=[[13.37, 10.08], [3.14, 1.618]], annealingDuration=1, autoScale=False, compensateFluxDrift=False, fluxBiases=[1.1, 2.2, 3.3, 4.4], initialState=[1, 3, 0, 1], maxResults=1, programmingThermalizationDuration=625, readoutThermalizationDuration=256, reduceIntersampleCorrelation=False, reinitializeState=True, resultFormat=<ResultFormat.RAW: 'RAW'>, spinReversalTransformCount=100)
                argname: device_parameters
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: arn:aws:braket:::device/qpu/d-wave/Advantage_system1
                argname: arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_2000Q_device_parameters', version='1') deviceLevelParameters=Dwave2000QDeviceLevelParameters(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_2000Q_device_level_parameters', version='1'), annealingOffsets=[3.67, 6.123], annealingSchedule=[[13.37, 10.08], [3.14, 1.618]], annealingDuration=1, autoScale=False, beta=0.2, chains=[[0, 1, 5], [6]], compensateFluxDrift=False, fluxBiases=[1.1, 2.2, 3.3, 4.4], initialState=[1, 3, 0, 1], maxResults=1, postprocessingType=<PostProcessingType.OPTIMIZATION: 'OPTIMIZATION'>, programmingThermalizationDuration=625, readoutThermalizationDuration=256, reduceIntersampleCorrelation=False, reinitializeState=True, resultFormat=<ResultFormat.RAW: 'RAW'>, spinReversalTransformCount=100)
                argname: device_parameters
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6
                argname: arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_2000Q_device_parameters', version='1') deviceLevelParameters=Dwave2000QDeviceLevelParameters(braketSchemaHeader=BraketSchemaHeader(name='braket.device_schema.dwave.dwave_2000Q_device_level_parameters', version='1'), annealingOffsets=None, annealingSchedule=None, annealingDuration=None, autoScale=None, beta=None, chains=None, compensateFluxDrift=None, fluxBiases=None, initialState=None, maxResults=None, postprocessingType=None, programmingThermalizationDuration=None, readoutThermalizationDuration=None, reduceIntersampleCorrelation=None, reinitializeState=None, resultFormat=None, spinReversalTransformCount=None)
                argname: device_parameters
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6
                argname: arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {}
                argname: device_parameters
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6
                argname: arn
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_from_annealing[device_parameters0-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>, <Function test_from_annealing[device_parameters1-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>, <Function test_from_annealing[device_parameters2-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>, <Function test_from_annealing[device_parameters3-arn:aws:braket:::device/qpu/d-wave/fake_arn]>, <Function test_from_annealing[device_parameters4-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>, <Function test_from_annealing[device_parameters5-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>, <Function test_from_annealing[device_parameters6-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>, <Function test_from_annealing[device_parameters7-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>, <Function test_from_annealing[device_parameters8-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>, <Function test_from_annealing[device_parameters9-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>, <Function test_from_annealing[device_parameters10-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_create_with_tags
            obj: <function test_create_with_tags at 0x12e77d5e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7a1850>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: device/qpu/ionq
                argname: device_arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: <class 'braket.device_schema.ionq.ionq_device_parameters_v1.IonqDeviceParameters'>
                argname: device_parameters_class
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: device/qpu/rigetti
                argname: device_arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: <class 'braket.device_schema.rigetti.rigetti_device_parameters_v1.RigettiDeviceParameters'>
                argname: device_parameters_class
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: device/quantum-simulator
                argname: device_arn
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: <class 'braket.device_schema.simulators.gate_model_simulator_device_parameters_v1.GateModelSimulatorDeviceParameters'>
                argname: device_parameters_class
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_create_with_tags[device/qpu/ionq-IonqDeviceParameters]>, <Function test_create_with_tags[device/qpu/rigetti-RigettiDeviceParameters]>, <Function test_create_with_tags[device/quantum-simulator-GateModelSimulatorDeviceParameters]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_init_new_thread
            obj: <function test_init_new_thread at 0x12e77d670>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7a1670>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_init_new_thread>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: test_aws_session_for_task_arn
            obj: <function test_aws_session_for_task_arn at 0x12e77d820>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e785c10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_aws_session_for_task_arn>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: _init_and_add_to_list
            obj: <function _init_and_add_to_list at 0x12e77d8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: _assert_create_quantum_task_called_with
            obj: <function _assert_create_quantum_task_called_with at 0x12e77d940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: _mock_metadata
            obj: <function _mock_metadata at 0x12e77d9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task.py>
            name: _mock_s3
            obj: <function _mock_s3 at 0x12e77da60>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/unit_tests/braket/aws/test_aws_quantum_task.py' lenresult=46 outcome='passed'> [hook]
    genitems <Function test_equality> [collection]
      pytest_itemcollected [hook]
          item: <Function test_equality>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_str> [collection]
      pytest_itemcollected [hook]
          item: <Function test_str>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_hash> [collection]
      pytest_itemcollected [hook]
          item: <Function test_hash>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_id_getter> [collection]
      pytest_itemcollected [hook]
          item: <Function test_id_getter>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_no_id_setter> [collection]
      pytest_itemcollected [hook]
          item: <Function test_no_id_setter>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_metadata> [collection]
      pytest_itemcollected [hook]
          item: <Function test_metadata>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_metadata_call_if_none> [collection]
      pytest_itemcollected [hook]
          item: <Function test_metadata_call_if_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_state> [collection]
      pytest_itemcollected [hook]
          item: <Function test_state>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_cancel> [collection]
      pytest_itemcollected [hook]
          item: <Function test_cancel>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_cancel_without_fetching_result> [collection]
      pytest_itemcollected [hook]
          item: <Function test_cancel_without_fetching_result>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_initialize_asyncio_event_loop_if_required> [collection]
      pytest_itemcollected [hook]
          item: <Function test_initialize_asyncio_event_loop_if_required>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_result_circuit> [collection]
      pytest_itemcollected [hook]
          item: <Function test_result_circuit>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_result_annealing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_result_annealing>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_result_invalid_type> [collection]
      pytest_itemcollected [hook]
          item: <Function test_result_invalid_type>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_result_circuit_cached> [collection]
      pytest_itemcollected [hook]
          item: <Function test_result_circuit_cached>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_no_result> [collection]
      pytest_itemcollected [hook]
          item: <Function test_no_result>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_result_cached_future[{"braketSchemaHeader": {"name": "braket.task_result.gate_model_task_result", "version": "1"}, "measurements": [[0, 0], [0, 0], [0, 0], [1, 1]], "measuredQubits": [0, 1], "taskMetadata": {"braketSchemaHeader": {"name": "braket.task_result.task_metadata", "version": "1"}, "id": "task_arn", "shots": 100, "deviceId": "default"}, "additionalMetadata": {"action": {"braketSchemaHeader": {"name": "braket.ir.jaqcd.program", "version": "1"}, "instructions": [{"control": 0, "target": 1, "type": "cnot"}]}}}]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_result_cached_future[{"braketSchemaHeader": {"name": "braket.task_result.gate_model_task_result", "version": "1"}, "measurements": [[0, 0], [0, 0], [0, 0], [1, 1]], "measuredQubits": [0, 1], "taskMetadata": {"braketSchemaHeader": {"name": "braket.task_result.task_metadata", "version": "1"}, "id": "task_arn", "shots": 100, "deviceId": "default"}, "additionalMetadata": {"action": {"braketSchemaHeader": {"name": "braket.ir.jaqcd.program", "version": "1"}, "instructions": [{"control": 0, "target": 1, "type": "cnot"}]}}}]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_result_cached_future[{"braketSchemaHeader": {"name": "braket.task_result.gate_model_task_result", "version": "1"}, "measurements": [[0, 0], [0, 0], [0, 0], [1, 1]], "measuredQubits": [0, 1], "resultTypes": [{"type": {"observable": ["h", "x"], "targets": [0, 1], "type": "expectation"}, "value": 0.7071067811865474}, {"type": {"states": ["01", "10", "00", "11"], "type": "amplitude"}, "value": {"01": [0.0, 0.0], "10": [0.0, 0.0], "00": [0.7071067811865475, 0.0], "11": [0.7071067811865475, 0.0]}}], "taskMetadata": {"braketSchemaHeader": {"name": "braket.task_result.task_metadata", "version": "1"}, "id": "task_arn", "shots": 100, "deviceId": "default"}, "additionalMetadata": {"action": {"braketSchemaHeader": {"name": "braket.ir.jaqcd.program", "version": "1"}, "instructions": [{"control": 0, "target": 1, "type": "cnot"}]}}}]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_result_cached_future[{"braketSchemaHeader": {"name": "braket.task_result.gate_model_task_result", "version": "1"}, "measurements": [[0, 0], [0, 0], [0, 0], [1, 1]], "measuredQubits": [0, 1], "resultTypes": [{"type": {"observable": ["h", "x"], "targets": [0, 1], "type": "expectation"}, "value": 0.7071067811865474}, {"type": {"states": ["01", "10", "00", "11"], "type": "amplitude"}, "value": {"01": [0.0, 0.0], "10": [0.0, 0.0], "00": [0.7071067811865475, 0.0], "11": [0.7071067811865475, 0.0]}}], "taskMetadata": {"braketSchemaHeader": {"name": "braket.task_result.task_metadata", "version": "1"}, "id": "task_arn", "shots": 100, "deviceId": "default"}, "additionalMetadata": {"action": {"braketSchemaHeader": {"name": "braket.ir.jaqcd.program", "version": "1"}, "instructions": [{"control": 0, "target": 1, "type": "cnot"}]}}}]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_async_result[COMPLETED-result0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_async_result[COMPLETED-result0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_async_result[FAILED-None]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_async_result[FAILED-None]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_failed_task> [collection]
      pytest_itemcollected [hook]
          item: <Function test_failed_task>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_timeout_completed> [collection]
      pytest_itemcollected [hook]
          item: <Function test_timeout_completed>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_timeout_no_result_terminal_state> [collection]
      pytest_itemcollected [hook]
          item: <Function test_timeout_no_result_terminal_state>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_create_invalid_s3_folder> [collection]
      pytest_itemcollected [hook]
          item: <Function test_create_invalid_s3_folder>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_create_invalid_task_specification> [collection]
      pytest_itemcollected [hook]
          item: <Function test_create_invalid_task_specification>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_circuit_with_shots[device/qpu/ionq-IonqDeviceParameters]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_circuit_with_shots[device/qpu/ionq-IonqDeviceParameters]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_circuit_with_shots[device/qpu/rigetti-RigettiDeviceParameters]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_circuit_with_shots[device/qpu/rigetti-RigettiDeviceParameters]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_circuit_with_shots[device/quantum-simulator-GateModelSimulatorDeviceParameters]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_circuit_with_shots[device/quantum-simulator-GateModelSimulatorDeviceParameters]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_circuit_with_disabled_rewiring[device/qpu/rigetti-RigettiDeviceParameters]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_circuit_with_disabled_rewiring[device/qpu/rigetti-RigettiDeviceParameters]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_circuit_with_shots_value_error> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_circuit_with_shots_value_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_annealing[device_parameters0-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_annealing[device_parameters0-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_annealing[device_parameters1-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_annealing[device_parameters1-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_annealing[device_parameters2-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_annealing[device_parameters2-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_annealing[device_parameters3-arn:aws:braket:::device/qpu/d-wave/fake_arn]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_annealing[device_parameters3-arn:aws:braket:::device/qpu/d-wave/fake_arn]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_annealing[device_parameters4-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_annealing[device_parameters4-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_annealing[device_parameters5-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_annealing[device_parameters5-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_annealing[device_parameters6-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_annealing[device_parameters6-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_annealing[device_parameters7-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_annealing[device_parameters7-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_annealing[device_parameters8-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_annealing[device_parameters8-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_annealing[device_parameters9-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_annealing[device_parameters9-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_from_annealing[device_parameters10-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_from_annealing[device_parameters10-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_create_with_tags[device/qpu/ionq-IonqDeviceParameters]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_create_with_tags[device/qpu/ionq-IonqDeviceParameters]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_create_with_tags[device/qpu/rigetti-RigettiDeviceParameters]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_create_with_tags[device/qpu/rigetti-RigettiDeviceParameters]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_create_with_tags[device/quantum-simulator-GateModelSimulatorDeviceParameters]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_create_with_tags[device/quantum-simulator-GateModelSimulatorDeviceParameters]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_init_new_thread> [collection]
      pytest_itemcollected [hook]
          item: <Function test_init_new_thread>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_aws_session_for_task_arn> [collection]
      pytest_itemcollected [hook]
          item: <Function test_aws_session_for_task_arn>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/unit_tests/braket/aws/test_aws_quantum_task.py' lenresult=46 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
      find_module called for: test_aws_quantum_task_batch [assertion]
      matched test file '/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_quantum_task_batch.py' [assertion]
      found cached rewritten pyc for /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_quantum_task_batch.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: random
            obj: <module 'random' from '/usr/local/Cellar/python@3.9/3.9.1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/random.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: uuid
            obj: <module 'uuid' from '/usr/local/Cellar/python@3.9/3.9.1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/uuid.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: PropertyMock
            obj: <class 'unittest.mock.PropertyMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: patch
            obj: <function patch at 0x1110871f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: MockS3
            obj: <class 'common_test_utils.MockS3'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: AwsQuantumTaskBatch
            obj: <class 'braket.aws.aws_quantum_task_batch.AwsQuantumTaskBatch'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: AwsSession
            obj: <class 'braket.aws.aws_session.AwsSession'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: Circuit
            obj: <class 'braket.circuits.circuit.Circuit'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: GateModelQuantumTaskResult
            obj: <class 'braket.tasks.gate_model_quantum_task_result.GateModelQuantumTaskResult'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: S3_TARGET
            obj: S3DestinationFolder(bucket='foo', key='bar')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: test_creation
            obj: <function test_creation at 0x12e7ac8b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7adeb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_creation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: test_successful
            obj: <function test_successful at 0x12e7aca60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7adf10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_successful>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: test_unsuccessful
            obj: <function test_unsuccessful at 0x12e7acc10>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7adee0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_unsuccessful>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: test_retry
            obj: <function test_retry at 0x12e7acdc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7adeb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_retry>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_quantum_task_batch.py>
            name: _circuits
            obj: <function _circuits at 0x12e7ace50>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/unit_tests/braket/aws/test_aws_quantum_task_batch.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_creation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_creation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_successful> [collection]
      pytest_itemcollected [hook]
          item: <Function test_successful>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_unsuccessful> [collection]
      pytest_itemcollected [hook]
          item: <Function test_unsuccessful>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_retry> [collection]
      pytest_itemcollected [hook]
          item: <Function test_retry>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/unit_tests/braket/aws/test_aws_quantum_task_batch.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/unit_tests/braket/aws/test_aws_session.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
      find_module called for: test_aws_session [assertion]
      matched test file '/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_session.py' [assertion]
      found cached rewritten pyc for /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/aws/test_aws_session.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: json
            obj: <module 'json' from '/usr/local/Cellar/python@3.9/3.9.1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: patch
            obj: <function patch at 0x1110871f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: ClientError
            obj: <class 'botocore.exceptions.ClientError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: braket_schemas
            obj: <module 'braket._schemas' from '/usr/local/lib/python3.9/site-packages/braket/_schemas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: braket_sdk
            obj: <module 'braket._sdk' from '/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/src/braket/_sdk/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: AwsSession
            obj: <class 'braket.aws.aws_session.AwsSession'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: TEST_S3_OBJ_CONTENTS
            obj: {'TaskMetadata': {'Id': 'blah'}}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: boto_session
            obj: <function boto_session at 0x12e7bf5e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: aws_session
            obj: <function aws_session at 0x12e7bf700>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_initializes_boto_client_if_required
            obj: <function test_initializes_boto_client_if_required at 0x12e7bf790>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b9dc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_initializes_boto_client_if_required>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_uses_supplied_braket_client
            obj: <function test_uses_supplied_braket_client at 0x12e7bf820>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b9fa0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_uses_supplied_braket_client>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_config
            obj: <function test_config at 0x12e7bf8b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b9f70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_config>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_populates_user_agent
            obj: <function test_populates_user_agent at 0x12e7bfa60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b9dc0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: True
                argname: metadata_file_exists
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: None
                argname: initial_user_agent
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: False
                argname: metadata_file_exists
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: None
                argname: initial_user_agent
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: True
                argname: metadata_file_exists
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: 
                argname: initial_user_agent
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: False
                argname: metadata_file_exists
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: 
                argname: initial_user_agent
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: True
                argname: metadata_file_exists
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: Boto3/1.17.18 Python/3.7.10
                argname: initial_user_agent
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: False
                argname: metadata_file_exists
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: Boto3/1.17.18 Python/3.7.10 exec-env/AWS_Lambda_python3.7
                argname: initial_user_agent
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_populates_user_agent[True-None]>, <Function test_populates_user_agent[False-None]>, <Function test_populates_user_agent[True-]>, <Function test_populates_user_agent[False-]>, <Function test_populates_user_agent[True-Boto3/1.17.18 Python/3.7.10]>, <Function test_populates_user_agent[False-Boto3/1.17.18 Python/3.7.10 exec-env/AWS_Lambda_python3.7]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_retrieve_s3_object_body_success
            obj: <function test_retrieve_s3_object_body_success at 0x12e7bfaf0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b9fd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_retrieve_s3_object_body_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_retrieve_s3_object_body_client_error
            obj: <function test_retrieve_s3_object_body_client_error at 0x12e7bfb80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b9040>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_retrieve_s3_object_body_client_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_get_device
            obj: <function test_get_device at 0x12e7bfc10>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b93a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_device>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_cancel_quantum_task
            obj: <function test_cancel_quantum_task at 0x12e7bfca0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b9fd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_cancel_quantum_task>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_create_quantum_task
            obj: <function test_create_quantum_task at 0x12e7bfd30>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b9040>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_create_quantum_task>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_get_quantum_task
            obj: <function test_get_quantum_task at 0x12e7bfdc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b93a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_quantum_task>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_get_quantum_task_retry
            obj: <function test_get_quantum_task_retry at 0x12e7bfe50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b9fd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_quantum_task_retry>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_get_quantum_task_fail_after_retries
            obj: <function test_get_quantum_task_fail_after_retries at 0x12e7bfee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b9040>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_quantum_task_fail_after_retries>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_get_quantum_task_does_not_retry_other_exceptions
            obj: <function test_get_quantum_task_does_not_retry_other_exceptions at 0x12e7bff70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b93a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_quantum_task_does_not_retry_other_exceptions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_search_devices
            obj: <function test_search_devices at 0x12e7c2040>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7b9fd0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {}
                argname: input
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: [{'deviceArn': 'arn1', 'deviceName': 'name1', 'deviceType': 'SIMULATOR', 'deviceStatus': 'ONLINE', 'providerName': 'pname1'}, {'deviceArn': 'arn2', 'deviceName': 'name2', 'deviceType': 'SIMULATOR', 'deviceStatus': 'OFFLINE', 'providerName': 'pname1'}, {'deviceArn': 'arn3', 'deviceName': 'name3', 'deviceType': 'QPU', 'deviceStatus': 'ONLINE', 'providerName': 'pname2'}]
                argname: output
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'names': ['name1']}
                argname: input
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: [{'deviceArn': 'arn1', 'deviceName': 'name1', 'deviceType': 'SIMULATOR', 'deviceStatus': 'ONLINE', 'providerName': 'pname1'}]
                argname: output
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'types': ['SIMULATOR']}
                argname: input
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: [{'deviceArn': 'arn1', 'deviceName': 'name1', 'deviceType': 'SIMULATOR', 'deviceStatus': 'ONLINE', 'providerName': 'pname1'}, {'deviceArn': 'arn2', 'deviceName': 'name2', 'deviceType': 'SIMULATOR', 'deviceStatus': 'OFFLINE', 'providerName': 'pname1'}]
                argname: output
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'statuses': ['ONLINE']}
                argname: input
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: [{'deviceArn': 'arn1', 'deviceName': 'name1', 'deviceType': 'SIMULATOR', 'deviceStatus': 'ONLINE', 'providerName': 'pname1'}, {'deviceArn': 'arn3', 'deviceName': 'name3', 'deviceType': 'QPU', 'deviceStatus': 'ONLINE', 'providerName': 'pname2'}]
                argname: output
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'provider_names': ['pname2']}
                argname: input
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: [{'deviceArn': 'arn3', 'deviceName': 'name3', 'deviceType': 'QPU', 'deviceStatus': 'ONLINE', 'providerName': 'pname2'}]
                argname: output
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'provider_names': ['pname2'], 'types': ['QPU'], 'statuses': ['ONLINE'], 'names': ['name3']}
                argname: input
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: [{'deviceArn': 'arn3', 'deviceName': 'name3', 'deviceType': 'QPU', 'deviceStatus': 'ONLINE', 'providerName': 'pname2'}]
                argname: output
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: {'provider_names': ['pname1'], 'types': ['SIMULATOR'], 'statuses': ['ONLINE']}
                argname: input
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x11026b370>
                val: [{'deviceArn': 'arn1', 'deviceName': 'name1', 'deviceType': 'SIMULATOR', 'deviceStatus': 'ONLINE', 'providerName': 'pname1'}]
                argname: output
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_search_devices[input0-output0]>, <Function test_search_devices[input1-output1]>, <Function test_search_devices[input2-output2]>, <Function test_search_devices[input3-output3]>, <Function test_search_devices[input4-output4]>, <Function test_search_devices[input5-output5]>, <Function test_search_devices[input6-output6]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/aws/test_aws_session.py>
            name: test_search_devices_arns
            obj: <function test_search_devices_arns at 0x12e7c20d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d1a30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_search_devices_arns>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/unit_tests/braket/aws/test_aws_session.py' lenresult=26 outcome='passed'> [hook]
    genitems <Function test_initializes_boto_client_if_required> [collection]
      pytest_itemcollected [hook]
          item: <Function test_initializes_boto_client_if_required>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_uses_supplied_braket_client> [collection]
      pytest_itemcollected [hook]
          item: <Function test_uses_supplied_braket_client>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_config> [collection]
      pytest_itemcollected [hook]
          item: <Function test_config>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_populates_user_agent[True-None]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_populates_user_agent[True-None]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_populates_user_agent[False-None]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_populates_user_agent[False-None]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_populates_user_agent[True-]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_populates_user_agent[True-]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_populates_user_agent[False-]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_populates_user_agent[False-]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_populates_user_agent[True-Boto3/1.17.18 Python/3.7.10]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_populates_user_agent[True-Boto3/1.17.18 Python/3.7.10]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_populates_user_agent[False-Boto3/1.17.18 Python/3.7.10 exec-env/AWS_Lambda_python3.7]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_populates_user_agent[False-Boto3/1.17.18 Python/3.7.10 exec-env/AWS_Lambda_python3.7]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_retrieve_s3_object_body_success> [collection]
      pytest_itemcollected [hook]
          item: <Function test_retrieve_s3_object_body_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_retrieve_s3_object_body_client_error> [collection]
      pytest_itemcollected [hook]
          item: <Function test_retrieve_s3_object_body_client_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_device> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_device>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_cancel_quantum_task> [collection]
      pytest_itemcollected [hook]
          item: <Function test_cancel_quantum_task>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_create_quantum_task> [collection]
      pytest_itemcollected [hook]
          item: <Function test_create_quantum_task>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_quantum_task> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_quantum_task>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_quantum_task_retry> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_quantum_task_retry>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_quantum_task_fail_after_retries> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_quantum_task_fail_after_retries>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_quantum_task_does_not_retry_other_exceptions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_quantum_task_does_not_retry_other_exceptions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_search_devices[input0-output0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_search_devices[input0-output0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_search_devices[input1-output1]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_search_devices[input1-output1]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_search_devices[input2-output2]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_search_devices[input2-output2]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_search_devices[input3-output3]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_search_devices[input3-output3]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_search_devices[input4-output4]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_search_devices[input4-output4]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_search_devices[input5-output5]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_search_devices[input5-output5]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_search_devices[input6-output6]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_search_devices[input6-output6]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_search_devices_arns> [collection]
      pytest_itemcollected [hook]
          item: <Function test_search_devices_arns>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/unit_tests/braket/aws/test_aws_session.py' lenresult=26 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/unit_tests/braket/circuits/test_angled_gate.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
      find_module called for: test_angled_gate [assertion]
      matched test file '/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_angled_gate.py' [assertion]
      found cached rewritten pyc for /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_angled_gate.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: re
            obj: <module 're' from '/usr/local/Cellar/python@3.9/3.9.1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/re.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: np
            obj: <module 'numpy' from '/usr/local/lib/python3.9/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: BaseModel
            obj: <class 'pydantic.main.BaseModel'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: AngledGate
            obj: <class 'braket.circuits.angled_gate.AngledGate'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: Gate
            obj: <class 'braket.circuits.gate.Gate'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: angled_gate
            obj: <function angled_gate at 0x12e7c24c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: test_is_operator
            obj: <function test_is_operator at 0x12e7c2160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7c5cd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_is_operator>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: test_angle_is_none
            obj: <function test_angle_is_none at 0x12e7c2ee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7c53d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_angle_is_none>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: test_getters
            obj: <function test_getters at 0x12e7de040>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7c5e50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_getters>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: test_angle_setter
            obj: <function test_angle_setter at 0x12e7de0d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7c5cd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_angle_setter>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: test_equality
            obj: <function test_equality at 0x12e7de160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7c53d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_equality>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_angled_gate.py>
            name: test_np_float_angle_json
            obj: <function test_np_float_angle_json at 0x12e7de1f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7c5e50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_np_float_angle_json>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/unit_tests/braket/circuits/test_angled_gate.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function test_is_operator> [collection]
      pytest_itemcollected [hook]
          item: <Function test_is_operator>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_angle_is_none> [collection]
      pytest_itemcollected [hook]
          item: <Function test_angle_is_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_getters> [collection]
      pytest_itemcollected [hook]
          item: <Function test_getters>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_angle_setter> [collection]
      pytest_itemcollected [hook]
          item: <Function test_angle_setter>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_equality> [collection]
      pytest_itemcollected [hook]
          item: <Function test_equality>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_np_float_angle_json> [collection]
      pytest_itemcollected [hook]
          item: <Function test_np_float_angle_json>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/unit_tests/braket/circuits/test_angled_gate.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
      find_module called for: test_ascii_circuit_diagram [assertion]
      matched test file '/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py' [assertion]
      found cached rewritten pyc for /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: np
            obj: <module 'numpy' from '/usr/local/lib/python3.9/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: AsciiCircuitDiagram
            obj: <class 'braket.circuits.ascii_circuit_diagram.AsciiCircuitDiagram'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: Circuit
            obj: <class 'braket.circuits.circuit.Circuit'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: Gate
            obj: <class 'braket.circuits.gate.Gate'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: Instruction
            obj: <class 'braket.circuits.instruction.Instruction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: Observable
            obj: <class 'braket.circuits.observable.Observable'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: Operator
            obj: <class 'braket.circuits.operator.Operator'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_empty_circuit
            obj: <function test_empty_circuit at 0x12e7de550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1520>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_empty_circuit>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_one_gate_one_qubit
            obj: <function test_one_gate_one_qubit at 0x12e7de5e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e16a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_one_gate_one_qubit>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_qubit_width
            obj: <function test_qubit_width at 0x12e7de670>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1850>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_qubit_width>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_gate_width
            obj: <function test_gate_width at 0x12e7de700>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1a00>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_gate_width>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_time_width
            obj: <function test_time_width at 0x12e7de790>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1bb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_time_width>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_connector_across_two_qubits
            obj: <function test_connector_across_two_qubits at 0x12e7de820>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1d60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_connector_across_two_qubits>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_overlapping_qubits
            obj: <function test_overlapping_qubits at 0x12e7de8b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1f10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_overlapping_qubits>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_overlapping_qubits_angled_gates
            obj: <function test_overlapping_qubits_angled_gates at 0x12e7de940>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_overlapping_qubits_angled_gates>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_connector_across_gt_two_qubits
            obj: <function test_connector_across_gt_two_qubits at 0x12e7de9d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1d60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_connector_across_gt_two_qubits>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_connector_across_non_used_qubits
            obj: <function test_connector_across_non_used_qubits at 0x12e7dea60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1f10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_connector_across_non_used_qubits>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_ignore_non_gates
            obj: <function test_ignore_non_gates at 0x12e7deaf0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ignore_non_gates>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_result_types_target_none
            obj: <function test_result_types_target_none at 0x12e7deb80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1d60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_result_types_target_none>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_result_types_target_some
            obj: <function test_result_types_target_some at 0x12e7dec10>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1b80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_result_types_target_some>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_additional_result_types
            obj: <function test_additional_result_types at 0x12e7deca0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e14f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_additional_result_types>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_multiple_result_types
            obj: <function test_multiple_result_types at 0x12e7ded30>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1f10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_multiple_result_types>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_multiple_result_types_with_state_vector_amplitude
            obj: <function test_multiple_result_types_with_state_vector_amplitude at 0x12e7dedc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1b80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_multiple_result_types_with_state_vector_amplitude>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_multiple_result_types_with_custom_hermitian_ascii_symbol
            obj: <function test_multiple_result_types_with_custom_hermitian_ascii_symbol at 0x12e7dee50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e14f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_multiple_result_types_with_custom_hermitian_ascii_symbol>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_noise_1qubit
            obj: <function test_noise_1qubit at 0x12e7deee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1f10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_noise_1qubit>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py>
            name: test_noise_2qubit
            obj: <function test_noise_2qubit at 0x12e7def70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7e1b80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_noise_2qubit>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py' lenresult=19 outcome='passed'> [hook]
    genitems <Function test_empty_circuit> [collection]
      pytest_itemcollected [hook]
          item: <Function test_empty_circuit>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_one_gate_one_qubit> [collection]
      pytest_itemcollected [hook]
          item: <Function test_one_gate_one_qubit>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_qubit_width> [collection]
      pytest_itemcollected [hook]
          item: <Function test_qubit_width>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_gate_width> [collection]
      pytest_itemcollected [hook]
          item: <Function test_gate_width>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_time_width> [collection]
      pytest_itemcollected [hook]
          item: <Function test_time_width>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_connector_across_two_qubits> [collection]
      pytest_itemcollected [hook]
          item: <Function test_connector_across_two_qubits>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_overlapping_qubits> [collection]
      pytest_itemcollected [hook]
          item: <Function test_overlapping_qubits>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_overlapping_qubits_angled_gates> [collection]
      pytest_itemcollected [hook]
          item: <Function test_overlapping_qubits_angled_gates>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_connector_across_gt_two_qubits> [collection]
      pytest_itemcollected [hook]
          item: <Function test_connector_across_gt_two_qubits>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_connector_across_non_used_qubits> [collection]
      pytest_itemcollected [hook]
          item: <Function test_connector_across_non_used_qubits>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_ignore_non_gates> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ignore_non_gates>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_result_types_target_none> [collection]
      pytest_itemcollected [hook]
          item: <Function test_result_types_target_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_result_types_target_some> [collection]
      pytest_itemcollected [hook]
          item: <Function test_result_types_target_some>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_additional_result_types> [collection]
      pytest_itemcollected [hook]
          item: <Function test_additional_result_types>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_multiple_result_types> [collection]
      pytest_itemcollected [hook]
          item: <Function test_multiple_result_types>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_multiple_result_types_with_state_vector_amplitude> [collection]
      pytest_itemcollected [hook]
          item: <Function test_multiple_result_types_with_state_vector_amplitude>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_multiple_result_types_with_custom_hermitian_ascii_symbol> [collection]
      pytest_itemcollected [hook]
          item: <Function test_multiple_result_types_with_custom_hermitian_ascii_symbol>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_noise_1qubit> [collection]
      pytest_itemcollected [hook]
          item: <Function test_noise_1qubit>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_noise_2qubit> [collection]
      pytest_itemcollected [hook]
          item: <Function test_noise_2qubit>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/unit_tests/braket/circuits/test_ascii_circuit_diagram.py' lenresult=19 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/unit_tests/braket/circuits/test_circuit.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/unit_tests/braket/circuits/test_circuit.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/unit_tests/braket/circuits/test_circuit.py>
      find_module called for: test_circuit [assertion]
      matched test file '/Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_circuit.py' [assertion]
      found cached rewritten pyc for /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python/test/unit_tests/braket/circuits/test_circuit.py [assertion]
      pytest_collection_finish [hook]
          session: <Session amazon-braket-sdk-python exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x11026b370>
            startdir: /Volumes/Unix/workplace/Braket/braket/amazon-braket-sdk-python
            items: [<Function test_running_in_jupyter>, <Function test_ipython_imported_but_ipython_none>, <Function test_ipython_imported_but_not_in_jupyter>, <Function test_ipython_imported_and_in_jupyter>, <Function test_creation>, <Function test_add_linear_term>, <Function test_add_linear_terms>, <Function test_add_quadratic_term>, <Function test_add_quadratic_terms>, <Function test__to_ir>, <Function test_mock_regetti_schema_1>, <Function test_mock_regetti_schema_2>, <Function test_d_wave_schema>, <Function test_gate_model_sim_schema>, <Function test_device_aws_session[device_capabilities0-get_device_data0]>, <Function test_device_aws_session[device_capabilities1-get_device_data1]>, <Function test_device_aws_session[device_capabilities2-get_device_data2]>, <Function test_device_simulator_no_aws_session>, <Function test_copy_session>, <Function test_copy_explicit_session>, <Function test_device_qpu_no_aws_session[get_device_side_effect0]>, <Function test_device_qpu_no_aws_session[get_device_side_effect1]>, <Function test_device_refresh_metadata>, <Function test_equality>, <Function test_repr>, <Function test_device_simulator_not_found>, <Function test_device_qpu_not_found>, <Function test_run_no_extra>, <Function test_run_with_positional_args>, <Function test_run_with_kwargs>, <Function test_run_with_shots>, <Function test_run_with_shots_kwargs>, <Function test_run_with_qpu_no_shots>, <Function test_run_with_shots_poll_timeout_kwargs>, <Function test_run_with_positional_args_and_kwargs>, <Function test_run_batch_no_extra>, <Function test_run_batch_with_shots>, <Function test_run_batch_with_max_parallel_and_kwargs>, <Function test_get_devices>, <Function test_get_devices_simulators_only>, <Function test_get_devices_invalid_order_by>, <Function test_equality>, <Function test_str>, <Function test_hash>, <Function test_id_getter>, <Function test_no_id_setter>, <Function test_metadata>, <Function test_metadata_call_if_none>, <Function test_state>, <Function test_cancel>, <Function test_cancel_without_fetching_result>, <Function test_initialize_asyncio_event_loop_if_required>, <Function test_result_circuit>, <Function test_result_annealing>, <Function test_result_invalid_type>, <Function test_result_circuit_cached>, <Function test_no_result>, <Function test_result_cached_future[{"braketSchemaHeader": {"name": "braket.task_result.gate_model_task_result", "version": "1"}, "measurements": [[0, 0], [0, 0], [0, 0], [1, 1]], "measuredQubits": [0, 1], "taskMetadata": {"braketSchemaHeader": {"name": "braket.task_result.task_metadata", "version": "1"}, "id": "task_arn", "shots": 100, "deviceId": "default"}, "additionalMetadata": {"action": {"braketSchemaHeader": {"name": "braket.ir.jaqcd.program", "version": "1"}, "instructions": [{"control": 0, "target": 1, "type": "cnot"}]}}}]>, <Function test_result_cached_future[{"braketSchemaHeader": {"name": "braket.task_result.gate_model_task_result", "version": "1"}, "measurements": [[0, 0], [0, 0], [0, 0], [1, 1]], "measuredQubits": [0, 1], "resultTypes": [{"type": {"observable": ["h", "x"], "targets": [0, 1], "type": "expectation"}, "value": 0.7071067811865474}, {"type": {"states": ["01", "10", "00", "11"], "type": "amplitude"}, "value": {"01": [0.0, 0.0], "10": [0.0, 0.0], "00": [0.7071067811865475, 0.0], "11": [0.7071067811865475, 0.0]}}], "taskMetadata": {"braketSchemaHeader": {"name": "braket.task_result.task_metadata", "version": "1"}, "id": "task_arn", "shots": 100, "deviceId": "default"}, "additionalMetadata": {"action": {"braketSchemaHeader": {"name": "braket.ir.jaqcd.program", "version": "1"}, "instructions": [{"control": 0, "target": 1, "type": "cnot"}]}}}]>, <Function test_async_result[COMPLETED-result0]>, <Function test_async_result[FAILED-None]>, <Function test_failed_task>, <Function test_timeout_completed>, <Function test_timeout_no_result_terminal_state>, <Function test_create_invalid_s3_folder>, <Function test_create_invalid_task_specification>, <Function test_from_circuit_with_shots[device/qpu/ionq-IonqDeviceParameters]>, <Function test_from_circuit_with_shots[device/qpu/rigetti-RigettiDeviceParameters]>, <Function test_from_circuit_with_shots[device/quantum-simulator-GateModelSimulatorDeviceParameters]>, <Function test_from_circuit_with_disabled_rewiring[device/qpu/rigetti-RigettiDeviceParameters]>, <Function test_from_circuit_with_shots_value_error>, <Function test_from_annealing[device_parameters0-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>, <Function test_from_annealing[device_parameters1-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>, <Function test_from_annealing[device_parameters2-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>, <Function test_from_annealing[device_parameters3-arn:aws:braket:::device/qpu/d-wave/fake_arn]>, <Function test_from_annealing[device_parameters4-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>, <Function test_from_annealing[device_parameters5-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>, <Function test_from_annealing[device_parameters6-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>, <Function test_from_annealing[device_parameters7-arn:aws:braket:::device/qpu/d-wave/Advantage_system1]>, <Function test_from_annealing[device_parameters8-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>, <Function test_from_annealing[device_parameters9-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>, <Function test_from_annealing[device_parameters10-arn:aws:braket:::device/qpu/d-wave/DW_2000Q_6]>, <Function test_create_with_tags[device/qpu/ionq-IonqDeviceParameters]>, <Function test_create_with_tags[device/qpu/rigetti-RigettiDeviceParameters]>, <Function test_create_with_tags[device/quantum-simulator-GateModelSimulatorDeviceParameters]>, <Function test_init_new_thread>, <Function test_aws_session_for_task_arn>, <Function test_creation>, <Function test_successful>, <Function test_unsuccessful>, <Function test_retry>, <Function test_initializes_boto_client_if_required>, <Function test_uses_supplied_braket_client>, <Function test_config>, <Function test_populates_user_agent[True-None]>, <Function test_populates_user_agent[False-None]>, <Function test_populates_user_agent[True-]>, <Function test_populates_user_agent[False-]>, <Function test_populates_user_agent[True-Boto3/1.17.18 Python/3.7.10]>, <Function test_populates_user_agent[False-Boto3/1.17.18 Python/3.7.10 exec-env/AWS_Lambda_python3.7]>, <Function test_retrieve_s3_object_body_success>, <Function test_retrieve_s3_object_body_client_error>, <Function test_get_device>, <Function test_cancel_quantum_task>, <Function test_create_quantum_task>, <Function test_get_quantum_task>, <Function test_get_quantum_task_retry>, <Function test_get_quantum_task_fail_after_retries>, <Function test_get_quantum_task_does_not_retry_other_exceptions>, <Function test_search_devices[input0-output0]>, <Function test_search_devices[input1-output1]>, <Function test_search_devices[input2-output2]>, <Function test_search_devices[input3-output3]>, <Function test_search_devices[input4-output4]>, <Function test_search_devices[input5-output5]>, <Function test_search_devices[input6-output6]>, <Function test_search_devices_arns>, <Function test_is_operator>, <Function test_angle_is_none>, <Function test_getters>, <Function test_angle_setter>, <Function test_equality>, <Function test_np_float_angle_json>, <Function test_empty_circuit>, <Function test_one_gate_one_qubit>, <Function test_qubit_width>, <Function test_gate_width>, <Function test_time_width>, <Function test_connector_across_two_qubits>, <Function test_overlapping_qubits>, <Function test_overlapping_qubits_angled_gates>, <Function test_connector_across_gt_two_qubits>, <Function test_connector_across_non_used_qubits>, <Function test_ignore_non_gates>, <Function test_result_types_target_none>, <Function test_result_types_target_some>, <Function test_additional_result_types>, <Function test_multiple_result_types>, <Function test_multiple_result_types_with_state_vector_amplitude>, <Function test_multiple_result_types_with_custom_hermitian_ascii_symbol>, <Function test_noise_1qubit>, <Function test_noise_2qubit>]
