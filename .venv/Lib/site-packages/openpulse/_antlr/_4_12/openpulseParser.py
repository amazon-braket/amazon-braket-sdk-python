# Generated from openpulseParser.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,116,871,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,1,0,5,0,138,8,0,10,0,12,0,141,9,0,1,1,1,1,
        5,1,145,8,1,10,1,12,1,148,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,173,
        8,1,3,1,175,8,1,1,2,1,2,3,2,179,8,2,1,2,1,2,3,2,183,8,2,1,2,1,2,
        3,2,187,8,2,1,2,1,2,3,2,191,8,2,1,2,1,2,3,2,195,8,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,3,2,205,8,2,1,2,1,2,1,2,3,2,210,8,2,1,3,3,3,
        213,8,3,1,3,5,3,216,8,3,10,3,12,3,219,9,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,5,1,5,5,5,229,8,5,10,5,12,5,232,9,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,263,8,5,3,5,265,8,5,1,6,1,6,3,6,
        269,8,6,1,7,1,7,5,7,273,8,7,10,7,12,7,276,9,7,1,7,1,7,1,8,1,8,1,
        8,1,9,1,9,3,9,285,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,3,15,314,8,15,1,15,1,15,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,3,16,325,8,16,1,17,1,17,1,17,3,17,330,8,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,5,19,346,8,19,10,19,12,19,349,9,19,1,19,1,19,1,20,1,20,1,20,
        1,20,1,20,1,20,3,20,359,8,20,1,21,1,21,3,21,363,8,21,1,21,1,21,1,
        22,1,22,3,22,369,8,22,1,22,1,22,1,23,1,23,1,23,3,23,376,8,23,1,23,
        1,23,1,24,5,24,381,8,24,10,24,12,24,384,9,24,1,24,1,24,1,24,3,24,
        389,8,24,1,24,3,24,392,8,24,1,24,3,24,395,8,24,1,24,1,24,1,24,1,
        24,5,24,401,8,24,10,24,12,24,404,9,24,1,24,1,24,1,24,3,24,409,8,
        24,1,24,3,24,412,8,24,1,24,3,24,415,8,24,1,24,3,24,418,8,24,1,24,
        3,24,421,8,24,1,25,1,25,1,25,3,25,426,8,25,1,25,1,25,1,26,1,26,1,
        26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,3,28,442,8,28,1,
        28,1,28,1,28,3,28,447,8,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,30,1,30,1,30,3,30,461,8,30,1,30,1,30,1,30,1,31,1,31,1,
        31,3,31,469,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,
        33,3,33,481,8,33,1,33,1,33,3,33,485,8,33,1,33,1,33,1,34,1,34,1,34,
        1,34,3,34,493,8,34,1,34,1,34,3,34,497,8,34,1,34,1,34,1,35,1,35,1,
        35,1,35,3,35,505,8,35,1,35,3,35,508,8,35,1,35,1,35,1,35,1,36,1,36,
        1,36,1,36,3,36,517,8,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,
        3,38,527,8,38,1,38,1,38,1,39,1,39,1,39,1,39,3,39,535,8,39,1,39,3,
        39,538,8,39,1,39,1,39,3,39,542,8,39,1,39,1,39,3,39,546,8,39,1,39,
        1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,559,8,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,
        573,8,40,1,40,1,40,3,40,577,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,5,40,614,8,40,10,40,12,40,617,9,40,1,41,1,41,1,41,5,
        41,622,8,41,10,41,12,41,625,9,41,1,42,1,42,1,42,3,42,630,8,42,1,
        43,1,43,1,43,1,44,3,44,636,8,44,1,44,1,44,3,44,640,8,44,1,44,1,44,
        3,44,644,8,44,1,45,1,45,1,45,1,45,5,45,650,8,45,10,45,12,45,653,
        9,45,1,45,3,45,656,8,45,1,45,1,45,1,46,1,46,1,46,3,46,663,8,46,1,
        46,1,46,1,46,3,46,668,8,46,5,46,670,8,46,10,46,12,46,673,9,46,1,
        46,3,46,676,8,46,1,46,1,46,1,47,1,47,1,47,1,47,3,47,684,8,47,1,47,
        1,47,1,47,3,47,689,8,47,5,47,691,8,47,10,47,12,47,694,9,47,1,47,
        3,47,697,8,47,3,47,699,8,47,1,47,1,47,1,48,1,48,5,48,705,8,48,10,
        48,12,48,708,9,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,3,50,724,8,50,3,50,726,8,50,1,50,1,50,1,51,
        1,51,3,51,732,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,750,8,53,1,53,1,53,1,54,
        1,54,1,54,1,54,1,55,1,55,1,56,1,56,3,56,762,8,56,1,57,1,57,1,58,
        1,58,3,58,768,8,58,1,59,1,59,1,59,1,59,3,59,774,8,59,3,59,776,8,
        59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,787,8,60,1,
        60,1,60,1,60,3,60,792,8,60,1,61,1,61,1,61,5,61,797,8,61,10,61,12,
        61,800,9,61,1,61,3,61,803,8,61,1,62,1,62,1,62,5,62,808,8,62,10,62,
        12,62,811,9,62,1,62,3,62,814,8,62,1,63,1,63,1,63,5,63,819,8,63,10,
        63,12,63,822,9,63,1,63,3,63,825,8,63,1,64,1,64,1,64,5,64,830,8,64,
        10,64,12,64,833,9,64,1,64,3,64,836,8,64,1,65,1,65,1,65,5,65,841,
        8,65,10,65,12,65,844,9,65,1,65,3,65,847,8,65,1,66,1,66,1,66,5,66,
        852,8,66,10,66,12,66,855,9,66,1,66,3,66,858,8,66,1,67,1,67,1,67,
        5,67,863,8,67,10,67,12,67,866,9,67,1,67,3,67,869,8,67,1,67,0,1,80,
        68,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,0,11,1,0,28,29,2,0,33,33,35,35,2,0,69,69,
        87,87,2,0,73,73,84,85,2,0,58,58,91,100,2,0,74,74,76,77,2,0,71,71,
        73,73,1,0,50,51,1,0,31,32,2,0,54,56,96,96,1,0,96,97,981,0,139,1,
        0,0,0,2,174,1,0,0,0,4,209,1,0,0,0,6,212,1,0,0,0,8,222,1,0,0,0,10,
        264,1,0,0,0,12,266,1,0,0,0,14,270,1,0,0,0,16,279,1,0,0,0,18,284,
        1,0,0,0,20,286,1,0,0,0,22,290,1,0,0,0,24,294,1,0,0,0,26,297,1,0,
        0,0,28,300,1,0,0,0,30,303,1,0,0,0,32,317,1,0,0,0,34,326,1,0,0,0,
        36,333,1,0,0,0,38,339,1,0,0,0,40,358,1,0,0,0,42,360,1,0,0,0,44,366,
        1,0,0,0,46,372,1,0,0,0,48,420,1,0,0,0,50,422,1,0,0,0,52,429,1,0,
        0,0,54,433,1,0,0,0,56,441,1,0,0,0,58,450,1,0,0,0,60,457,1,0,0,0,
        62,465,1,0,0,0,64,472,1,0,0,0,66,476,1,0,0,0,68,488,1,0,0,0,70,500,
        1,0,0,0,72,512,1,0,0,0,74,520,1,0,0,0,76,523,1,0,0,0,78,530,1,0,
        0,0,80,576,1,0,0,0,82,618,1,0,0,0,84,629,1,0,0,0,86,631,1,0,0,0,
        88,635,1,0,0,0,90,645,1,0,0,0,92,659,1,0,0,0,94,679,1,0,0,0,96,702,
        1,0,0,0,98,709,1,0,0,0,100,725,1,0,0,0,102,729,1,0,0,0,104,733,1,
        0,0,0,106,740,1,0,0,0,108,753,1,0,0,0,110,757,1,0,0,0,112,761,1,
        0,0,0,114,763,1,0,0,0,116,767,1,0,0,0,118,775,1,0,0,0,120,791,1,
        0,0,0,122,793,1,0,0,0,124,804,1,0,0,0,126,815,1,0,0,0,128,826,1,
        0,0,0,130,837,1,0,0,0,132,848,1,0,0,0,134,859,1,0,0,0,136,138,3,
        2,1,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,
        0,0,0,140,1,1,0,0,0,141,139,1,0,0,0,142,175,3,16,8,0,143,145,3,12,
        6,0,144,143,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,
        0,0,147,172,1,0,0,0,148,146,1,0,0,0,149,173,3,54,27,0,150,173,3,
        72,36,0,151,173,3,42,21,0,152,173,3,44,22,0,153,173,3,24,12,0,154,
        173,3,56,28,0,155,173,3,58,29,0,156,173,3,26,13,0,157,173,3,66,33,
        0,158,173,3,46,23,0,159,173,3,28,14,0,160,173,3,74,37,0,161,173,
        3,68,34,0,162,173,3,30,15,0,163,173,3,48,24,0,164,173,3,32,16,0,
        165,173,3,22,11,0,166,173,3,60,30,0,167,173,3,64,32,0,168,173,3,
        52,26,0,169,173,3,34,17,0,170,173,3,38,19,0,171,173,3,36,18,0,172,
        149,1,0,0,0,172,150,1,0,0,0,172,151,1,0,0,0,172,152,1,0,0,0,172,
        153,1,0,0,0,172,154,1,0,0,0,172,155,1,0,0,0,172,156,1,0,0,0,172,
        157,1,0,0,0,172,158,1,0,0,0,172,159,1,0,0,0,172,160,1,0,0,0,172,
        161,1,0,0,0,172,162,1,0,0,0,172,163,1,0,0,0,172,164,1,0,0,0,172,
        165,1,0,0,0,172,166,1,0,0,0,172,167,1,0,0,0,172,168,1,0,0,0,172,
        169,1,0,0,0,172,170,1,0,0,0,172,171,1,0,0,0,173,175,1,0,0,0,174,
        142,1,0,0,0,174,146,1,0,0,0,175,3,1,0,0,0,176,178,5,37,0,0,177,179,
        3,108,54,0,178,177,1,0,0,0,178,179,1,0,0,0,179,210,1,0,0,0,180,182,
        5,38,0,0,181,183,3,108,54,0,182,181,1,0,0,0,182,183,1,0,0,0,183,
        210,1,0,0,0,184,186,5,39,0,0,185,187,3,108,54,0,186,185,1,0,0,0,
        186,187,1,0,0,0,187,210,1,0,0,0,188,190,5,40,0,0,189,191,3,108,54,
        0,190,189,1,0,0,0,190,191,1,0,0,0,191,210,1,0,0,0,192,194,5,41,0,
        0,193,195,3,108,54,0,194,193,1,0,0,0,194,195,1,0,0,0,195,210,1,0,
        0,0,196,210,5,36,0,0,197,210,5,45,0,0,198,210,5,46,0,0,199,204,5,
        42,0,0,200,201,5,59,0,0,201,202,3,4,2,0,202,203,5,60,0,0,203,205,
        1,0,0,0,204,200,1,0,0,0,204,205,1,0,0,0,205,210,1,0,0,0,206,210,
        5,1,0,0,207,210,5,2,0,0,208,210,5,3,0,0,209,176,1,0,0,0,209,180,
        1,0,0,0,209,184,1,0,0,0,209,188,1,0,0,0,209,192,1,0,0,0,209,196,
        1,0,0,0,209,197,1,0,0,0,209,198,1,0,0,0,209,199,1,0,0,0,209,206,
        1,0,0,0,209,207,1,0,0,0,209,208,1,0,0,0,210,5,1,0,0,0,211,213,3,
        8,4,0,212,211,1,0,0,0,212,213,1,0,0,0,213,217,1,0,0,0,214,216,3,
        18,9,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,
        0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,221,5,0,0,1,221,7,1,0,
        0,0,222,223,5,6,0,0,223,224,5,106,0,0,224,225,5,66,0,0,225,9,1,0,
        0,0,226,265,3,16,8,0,227,229,3,12,6,0,228,227,1,0,0,0,229,232,1,
        0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,262,1,0,0,0,232,230,1,
        0,0,0,233,263,3,54,27,0,234,263,3,72,36,0,235,263,3,42,21,0,236,
        263,3,44,22,0,237,263,3,24,12,0,238,263,3,76,38,0,239,263,3,20,10,
        0,240,263,3,56,28,0,241,263,3,58,29,0,242,263,3,26,13,0,243,263,
        3,66,33,0,244,263,3,78,39,0,245,263,3,46,23,0,246,263,3,28,14,0,
        247,263,3,74,37,0,248,263,3,68,34,0,249,263,3,30,15,0,250,263,3,
        48,24,0,251,263,3,70,35,0,252,263,3,32,16,0,253,263,3,22,11,0,254,
        263,3,60,30,0,255,263,3,50,25,0,256,263,3,62,31,0,257,263,3,64,32,
        0,258,263,3,52,26,0,259,263,3,34,17,0,260,263,3,38,19,0,261,263,
        3,36,18,0,262,233,1,0,0,0,262,234,1,0,0,0,262,235,1,0,0,0,262,236,
        1,0,0,0,262,237,1,0,0,0,262,238,1,0,0,0,262,239,1,0,0,0,262,240,
        1,0,0,0,262,241,1,0,0,0,262,242,1,0,0,0,262,243,1,0,0,0,262,244,
        1,0,0,0,262,245,1,0,0,0,262,246,1,0,0,0,262,247,1,0,0,0,262,248,
        1,0,0,0,262,249,1,0,0,0,262,250,1,0,0,0,262,251,1,0,0,0,262,252,
        1,0,0,0,262,253,1,0,0,0,262,254,1,0,0,0,262,255,1,0,0,0,262,256,
        1,0,0,0,262,257,1,0,0,0,262,258,1,0,0,0,262,259,1,0,0,0,262,260,
        1,0,0,0,262,261,1,0,0,0,263,265,1,0,0,0,264,226,1,0,0,0,264,230,
        1,0,0,0,265,11,1,0,0,0,266,268,5,27,0,0,267,269,5,111,0,0,268,267,
        1,0,0,0,268,269,1,0,0,0,269,13,1,0,0,0,270,274,5,61,0,0,271,273,
        3,18,9,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,
        1,0,0,0,275,277,1,0,0,0,276,274,1,0,0,0,277,278,5,62,0,0,278,15,
        1,0,0,0,279,280,5,26,0,0,280,281,5,111,0,0,281,17,1,0,0,0,282,285,
        3,10,5,0,283,285,3,14,7,0,284,282,1,0,0,0,284,283,1,0,0,0,285,19,
        1,0,0,0,286,287,5,8,0,0,287,288,5,108,0,0,288,289,5,66,0,0,289,21,
        1,0,0,0,290,291,5,7,0,0,291,292,5,108,0,0,292,293,5,66,0,0,293,23,
        1,0,0,0,294,295,5,14,0,0,295,296,5,66,0,0,296,25,1,0,0,0,297,298,
        5,15,0,0,298,299,5,66,0,0,299,27,1,0,0,0,300,301,5,18,0,0,301,302,
        5,66,0,0,302,29,1,0,0,0,303,304,5,20,0,0,304,305,3,4,2,0,305,306,
        5,96,0,0,306,313,5,22,0,0,307,314,3,90,45,0,308,309,5,59,0,0,309,
        310,3,88,44,0,310,311,5,60,0,0,311,314,1,0,0,0,312,314,3,80,40,0,
        313,307,1,0,0,0,313,308,1,0,0,0,313,312,1,0,0,0,314,315,1,0,0,0,
        315,316,3,18,9,0,316,31,1,0,0,0,317,318,5,16,0,0,318,319,5,63,0,
        0,319,320,3,80,40,0,320,321,5,64,0,0,321,324,3,18,9,0,322,323,5,
        17,0,0,323,325,3,18,9,0,324,322,1,0,0,0,324,325,1,0,0,0,325,33,1,
        0,0,0,326,329,5,19,0,0,327,330,3,80,40,0,328,330,3,86,43,0,329,327,
        1,0,0,0,329,328,1,0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,332,
        5,66,0,0,332,35,1,0,0,0,333,334,5,21,0,0,334,335,5,63,0,0,335,336,
        3,80,40,0,336,337,5,64,0,0,337,338,3,18,9,0,338,37,1,0,0,0,339,340,
        5,23,0,0,340,341,5,63,0,0,341,342,3,80,40,0,342,343,5,64,0,0,343,
        347,5,61,0,0,344,346,3,40,20,0,345,344,1,0,0,0,346,349,1,0,0,0,347,
        345,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,347,1,0,0,0,350,
        351,5,62,0,0,351,39,1,0,0,0,352,353,5,24,0,0,353,354,3,128,64,0,
        354,355,3,14,7,0,355,359,1,0,0,0,356,357,5,25,0,0,357,359,3,14,7,
        0,358,352,1,0,0,0,358,356,1,0,0,0,359,41,1,0,0,0,360,362,5,57,0,
        0,361,363,3,132,66,0,362,361,1,0,0,0,362,363,1,0,0,0,363,364,1,0,
        0,0,364,365,5,66,0,0,365,43,1,0,0,0,366,368,5,12,0,0,367,369,3,108,
        54,0,368,367,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,371,3,14,
        7,0,371,45,1,0,0,0,372,373,5,54,0,0,373,375,3,108,54,0,374,376,3,
        132,66,0,375,374,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,378,
        5,66,0,0,378,47,1,0,0,0,379,381,3,100,50,0,380,379,1,0,0,0,381,384,
        1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,382,
        1,0,0,0,385,391,5,96,0,0,386,388,5,63,0,0,387,389,3,128,64,0,388,
        387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,392,5,64,0,0,391,
        386,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,395,3,108,54,0,394,
        393,1,0,0,0,394,395,1,0,0,0,395,396,1,0,0,0,396,397,3,132,66,0,397,
        398,5,66,0,0,398,421,1,0,0,0,399,401,3,100,50,0,400,399,1,0,0,0,
        401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,
        404,402,1,0,0,0,405,411,5,47,0,0,406,408,5,63,0,0,407,409,3,128,
        64,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,412,5,64,
        0,0,411,406,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,415,3,108,
        54,0,414,413,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,418,3,132,
        66,0,417,416,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,421,5,66,
        0,0,420,382,1,0,0,0,420,402,1,0,0,0,421,49,1,0,0,0,422,425,3,86,
        43,0,423,424,5,70,0,0,424,426,3,96,48,0,425,423,1,0,0,0,425,426,
        1,0,0,0,426,427,1,0,0,0,427,428,5,66,0,0,428,51,1,0,0,0,429,430,
        5,55,0,0,430,431,3,116,58,0,431,432,5,66,0,0,432,53,1,0,0,0,433,
        434,5,13,0,0,434,435,5,96,0,0,435,436,5,69,0,0,436,437,3,82,41,0,
        437,438,5,66,0,0,438,55,1,0,0,0,439,442,3,4,2,0,440,442,3,104,52,
        0,441,439,1,0,0,0,441,440,1,0,0,0,442,443,1,0,0,0,443,446,5,96,0,
        0,444,445,5,69,0,0,445,447,3,84,42,0,446,444,1,0,0,0,446,447,1,0,
        0,0,447,448,1,0,0,0,448,449,5,66,0,0,449,57,1,0,0,0,450,451,5,30,
        0,0,451,452,3,4,2,0,452,453,5,96,0,0,453,454,5,69,0,0,454,455,3,
        84,42,0,455,456,5,66,0,0,456,59,1,0,0,0,457,460,7,0,0,0,458,461,
        3,4,2,0,459,461,3,104,52,0,460,458,1,0,0,0,460,459,1,0,0,0,461,462,
        1,0,0,0,462,463,5,96,0,0,463,464,5,66,0,0,464,61,1,0,0,0,465,466,
        7,1,0,0,466,468,5,96,0,0,467,469,3,108,54,0,468,467,1,0,0,0,468,
        469,1,0,0,0,469,470,1,0,0,0,470,471,5,66,0,0,471,63,1,0,0,0,472,
        473,3,102,51,0,473,474,5,96,0,0,474,475,5,66,0,0,475,65,1,0,0,0,
        476,477,5,9,0,0,477,478,5,96,0,0,478,480,5,63,0,0,479,481,3,122,
        61,0,480,479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,484,5,64,
        0,0,483,485,3,98,49,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,1,
        0,0,0,486,487,3,14,7,0,487,67,1,0,0,0,488,489,5,11,0,0,489,490,5,
        96,0,0,490,492,5,63,0,0,491,493,3,134,67,0,492,491,1,0,0,0,492,493,
        1,0,0,0,493,494,1,0,0,0,494,496,5,64,0,0,495,497,3,98,49,0,496,495,
        1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,499,5,66,0,0,499,69,
        1,0,0,0,500,501,5,10,0,0,501,507,5,96,0,0,502,504,5,63,0,0,503,505,
        3,130,65,0,504,503,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,508,
        5,64,0,0,507,502,1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,510,
        3,130,65,0,510,511,3,14,7,0,511,71,1,0,0,0,512,513,3,96,48,0,513,
        516,7,2,0,0,514,517,3,80,40,0,515,517,3,86,43,0,516,514,1,0,0,0,
        516,515,1,0,0,0,517,518,1,0,0,0,518,519,5,66,0,0,519,73,1,0,0,0,
        520,521,3,80,40,0,521,522,5,66,0,0,522,75,1,0,0,0,523,524,5,4,0,
        0,524,526,5,61,0,0,525,527,5,116,0,0,526,525,1,0,0,0,526,527,1,0,
        0,0,527,528,1,0,0,0,528,529,5,62,0,0,529,77,1,0,0,0,530,531,5,5,
        0,0,531,537,3,110,55,0,532,534,5,63,0,0,533,535,3,124,62,0,534,533,
        1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,538,5,64,0,0,537,532,
        1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,541,3,126,63,0,540,542,
        3,98,49,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,543,545,
        5,61,0,0,544,546,5,116,0,0,545,544,1,0,0,0,545,546,1,0,0,0,546,547,
        1,0,0,0,547,548,5,62,0,0,548,79,1,0,0,0,549,550,6,40,-1,0,550,551,
        5,63,0,0,551,552,3,80,40,0,552,553,5,64,0,0,553,577,1,0,0,0,554,
        555,7,3,0,0,555,577,3,80,40,15,556,559,3,4,2,0,557,559,3,104,52,
        0,558,556,1,0,0,0,558,557,1,0,0,0,559,560,1,0,0,0,560,561,5,63,0,
        0,561,562,3,80,40,0,562,563,5,64,0,0,563,577,1,0,0,0,564,565,5,53,
        0,0,565,566,5,63,0,0,566,567,3,14,7,0,567,568,5,64,0,0,568,577,1,
        0,0,0,569,570,5,96,0,0,570,572,5,63,0,0,571,573,3,128,64,0,572,571,
        1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,577,5,64,0,0,575,577,
        7,4,0,0,576,549,1,0,0,0,576,554,1,0,0,0,576,558,1,0,0,0,576,564,
        1,0,0,0,576,569,1,0,0,0,576,575,1,0,0,0,577,615,1,0,0,0,578,579,
        10,16,0,0,579,580,5,75,0,0,580,614,3,80,40,16,581,582,10,14,0,0,
        582,583,7,5,0,0,583,614,3,80,40,15,584,585,10,13,0,0,585,586,7,6,
        0,0,586,614,3,80,40,14,587,588,10,12,0,0,588,589,5,89,0,0,589,614,
        3,80,40,13,590,591,10,11,0,0,591,592,5,88,0,0,592,614,3,80,40,12,
        593,594,10,10,0,0,594,595,5,86,0,0,595,614,3,80,40,11,596,597,10,
        9,0,0,597,598,5,80,0,0,598,614,3,80,40,10,599,600,10,8,0,0,600,601,
        5,82,0,0,601,614,3,80,40,9,602,603,10,7,0,0,603,604,5,78,0,0,604,
        614,3,80,40,8,605,606,10,6,0,0,606,607,5,81,0,0,607,614,3,80,40,
        7,608,609,10,5,0,0,609,610,5,79,0,0,610,614,3,80,40,6,611,612,10,
        17,0,0,612,614,3,94,47,0,613,578,1,0,0,0,613,581,1,0,0,0,613,584,
        1,0,0,0,613,587,1,0,0,0,613,590,1,0,0,0,613,593,1,0,0,0,613,596,
        1,0,0,0,613,599,1,0,0,0,613,602,1,0,0,0,613,605,1,0,0,0,613,608,
        1,0,0,0,613,611,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,615,616,
        1,0,0,0,616,81,1,0,0,0,617,615,1,0,0,0,618,623,3,80,40,0,619,620,
        5,72,0,0,620,622,3,80,40,0,621,619,1,0,0,0,622,625,1,0,0,0,623,621,
        1,0,0,0,623,624,1,0,0,0,624,83,1,0,0,0,625,623,1,0,0,0,626,630,3,
        92,46,0,627,630,3,80,40,0,628,630,3,86,43,0,629,626,1,0,0,0,629,
        627,1,0,0,0,629,628,1,0,0,0,630,85,1,0,0,0,631,632,5,56,0,0,632,
        633,3,116,58,0,633,87,1,0,0,0,634,636,3,80,40,0,635,634,1,0,0,0,
        635,636,1,0,0,0,636,637,1,0,0,0,637,639,5,65,0,0,638,640,3,80,40,
        0,639,638,1,0,0,0,639,640,1,0,0,0,640,643,1,0,0,0,641,642,5,65,0,
        0,642,644,3,80,40,0,643,641,1,0,0,0,643,644,1,0,0,0,644,89,1,0,0,
        0,645,646,5,61,0,0,646,651,3,80,40,0,647,648,5,68,0,0,648,650,3,
        80,40,0,649,647,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,
        1,0,0,0,652,655,1,0,0,0,653,651,1,0,0,0,654,656,5,68,0,0,655,654,
        1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,658,5,62,0,0,658,91,
        1,0,0,0,659,662,5,61,0,0,660,663,3,80,40,0,661,663,3,92,46,0,662,
        660,1,0,0,0,662,661,1,0,0,0,663,671,1,0,0,0,664,667,5,68,0,0,665,
        668,3,80,40,0,666,668,3,92,46,0,667,665,1,0,0,0,667,666,1,0,0,0,
        668,670,1,0,0,0,669,664,1,0,0,0,670,673,1,0,0,0,671,669,1,0,0,0,
        671,672,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,674,676,5,68,0,0,
        675,674,1,0,0,0,675,676,1,0,0,0,676,677,1,0,0,0,677,678,5,62,0,0,
        678,93,1,0,0,0,679,698,5,59,0,0,680,699,3,90,45,0,681,684,3,80,40,
        0,682,684,3,88,44,0,683,681,1,0,0,0,683,682,1,0,0,0,684,692,1,0,
        0,0,685,688,5,68,0,0,686,689,3,80,40,0,687,689,3,88,44,0,688,686,
        1,0,0,0,688,687,1,0,0,0,689,691,1,0,0,0,690,685,1,0,0,0,691,694,
        1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,696,1,0,0,0,694,692,
        1,0,0,0,695,697,5,68,0,0,696,695,1,0,0,0,696,697,1,0,0,0,697,699,
        1,0,0,0,698,680,1,0,0,0,698,683,1,0,0,0,699,700,1,0,0,0,700,701,
        5,60,0,0,701,95,1,0,0,0,702,706,5,96,0,0,703,705,3,94,47,0,704,703,
        1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,97,1,
        0,0,0,708,706,1,0,0,0,709,710,5,70,0,0,710,711,3,4,2,0,711,99,1,
        0,0,0,712,726,5,48,0,0,713,714,5,49,0,0,714,715,5,63,0,0,715,716,
        3,80,40,0,716,717,5,64,0,0,717,726,1,0,0,0,718,723,7,7,0,0,719,720,
        5,63,0,0,720,721,3,80,40,0,721,722,5,64,0,0,722,724,1,0,0,0,723,
        719,1,0,0,0,723,724,1,0,0,0,724,726,1,0,0,0,725,712,1,0,0,0,725,
        713,1,0,0,0,725,718,1,0,0,0,726,727,1,0,0,0,727,728,5,83,0,0,728,
        101,1,0,0,0,729,731,5,34,0,0,730,732,3,108,54,0,731,730,1,0,0,0,
        731,732,1,0,0,0,732,103,1,0,0,0,733,734,5,43,0,0,734,735,5,59,0,
        0,735,736,3,4,2,0,736,737,5,68,0,0,737,738,3,128,64,0,738,739,5,
        60,0,0,739,105,1,0,0,0,740,741,7,8,0,0,741,742,5,43,0,0,742,743,
        5,59,0,0,743,744,3,4,2,0,744,749,5,68,0,0,745,750,3,128,64,0,746,
        747,5,52,0,0,747,748,5,69,0,0,748,750,3,80,40,0,749,745,1,0,0,0,
        749,746,1,0,0,0,750,751,1,0,0,0,751,752,5,60,0,0,752,107,1,0,0,0,
        753,754,5,59,0,0,754,755,3,80,40,0,755,756,5,60,0,0,756,109,1,0,
        0,0,757,758,7,9,0,0,758,111,1,0,0,0,759,762,3,80,40,0,760,762,3,
        120,60,0,761,759,1,0,0,0,761,760,1,0,0,0,762,113,1,0,0,0,763,764,
        7,10,0,0,764,115,1,0,0,0,765,768,3,96,48,0,766,768,5,97,0,0,767,
        765,1,0,0,0,767,766,1,0,0,0,768,117,1,0,0,0,769,776,3,4,2,0,770,
        776,3,106,53,0,771,773,5,35,0,0,772,774,3,108,54,0,773,772,1,0,0,
        0,773,774,1,0,0,0,774,776,1,0,0,0,775,769,1,0,0,0,775,770,1,0,0,
        0,775,771,1,0,0,0,776,119,1,0,0,0,777,778,3,4,2,0,778,779,5,96,0,
        0,779,792,1,0,0,0,780,781,3,102,51,0,781,782,5,96,0,0,782,792,1,
        0,0,0,783,784,7,1,0,0,784,786,5,96,0,0,785,787,3,108,54,0,786,785,
        1,0,0,0,786,787,1,0,0,0,787,792,1,0,0,0,788,789,3,106,53,0,789,790,
        5,96,0,0,790,792,1,0,0,0,791,777,1,0,0,0,791,780,1,0,0,0,791,783,
        1,0,0,0,791,788,1,0,0,0,792,121,1,0,0,0,793,798,3,120,60,0,794,795,
        5,68,0,0,795,797,3,120,60,0,796,794,1,0,0,0,797,800,1,0,0,0,798,
        796,1,0,0,0,798,799,1,0,0,0,799,802,1,0,0,0,800,798,1,0,0,0,801,
        803,5,68,0,0,802,801,1,0,0,0,802,803,1,0,0,0,803,123,1,0,0,0,804,
        809,3,112,56,0,805,806,5,68,0,0,806,808,3,112,56,0,807,805,1,0,0,
        0,808,811,1,0,0,0,809,807,1,0,0,0,809,810,1,0,0,0,810,813,1,0,0,
        0,811,809,1,0,0,0,812,814,5,68,0,0,813,812,1,0,0,0,813,814,1,0,0,
        0,814,125,1,0,0,0,815,820,3,114,57,0,816,817,5,68,0,0,817,819,3,
        114,57,0,818,816,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,820,821,
        1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,823,825,5,68,0,0,824,823,
        1,0,0,0,824,825,1,0,0,0,825,127,1,0,0,0,826,831,3,80,40,0,827,828,
        5,68,0,0,828,830,3,80,40,0,829,827,1,0,0,0,830,833,1,0,0,0,831,829,
        1,0,0,0,831,832,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,834,836,
        5,68,0,0,835,834,1,0,0,0,835,836,1,0,0,0,836,129,1,0,0,0,837,842,
        5,96,0,0,838,839,5,68,0,0,839,841,5,96,0,0,840,838,1,0,0,0,841,844,
        1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,846,1,0,0,0,844,842,
        1,0,0,0,845,847,5,68,0,0,846,845,1,0,0,0,846,847,1,0,0,0,847,131,
        1,0,0,0,848,853,3,116,58,0,849,850,5,68,0,0,850,852,3,116,58,0,851,
        849,1,0,0,0,852,855,1,0,0,0,853,851,1,0,0,0,853,854,1,0,0,0,854,
        857,1,0,0,0,855,853,1,0,0,0,856,858,5,68,0,0,857,856,1,0,0,0,857,
        858,1,0,0,0,858,133,1,0,0,0,859,864,3,118,59,0,860,861,5,68,0,0,
        861,863,3,118,59,0,862,860,1,0,0,0,863,866,1,0,0,0,864,862,1,0,0,
        0,864,865,1,0,0,0,865,868,1,0,0,0,866,864,1,0,0,0,867,869,5,68,0,
        0,868,867,1,0,0,0,868,869,1,0,0,0,869,135,1,0,0,0,100,139,146,172,
        174,178,182,186,190,194,204,209,212,217,230,262,264,268,274,284,
        313,324,329,347,358,362,368,375,382,388,391,394,402,408,411,414,
        417,420,425,441,446,460,468,480,484,492,496,504,507,516,526,534,
        537,541,545,558,572,576,613,615,623,629,635,639,643,651,655,662,
        667,671,675,683,688,692,696,698,706,723,725,731,749,761,767,773,
        775,786,791,798,802,809,813,820,824,831,835,842,846,853,857,864,
        868
    ]

class openpulseParser ( Parser ):

    grammarFileName = "openpulseParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'waveform'", "'port'", "'frame'", "'cal'", 
                     "'defcal'", "'OPENQASM'", "'include'", "'defcalgrammar'", 
                     "'def'", "'gate'", "'extern'", "'box'", "'let'", "'break'", 
                     "'continue'", "'if'", "'else'", "'end'", "'return'", 
                     "'for'", "'while'", "'in'", "'switch'", "'case'", "'default'", 
                     "<INVALID>", "<INVALID>", "'input'", "'output'", "'const'", 
                     "'readonly'", "'mutable'", "'qreg'", "'qubit'", "'creg'", 
                     "'bool'", "'bit'", "'int'", "'uint'", "'float'", "'angle'", 
                     "'complex'", "'array'", "'void'", "'duration'", "'stretch'", 
                     "'gphase'", "'inv'", "'pow'", "'ctrl'", "'negctrl'", 
                     "'#dim'", "'durationof'", "'delay'", "'reset'", "'measure'", 
                     "'barrier'", "<INVALID>", "'['", "']'", "'{'", "'}'", 
                     "'('", "')'", "':'", "';'", "'.'", "','", "'='", "'->'", 
                     "'+'", "'++'", "'-'", "'*'", "'**'", "'/'", "'%'", 
                     "'|'", "'||'", "'&'", "'&&'", "'^'", "'@'", "'~'", 
                     "'!'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'im'" ]

    symbolicNames = [ "<INVALID>", "WAVEFORM", "PORT", "FRAME", "CAL", "DEFCAL", 
                      "OPENQASM", "INCLUDE", "DEFCALGRAMMAR", "DEF", "GATE", 
                      "EXTERN", "BOX", "LET", "BREAK", "CONTINUE", "IF", 
                      "ELSE", "END", "RETURN", "FOR", "WHILE", "IN", "SWITCH", 
                      "CASE", "DEFAULT", "PRAGMA", "AnnotationKeyword", 
                      "INPUT", "OUTPUT", "CONST", "READONLY", "MUTABLE", 
                      "QREG", "QUBIT", "CREG", "BOOL", "BIT", "INT", "UINT", 
                      "FLOAT", "ANGLE", "COMPLEX", "ARRAY", "VOID", "DURATION", 
                      "STRETCH", "GPHASE", "INV", "POW", "CTRL", "NEGCTRL", 
                      "DIM", "DURATIONOF", "DELAY", "RESET", "MEASURE", 
                      "BARRIER", "BooleanLiteral", "LBRACKET", "RBRACKET", 
                      "LBRACE", "RBRACE", "LPAREN", "RPAREN", "COLON", "SEMICOLON", 
                      "DOT", "COMMA", "EQUALS", "ARROW", "PLUS", "DOUBLE_PLUS", 
                      "MINUS", "ASTERISK", "DOUBLE_ASTERISK", "SLASH", "PERCENT", 
                      "PIPE", "DOUBLE_PIPE", "AMPERSAND", "DOUBLE_AMPERSAND", 
                      "CARET", "AT", "TILDE", "EXCLAMATION_POINT", "EqualityOperator", 
                      "CompoundAssignmentOperator", "ComparisonOperator", 
                      "BitshiftOperator", "IMAG", "ImaginaryLiteral", "BinaryIntegerLiteral", 
                      "OctalIntegerLiteral", "DecimalIntegerLiteral", "HexIntegerLiteral", 
                      "Identifier", "HardwareQubit", "FloatLiteral", "TimingLiteral", 
                      "BitstringLiteral", "Whitespace", "Newline", "LineComment", 
                      "BlockComment", "VERSION_IDENTIFER_WHITESPACE", "VersionSpecifier", 
                      "ARBITRARY_STRING_WHITESPACE", "StringLiteral", "EAT_INITIAL_SPACE", 
                      "EAT_LINE_END", "RemainingLineContent", "CAL_PRELUDE_WHITESPACE", 
                      "CAL_PRELUDE_COMMENT", "DEFCAL_PRELUDE_WHITESPACE", 
                      "DEFCAL_PRELUDE_COMMENT", "CalibrationBlock" ]

    RULE_calibrationBlock = 0
    RULE_openpulseStatement = 1
    RULE_scalarType = 2
    RULE_program = 3
    RULE_version = 4
    RULE_statement = 5
    RULE_annotation = 6
    RULE_scope = 7
    RULE_pragma = 8
    RULE_statementOrScope = 9
    RULE_calibrationGrammarStatement = 10
    RULE_includeStatement = 11
    RULE_breakStatement = 12
    RULE_continueStatement = 13
    RULE_endStatement = 14
    RULE_forStatement = 15
    RULE_ifStatement = 16
    RULE_returnStatement = 17
    RULE_whileStatement = 18
    RULE_switchStatement = 19
    RULE_switchCaseItem = 20
    RULE_barrierStatement = 21
    RULE_boxStatement = 22
    RULE_delayStatement = 23
    RULE_gateCallStatement = 24
    RULE_measureArrowAssignmentStatement = 25
    RULE_resetStatement = 26
    RULE_aliasDeclarationStatement = 27
    RULE_classicalDeclarationStatement = 28
    RULE_constDeclarationStatement = 29
    RULE_ioDeclarationStatement = 30
    RULE_oldStyleDeclarationStatement = 31
    RULE_quantumDeclarationStatement = 32
    RULE_defStatement = 33
    RULE_externStatement = 34
    RULE_gateStatement = 35
    RULE_assignmentStatement = 36
    RULE_expressionStatement = 37
    RULE_calStatement = 38
    RULE_defcalStatement = 39
    RULE_expression = 40
    RULE_aliasExpression = 41
    RULE_declarationExpression = 42
    RULE_measureExpression = 43
    RULE_rangeExpression = 44
    RULE_setExpression = 45
    RULE_arrayLiteral = 46
    RULE_indexOperator = 47
    RULE_indexedIdentifier = 48
    RULE_returnSignature = 49
    RULE_gateModifier = 50
    RULE_qubitType = 51
    RULE_arrayType = 52
    RULE_arrayReferenceType = 53
    RULE_designator = 54
    RULE_defcalTarget = 55
    RULE_defcalArgumentDefinition = 56
    RULE_defcalOperand = 57
    RULE_gateOperand = 58
    RULE_externArgument = 59
    RULE_argumentDefinition = 60
    RULE_argumentDefinitionList = 61
    RULE_defcalArgumentDefinitionList = 62
    RULE_defcalOperandList = 63
    RULE_expressionList = 64
    RULE_identifierList = 65
    RULE_gateOperandList = 66
    RULE_externArgumentList = 67

    ruleNames =  [ "calibrationBlock", "openpulseStatement", "scalarType", 
                   "program", "version", "statement", "annotation", "scope", 
                   "pragma", "statementOrScope", "calibrationGrammarStatement", 
                   "includeStatement", "breakStatement", "continueStatement", 
                   "endStatement", "forStatement", "ifStatement", "returnStatement", 
                   "whileStatement", "switchStatement", "switchCaseItem", 
                   "barrierStatement", "boxStatement", "delayStatement", 
                   "gateCallStatement", "measureArrowAssignmentStatement", 
                   "resetStatement", "aliasDeclarationStatement", "classicalDeclarationStatement", 
                   "constDeclarationStatement", "ioDeclarationStatement", 
                   "oldStyleDeclarationStatement", "quantumDeclarationStatement", 
                   "defStatement", "externStatement", "gateStatement", "assignmentStatement", 
                   "expressionStatement", "calStatement", "defcalStatement", 
                   "expression", "aliasExpression", "declarationExpression", 
                   "measureExpression", "rangeExpression", "setExpression", 
                   "arrayLiteral", "indexOperator", "indexedIdentifier", 
                   "returnSignature", "gateModifier", "qubitType", "arrayType", 
                   "arrayReferenceType", "designator", "defcalTarget", "defcalArgumentDefinition", 
                   "defcalOperand", "gateOperand", "externArgument", "argumentDefinition", 
                   "argumentDefinitionList", "defcalArgumentDefinitionList", 
                   "defcalOperandList", "expressionList", "identifierList", 
                   "gateOperandList", "externArgumentList" ]

    EOF = Token.EOF
    WAVEFORM=1
    PORT=2
    FRAME=3
    CAL=4
    DEFCAL=5
    OPENQASM=6
    INCLUDE=7
    DEFCALGRAMMAR=8
    DEF=9
    GATE=10
    EXTERN=11
    BOX=12
    LET=13
    BREAK=14
    CONTINUE=15
    IF=16
    ELSE=17
    END=18
    RETURN=19
    FOR=20
    WHILE=21
    IN=22
    SWITCH=23
    CASE=24
    DEFAULT=25
    PRAGMA=26
    AnnotationKeyword=27
    INPUT=28
    OUTPUT=29
    CONST=30
    READONLY=31
    MUTABLE=32
    QREG=33
    QUBIT=34
    CREG=35
    BOOL=36
    BIT=37
    INT=38
    UINT=39
    FLOAT=40
    ANGLE=41
    COMPLEX=42
    ARRAY=43
    VOID=44
    DURATION=45
    STRETCH=46
    GPHASE=47
    INV=48
    POW=49
    CTRL=50
    NEGCTRL=51
    DIM=52
    DURATIONOF=53
    DELAY=54
    RESET=55
    MEASURE=56
    BARRIER=57
    BooleanLiteral=58
    LBRACKET=59
    RBRACKET=60
    LBRACE=61
    RBRACE=62
    LPAREN=63
    RPAREN=64
    COLON=65
    SEMICOLON=66
    DOT=67
    COMMA=68
    EQUALS=69
    ARROW=70
    PLUS=71
    DOUBLE_PLUS=72
    MINUS=73
    ASTERISK=74
    DOUBLE_ASTERISK=75
    SLASH=76
    PERCENT=77
    PIPE=78
    DOUBLE_PIPE=79
    AMPERSAND=80
    DOUBLE_AMPERSAND=81
    CARET=82
    AT=83
    TILDE=84
    EXCLAMATION_POINT=85
    EqualityOperator=86
    CompoundAssignmentOperator=87
    ComparisonOperator=88
    BitshiftOperator=89
    IMAG=90
    ImaginaryLiteral=91
    BinaryIntegerLiteral=92
    OctalIntegerLiteral=93
    DecimalIntegerLiteral=94
    HexIntegerLiteral=95
    Identifier=96
    HardwareQubit=97
    FloatLiteral=98
    TimingLiteral=99
    BitstringLiteral=100
    Whitespace=101
    Newline=102
    LineComment=103
    BlockComment=104
    VERSION_IDENTIFER_WHITESPACE=105
    VersionSpecifier=106
    ARBITRARY_STRING_WHITESPACE=107
    StringLiteral=108
    EAT_INITIAL_SPACE=109
    EAT_LINE_END=110
    RemainingLineContent=111
    CAL_PRELUDE_WHITESPACE=112
    CAL_PRELUDE_COMMENT=113
    DEFCAL_PRELUDE_WHITESPACE=114
    DEFCAL_PRELUDE_COMMENT=115
    CalibrationBlock=116

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CalibrationBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openpulseStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.OpenpulseStatementContext)
            else:
                return self.getTypedRuleContext(openpulseParser.OpenpulseStatementContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_calibrationBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationBlock" ):
                listener.enterCalibrationBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationBlock" ):
                listener.exitCalibrationBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationBlock" ):
                return visitor.visitCalibrationBlock(self)
            else:
                return visitor.visitChildren(self)




    def calibrationBlock(self):

        localctx = openpulseParser.CalibrationBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_calibrationBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8723490119849477490) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 268179457) != 0):
                self.state = 136
                self.openpulseStatement()
                self.state = 141
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenpulseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(openpulseParser.PragmaContext,0)


        def aliasDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.AliasDeclarationStatementContext,0)


        def assignmentStatement(self):
            return self.getTypedRuleContext(openpulseParser.AssignmentStatementContext,0)


        def barrierStatement(self):
            return self.getTypedRuleContext(openpulseParser.BarrierStatementContext,0)


        def boxStatement(self):
            return self.getTypedRuleContext(openpulseParser.BoxStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(openpulseParser.BreakStatementContext,0)


        def classicalDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.ClassicalDeclarationStatementContext,0)


        def constDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.ConstDeclarationStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(openpulseParser.ContinueStatementContext,0)


        def defStatement(self):
            return self.getTypedRuleContext(openpulseParser.DefStatementContext,0)


        def delayStatement(self):
            return self.getTypedRuleContext(openpulseParser.DelayStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(openpulseParser.EndStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionStatementContext,0)


        def externStatement(self):
            return self.getTypedRuleContext(openpulseParser.ExternStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(openpulseParser.ForStatementContext,0)


        def gateCallStatement(self):
            return self.getTypedRuleContext(openpulseParser.GateCallStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(openpulseParser.IfStatementContext,0)


        def includeStatement(self):
            return self.getTypedRuleContext(openpulseParser.IncludeStatementContext,0)


        def ioDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.IoDeclarationStatementContext,0)


        def quantumDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.QuantumDeclarationStatementContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(openpulseParser.ResetStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(openpulseParser.ReturnStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(openpulseParser.SwitchStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(openpulseParser.WhileStatementContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(openpulseParser.AnnotationContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_openpulseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenpulseStatement" ):
                listener.enterOpenpulseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenpulseStatement" ):
                listener.exitOpenpulseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenpulseStatement" ):
                return visitor.visitOpenpulseStatement(self)
            else:
                return visitor.visitChildren(self)




    def openpulseStatement(self):

        localctx = openpulseParser.OpenpulseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_openpulseStatement)
        self._la = 0 # Token type
        try:
            self.state = 174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 142
                self.pragma()
                pass
            elif token in [1, 2, 3, 7, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 27, 28, 29, 30, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 63, 73, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 143
                    self.annotation()
                    self.state = 148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 172
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 149
                    self.aliasDeclarationStatement()
                    pass

                elif la_ == 2:
                    self.state = 150
                    self.assignmentStatement()
                    pass

                elif la_ == 3:
                    self.state = 151
                    self.barrierStatement()
                    pass

                elif la_ == 4:
                    self.state = 152
                    self.boxStatement()
                    pass

                elif la_ == 5:
                    self.state = 153
                    self.breakStatement()
                    pass

                elif la_ == 6:
                    self.state = 154
                    self.classicalDeclarationStatement()
                    pass

                elif la_ == 7:
                    self.state = 155
                    self.constDeclarationStatement()
                    pass

                elif la_ == 8:
                    self.state = 156
                    self.continueStatement()
                    pass

                elif la_ == 9:
                    self.state = 157
                    self.defStatement()
                    pass

                elif la_ == 10:
                    self.state = 158
                    self.delayStatement()
                    pass

                elif la_ == 11:
                    self.state = 159
                    self.endStatement()
                    pass

                elif la_ == 12:
                    self.state = 160
                    self.expressionStatement()
                    pass

                elif la_ == 13:
                    self.state = 161
                    self.externStatement()
                    pass

                elif la_ == 14:
                    self.state = 162
                    self.forStatement()
                    pass

                elif la_ == 15:
                    self.state = 163
                    self.gateCallStatement()
                    pass

                elif la_ == 16:
                    self.state = 164
                    self.ifStatement()
                    pass

                elif la_ == 17:
                    self.state = 165
                    self.includeStatement()
                    pass

                elif la_ == 18:
                    self.state = 166
                    self.ioDeclarationStatement()
                    pass

                elif la_ == 19:
                    self.state = 167
                    self.quantumDeclarationStatement()
                    pass

                elif la_ == 20:
                    self.state = 168
                    self.resetStatement()
                    pass

                elif la_ == 21:
                    self.state = 169
                    self.returnStatement()
                    pass

                elif la_ == 22:
                    self.state = 170
                    self.switchStatement()
                    pass

                elif la_ == 23:
                    self.state = 171
                    self.whileStatement()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(openpulseParser.BIT, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def INT(self):
            return self.getToken(openpulseParser.INT, 0)

        def UINT(self):
            return self.getToken(openpulseParser.UINT, 0)

        def FLOAT(self):
            return self.getToken(openpulseParser.FLOAT, 0)

        def ANGLE(self):
            return self.getToken(openpulseParser.ANGLE, 0)

        def BOOL(self):
            return self.getToken(openpulseParser.BOOL, 0)

        def DURATION(self):
            return self.getToken(openpulseParser.DURATION, 0)

        def STRETCH(self):
            return self.getToken(openpulseParser.STRETCH, 0)

        def COMPLEX(self):
            return self.getToken(openpulseParser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def WAVEFORM(self):
            return self.getToken(openpulseParser.WAVEFORM, 0)

        def PORT(self):
            return self.getToken(openpulseParser.PORT, 0)

        def FRAME(self):
            return self.getToken(openpulseParser.FRAME, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_scalarType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarType" ):
                listener.enterScalarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarType" ):
                listener.exitScalarType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarType" ):
                return visitor.visitScalarType(self)
            else:
                return visitor.visitChildren(self)




    def scalarType(self):

        localctx = openpulseParser.ScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_scalarType)
        self._la = 0 # Token type
        try:
            self.state = 209
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 176
                self.match(openpulseParser.BIT)
                self.state = 178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 177
                    self.designator()


                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 180
                self.match(openpulseParser.INT)
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 181
                    self.designator()


                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 3)
                self.state = 184
                self.match(openpulseParser.UINT)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 185
                    self.designator()


                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 4)
                self.state = 188
                self.match(openpulseParser.FLOAT)
                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 189
                    self.designator()


                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 5)
                self.state = 192
                self.match(openpulseParser.ANGLE)
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 193
                    self.designator()


                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 6)
                self.state = 196
                self.match(openpulseParser.BOOL)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 7)
                self.state = 197
                self.match(openpulseParser.DURATION)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 8)
                self.state = 198
                self.match(openpulseParser.STRETCH)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 9)
                self.state = 199
                self.match(openpulseParser.COMPLEX)
                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 200
                    self.match(openpulseParser.LBRACKET)
                    self.state = 201
                    self.scalarType()
                    self.state = 202
                    self.match(openpulseParser.RBRACKET)


                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 10)
                self.state = 206
                self.match(openpulseParser.WAVEFORM)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 11)
                self.state = 207
                self.match(openpulseParser.PORT)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 12)
                self.state = 208
                self.match(openpulseParser.FRAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(openpulseParser.EOF, 0)

        def version(self):
            return self.getTypedRuleContext(openpulseParser.VersionContext,0)


        def statementOrScope(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.StatementOrScopeContext)
            else:
                return self.getTypedRuleContext(openpulseParser.StatementOrScopeContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = openpulseParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 211
                self.version()


            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -6345589473648181314) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 268179457) != 0):
                self.state = 214
                self.statementOrScope()
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 220
            self.match(openpulseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENQASM(self):
            return self.getToken(openpulseParser.OPENQASM, 0)

        def VersionSpecifier(self):
            return self.getToken(openpulseParser.VersionSpecifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = openpulseParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(openpulseParser.OPENQASM)
            self.state = 223
            self.match(openpulseParser.VersionSpecifier)
            self.state = 224
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(openpulseParser.PragmaContext,0)


        def aliasDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.AliasDeclarationStatementContext,0)


        def assignmentStatement(self):
            return self.getTypedRuleContext(openpulseParser.AssignmentStatementContext,0)


        def barrierStatement(self):
            return self.getTypedRuleContext(openpulseParser.BarrierStatementContext,0)


        def boxStatement(self):
            return self.getTypedRuleContext(openpulseParser.BoxStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(openpulseParser.BreakStatementContext,0)


        def calStatement(self):
            return self.getTypedRuleContext(openpulseParser.CalStatementContext,0)


        def calibrationGrammarStatement(self):
            return self.getTypedRuleContext(openpulseParser.CalibrationGrammarStatementContext,0)


        def classicalDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.ClassicalDeclarationStatementContext,0)


        def constDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.ConstDeclarationStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(openpulseParser.ContinueStatementContext,0)


        def defStatement(self):
            return self.getTypedRuleContext(openpulseParser.DefStatementContext,0)


        def defcalStatement(self):
            return self.getTypedRuleContext(openpulseParser.DefcalStatementContext,0)


        def delayStatement(self):
            return self.getTypedRuleContext(openpulseParser.DelayStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(openpulseParser.EndStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionStatementContext,0)


        def externStatement(self):
            return self.getTypedRuleContext(openpulseParser.ExternStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(openpulseParser.ForStatementContext,0)


        def gateCallStatement(self):
            return self.getTypedRuleContext(openpulseParser.GateCallStatementContext,0)


        def gateStatement(self):
            return self.getTypedRuleContext(openpulseParser.GateStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(openpulseParser.IfStatementContext,0)


        def includeStatement(self):
            return self.getTypedRuleContext(openpulseParser.IncludeStatementContext,0)


        def ioDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.IoDeclarationStatementContext,0)


        def measureArrowAssignmentStatement(self):
            return self.getTypedRuleContext(openpulseParser.MeasureArrowAssignmentStatementContext,0)


        def oldStyleDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.OldStyleDeclarationStatementContext,0)


        def quantumDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.QuantumDeclarationStatementContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(openpulseParser.ResetStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(openpulseParser.ReturnStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(openpulseParser.SwitchStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(openpulseParser.WhileStatementContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(openpulseParser.AnnotationContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = openpulseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 264
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 226
                self.pragma()
                pass
            elif token in [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 63, 73, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 227
                    self.annotation()
                    self.state = 232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 262
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 233
                    self.aliasDeclarationStatement()
                    pass

                elif la_ == 2:
                    self.state = 234
                    self.assignmentStatement()
                    pass

                elif la_ == 3:
                    self.state = 235
                    self.barrierStatement()
                    pass

                elif la_ == 4:
                    self.state = 236
                    self.boxStatement()
                    pass

                elif la_ == 5:
                    self.state = 237
                    self.breakStatement()
                    pass

                elif la_ == 6:
                    self.state = 238
                    self.calStatement()
                    pass

                elif la_ == 7:
                    self.state = 239
                    self.calibrationGrammarStatement()
                    pass

                elif la_ == 8:
                    self.state = 240
                    self.classicalDeclarationStatement()
                    pass

                elif la_ == 9:
                    self.state = 241
                    self.constDeclarationStatement()
                    pass

                elif la_ == 10:
                    self.state = 242
                    self.continueStatement()
                    pass

                elif la_ == 11:
                    self.state = 243
                    self.defStatement()
                    pass

                elif la_ == 12:
                    self.state = 244
                    self.defcalStatement()
                    pass

                elif la_ == 13:
                    self.state = 245
                    self.delayStatement()
                    pass

                elif la_ == 14:
                    self.state = 246
                    self.endStatement()
                    pass

                elif la_ == 15:
                    self.state = 247
                    self.expressionStatement()
                    pass

                elif la_ == 16:
                    self.state = 248
                    self.externStatement()
                    pass

                elif la_ == 17:
                    self.state = 249
                    self.forStatement()
                    pass

                elif la_ == 18:
                    self.state = 250
                    self.gateCallStatement()
                    pass

                elif la_ == 19:
                    self.state = 251
                    self.gateStatement()
                    pass

                elif la_ == 20:
                    self.state = 252
                    self.ifStatement()
                    pass

                elif la_ == 21:
                    self.state = 253
                    self.includeStatement()
                    pass

                elif la_ == 22:
                    self.state = 254
                    self.ioDeclarationStatement()
                    pass

                elif la_ == 23:
                    self.state = 255
                    self.measureArrowAssignmentStatement()
                    pass

                elif la_ == 24:
                    self.state = 256
                    self.oldStyleDeclarationStatement()
                    pass

                elif la_ == 25:
                    self.state = 257
                    self.quantumDeclarationStatement()
                    pass

                elif la_ == 26:
                    self.state = 258
                    self.resetStatement()
                    pass

                elif la_ == 27:
                    self.state = 259
                    self.returnStatement()
                    pass

                elif la_ == 28:
                    self.state = 260
                    self.switchStatement()
                    pass

                elif la_ == 29:
                    self.state = 261
                    self.whileStatement()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AnnotationKeyword(self):
            return self.getToken(openpulseParser.AnnotationKeyword, 0)

        def RemainingLineContent(self):
            return self.getToken(openpulseParser.RemainingLineContent, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = openpulseParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self.match(openpulseParser.AnnotationKeyword)
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 267
                self.match(openpulseParser.RemainingLineContent)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def statementOrScope(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.StatementOrScopeContext)
            else:
                return self.getTypedRuleContext(openpulseParser.StatementOrScopeContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScope" ):
                return visitor.visitScope(self)
            else:
                return visitor.visitChildren(self)




    def scope(self):

        localctx = openpulseParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(openpulseParser.LBRACE)
            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -6345589473648181314) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 268179457) != 0):
                self.state = 271
                self.statementOrScope()
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 277
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(openpulseParser.PRAGMA, 0)

        def RemainingLineContent(self):
            return self.getToken(openpulseParser.RemainingLineContent, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma" ):
                return visitor.visitPragma(self)
            else:
                return visitor.visitChildren(self)




    def pragma(self):

        localctx = openpulseParser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_pragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(openpulseParser.PRAGMA)
            self.state = 280
            self.match(openpulseParser.RemainingLineContent)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementOrScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(openpulseParser.StatementContext,0)


        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_statementOrScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementOrScope" ):
                listener.enterStatementOrScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementOrScope" ):
                listener.exitStatementOrScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementOrScope" ):
                return visitor.visitStatementOrScope(self)
            else:
                return visitor.visitChildren(self)




    def statementOrScope(self):

        localctx = openpulseParser.StatementOrScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_statementOrScope)
        try:
            self.state = 284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 63, 73, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                self.enterOuterAlt(localctx, 1)
                self.state = 282
                self.statement()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 283
                self.scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationGrammarStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFCALGRAMMAR(self):
            return self.getToken(openpulseParser.DEFCALGRAMMAR, 0)

        def StringLiteral(self):
            return self.getToken(openpulseParser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_calibrationGrammarStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationGrammarStatement" ):
                listener.enterCalibrationGrammarStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationGrammarStatement" ):
                listener.exitCalibrationGrammarStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationGrammarStatement" ):
                return visitor.visitCalibrationGrammarStatement(self)
            else:
                return visitor.visitChildren(self)




    def calibrationGrammarStatement(self):

        localctx = openpulseParser.CalibrationGrammarStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_calibrationGrammarStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(openpulseParser.DEFCALGRAMMAR)
            self.state = 287
            self.match(openpulseParser.StringLiteral)
            self.state = 288
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(openpulseParser.INCLUDE, 0)

        def StringLiteral(self):
            return self.getToken(openpulseParser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_includeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeStatement" ):
                listener.enterIncludeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeStatement" ):
                listener.exitIncludeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludeStatement" ):
                return visitor.visitIncludeStatement(self)
            else:
                return visitor.visitChildren(self)




    def includeStatement(self):

        localctx = openpulseParser.IncludeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_includeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(openpulseParser.INCLUDE)
            self.state = 291
            self.match(openpulseParser.StringLiteral)
            self.state = 292
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(openpulseParser.BREAK, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = openpulseParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(openpulseParser.BREAK)
            self.state = 295
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(openpulseParser.CONTINUE, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = openpulseParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(openpulseParser.CONTINUE)
            self.state = 298
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(openpulseParser.END, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_endStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStatement" ):
                listener.enterEndStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStatement" ):
                listener.exitEndStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndStatement" ):
                return visitor.visitEndStatement(self)
            else:
                return visitor.visitChildren(self)




    def endStatement(self):

        localctx = openpulseParser.EndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_endStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(openpulseParser.END)
            self.state = 301
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # StatementOrScopeContext

        def FOR(self):
            return self.getToken(openpulseParser.FOR, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def IN(self):
            return self.getToken(openpulseParser.IN, 0)

        def statementOrScope(self):
            return self.getTypedRuleContext(openpulseParser.StatementOrScopeContext,0)


        def setExpression(self):
            return self.getTypedRuleContext(openpulseParser.SetExpressionContext,0)


        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def rangeExpression(self):
            return self.getTypedRuleContext(openpulseParser.RangeExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = openpulseParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_forStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.match(openpulseParser.FOR)
            self.state = 304
            self.scalarType()
            self.state = 305
            self.match(openpulseParser.Identifier)
            self.state = 306
            self.match(openpulseParser.IN)
            self.state = 313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.state = 307
                self.setExpression()
                pass
            elif token in [59]:
                self.state = 308
                self.match(openpulseParser.LBRACKET)
                self.state = 309
                self.rangeExpression()
                self.state = 310
                self.match(openpulseParser.RBRACKET)
                pass
            elif token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 53, 58, 63, 73, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                self.state = 312
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 315
            localctx.body = self.statementOrScope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.if_body = None # StatementOrScopeContext
            self.else_body = None # StatementOrScopeContext

        def IF(self):
            return self.getToken(openpulseParser.IF, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def statementOrScope(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.StatementOrScopeContext)
            else:
                return self.getTypedRuleContext(openpulseParser.StatementOrScopeContext,i)


        def ELSE(self):
            return self.getToken(openpulseParser.ELSE, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = openpulseParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(openpulseParser.IF)
            self.state = 318
            self.match(openpulseParser.LPAREN)
            self.state = 319
            self.expression(0)
            self.state = 320
            self.match(openpulseParser.RPAREN)
            self.state = 321
            localctx.if_body = self.statementOrScope()
            self.state = 324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 322
                self.match(openpulseParser.ELSE)
                self.state = 323
                localctx.else_body = self.statementOrScope()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(openpulseParser.RETURN, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def measureExpression(self):
            return self.getTypedRuleContext(openpulseParser.MeasureExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = openpulseParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(openpulseParser.RETURN)
            self.state = 329
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 53, 58, 63, 73, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                self.state = 327
                self.expression(0)
                pass
            elif token in [56]:
                self.state = 328
                self.measureExpression()
                pass
            elif token in [66]:
                pass
            else:
                pass
            self.state = 331
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # StatementOrScopeContext

        def WHILE(self):
            return self.getToken(openpulseParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def statementOrScope(self):
            return self.getTypedRuleContext(openpulseParser.StatementOrScopeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = openpulseParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(openpulseParser.WHILE)
            self.state = 334
            self.match(openpulseParser.LPAREN)
            self.state = 335
            self.expression(0)
            self.state = 336
            self.match(openpulseParser.RPAREN)
            self.state = 337
            localctx.body = self.statementOrScope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(openpulseParser.SWITCH, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def switchCaseItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.SwitchCaseItemContext)
            else:
                return self.getTypedRuleContext(openpulseParser.SwitchCaseItemContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatement" ):
                return visitor.visitSwitchStatement(self)
            else:
                return visitor.visitChildren(self)




    def switchStatement(self):

        localctx = openpulseParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_switchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(openpulseParser.SWITCH)
            self.state = 340
            self.match(openpulseParser.LPAREN)
            self.state = 341
            self.expression(0)
            self.state = 342
            self.match(openpulseParser.RPAREN)
            self.state = 343
            self.match(openpulseParser.LBRACE)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24 or _la==25:
                self.state = 344
                self.switchCaseItem()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 350
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchCaseItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(openpulseParser.CASE, 0)

        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def DEFAULT(self):
            return self.getToken(openpulseParser.DEFAULT, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_switchCaseItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchCaseItem" ):
                listener.enterSwitchCaseItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchCaseItem" ):
                listener.exitSwitchCaseItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchCaseItem" ):
                return visitor.visitSwitchCaseItem(self)
            else:
                return visitor.visitChildren(self)




    def switchCaseItem(self):

        localctx = openpulseParser.SwitchCaseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_switchCaseItem)
        try:
            self.state = 358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.enterOuterAlt(localctx, 1)
                self.state = 352
                self.match(openpulseParser.CASE)
                self.state = 353
                self.expressionList()
                self.state = 354
                self.scope()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 356
                self.match(openpulseParser.DEFAULT)
                self.state = 357
                self.scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BarrierStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BARRIER(self):
            return self.getToken(openpulseParser.BARRIER, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def gateOperandList(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandListContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_barrierStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarrierStatement" ):
                listener.enterBarrierStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarrierStatement" ):
                listener.exitBarrierStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBarrierStatement" ):
                return visitor.visitBarrierStatement(self)
            else:
                return visitor.visitChildren(self)




    def barrierStatement(self):

        localctx = openpulseParser.BarrierStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_barrierStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(openpulseParser.BARRIER)
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96 or _la==97:
                self.state = 361
                self.gateOperandList()


            self.state = 364
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOX(self):
            return self.getToken(openpulseParser.BOX, 0)

        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_boxStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxStatement" ):
                listener.enterBoxStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxStatement" ):
                listener.exitBoxStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxStatement" ):
                return visitor.visitBoxStatement(self)
            else:
                return visitor.visitChildren(self)




    def boxStatement(self):

        localctx = openpulseParser.BoxStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_boxStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(openpulseParser.BOX)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 367
                self.designator()


            self.state = 370
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelayStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAY(self):
            return self.getToken(openpulseParser.DELAY, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def gateOperandList(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandListContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_delayStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelayStatement" ):
                listener.enterDelayStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelayStatement" ):
                listener.exitDelayStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelayStatement" ):
                return visitor.visitDelayStatement(self)
            else:
                return visitor.visitChildren(self)




    def delayStatement(self):

        localctx = openpulseParser.DelayStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_delayStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(openpulseParser.DELAY)
            self.state = 373
            self.designator()
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96 or _la==97:
                self.state = 374
                self.gateOperandList()


            self.state = 377
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateCallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def gateOperandList(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandListContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def gateModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.GateModifierContext)
            else:
                return self.getTypedRuleContext(openpulseParser.GateModifierContext,i)


        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def GPHASE(self):
            return self.getToken(openpulseParser.GPHASE, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateCallStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateCallStatement" ):
                listener.enterGateCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateCallStatement" ):
                listener.exitGateCallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateCallStatement" ):
                return visitor.visitGateCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def gateCallStatement(self):

        localctx = openpulseParser.GateCallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_gateCallStatement)
        self._la = 0 # Token type
        try:
            self.state = 420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4222124650659840) != 0):
                    self.state = 379
                    self.gateModifier()
                    self.state = 384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 385
                self.match(openpulseParser.Identifier)
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 386
                    self.match(openpulseParser.LPAREN)
                    self.state = 388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8926011384865488882) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 268179457) != 0):
                        self.state = 387
                        self.expressionList()


                    self.state = 390
                    self.match(openpulseParser.RPAREN)


                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 393
                    self.designator()


                self.state = 396
                self.gateOperandList()
                self.state = 397
                self.match(openpulseParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4222124650659840) != 0):
                    self.state = 399
                    self.gateModifier()
                    self.state = 404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 405
                self.match(openpulseParser.GPHASE)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 406
                    self.match(openpulseParser.LPAREN)
                    self.state = 408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8926011384865488882) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 268179457) != 0):
                        self.state = 407
                        self.expressionList()


                    self.state = 410
                    self.match(openpulseParser.RPAREN)


                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 413
                    self.designator()


                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96 or _la==97:
                    self.state = 416
                    self.gateOperandList()


                self.state = 419
                self.match(openpulseParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureArrowAssignmentStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def measureExpression(self):
            return self.getTypedRuleContext(openpulseParser.MeasureExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def ARROW(self):
            return self.getToken(openpulseParser.ARROW, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(openpulseParser.IndexedIdentifierContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_measureArrowAssignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureArrowAssignmentStatement" ):
                listener.enterMeasureArrowAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureArrowAssignmentStatement" ):
                listener.exitMeasureArrowAssignmentStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureArrowAssignmentStatement" ):
                return visitor.visitMeasureArrowAssignmentStatement(self)
            else:
                return visitor.visitChildren(self)




    def measureArrowAssignmentStatement(self):

        localctx = openpulseParser.MeasureArrowAssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_measureArrowAssignmentStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.measureExpression()
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 423
                self.match(openpulseParser.ARROW)
                self.state = 424
                self.indexedIdentifier()


            self.state = 427
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(openpulseParser.RESET, 0)

        def gateOperand(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_resetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStatement" ):
                listener.enterResetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStatement" ):
                listener.exitResetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetStatement" ):
                return visitor.visitResetStatement(self)
            else:
                return visitor.visitChildren(self)




    def resetStatement(self):

        localctx = openpulseParser.ResetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_resetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(openpulseParser.RESET)
            self.state = 430
            self.gateOperand()
            self.state = 431
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(openpulseParser.LET, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def aliasExpression(self):
            return self.getTypedRuleContext(openpulseParser.AliasExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_aliasDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasDeclarationStatement" ):
                listener.enterAliasDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasDeclarationStatement" ):
                listener.exitAliasDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasDeclarationStatement" ):
                return visitor.visitAliasDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def aliasDeclarationStatement(self):

        localctx = openpulseParser.AliasDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_aliasDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.match(openpulseParser.LET)
            self.state = 434
            self.match(openpulseParser.Identifier)
            self.state = 435
            self.match(openpulseParser.EQUALS)
            self.state = 436
            self.aliasExpression()
            self.state = 437
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayTypeContext,0)


        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def declarationExpression(self):
            return self.getTypedRuleContext(openpulseParser.DeclarationExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_classicalDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalDeclarationStatement" ):
                listener.enterClassicalDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalDeclarationStatement" ):
                listener.exitClassicalDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalDeclarationStatement" ):
                return visitor.visitClassicalDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def classicalDeclarationStatement(self):

        localctx = openpulseParser.ClassicalDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_classicalDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 45, 46]:
                self.state = 439
                self.scalarType()
                pass
            elif token in [43]:
                self.state = 440
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 443
            self.match(openpulseParser.Identifier)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 444
                self.match(openpulseParser.EQUALS)
                self.state = 445
                self.declarationExpression()


            self.state = 448
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(openpulseParser.CONST, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def declarationExpression(self):
            return self.getTypedRuleContext(openpulseParser.DeclarationExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_constDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclarationStatement" ):
                listener.enterConstDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclarationStatement" ):
                listener.exitConstDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclarationStatement" ):
                return visitor.visitConstDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def constDeclarationStatement(self):

        localctx = openpulseParser.ConstDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_constDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(openpulseParser.CONST)
            self.state = 451
            self.scalarType()
            self.state = 452
            self.match(openpulseParser.Identifier)
            self.state = 453
            self.match(openpulseParser.EQUALS)
            self.state = 454
            self.declarationExpression()
            self.state = 455
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def INPUT(self):
            return self.getToken(openpulseParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(openpulseParser.OUTPUT, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_ioDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoDeclarationStatement" ):
                listener.enterIoDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoDeclarationStatement" ):
                listener.exitIoDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoDeclarationStatement" ):
                return visitor.visitIoDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def ioDeclarationStatement(self):

        localctx = openpulseParser.IoDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_ioDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            _la = self._input.LA(1)
            if not(_la==28 or _la==29):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 45, 46]:
                self.state = 458
                self.scalarType()
                pass
            elif token in [43]:
                self.state = 459
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 462
            self.match(openpulseParser.Identifier)
            self.state = 463
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OldStyleDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def CREG(self):
            return self.getToken(openpulseParser.CREG, 0)

        def QREG(self):
            return self.getToken(openpulseParser.QREG, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_oldStyleDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOldStyleDeclarationStatement" ):
                listener.enterOldStyleDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOldStyleDeclarationStatement" ):
                listener.exitOldStyleDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOldStyleDeclarationStatement" ):
                return visitor.visitOldStyleDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def oldStyleDeclarationStatement(self):

        localctx = openpulseParser.OldStyleDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oldStyleDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            _la = self._input.LA(1)
            if not(_la==33 or _la==35):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 466
            self.match(openpulseParser.Identifier)
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 467
                self.designator()


            self.state = 470
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qubitType(self):
            return self.getTypedRuleContext(openpulseParser.QubitTypeContext,0)


        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_quantumDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumDeclarationStatement" ):
                listener.enterQuantumDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumDeclarationStatement" ):
                listener.exitQuantumDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumDeclarationStatement" ):
                return visitor.visitQuantumDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def quantumDeclarationStatement(self):

        localctx = openpulseParser.QuantumDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_quantumDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.qubitType()
            self.state = 473
            self.match(openpulseParser.Identifier)
            self.state = 474
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(openpulseParser.DEF, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def argumentDefinitionList(self):
            return self.getTypedRuleContext(openpulseParser.ArgumentDefinitionListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(openpulseParser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_defStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefStatement" ):
                listener.enterDefStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefStatement" ):
                listener.exitDefStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefStatement" ):
                return visitor.visitDefStatement(self)
            else:
                return visitor.visitChildren(self)




    def defStatement(self):

        localctx = openpulseParser.DefStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_defStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(openpulseParser.DEF)
            self.state = 477
            self.match(openpulseParser.Identifier)
            self.state = 478
            self.match(openpulseParser.LPAREN)
            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 114347061805070) != 0):
                self.state = 479
                self.argumentDefinitionList()


            self.state = 482
            self.match(openpulseParser.RPAREN)
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 483
                self.returnSignature()


            self.state = 486
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(openpulseParser.EXTERN, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def externArgumentList(self):
            return self.getTypedRuleContext(openpulseParser.ExternArgumentListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(openpulseParser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_externStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternStatement" ):
                listener.enterExternStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternStatement" ):
                listener.exitExternStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternStatement" ):
                return visitor.visitExternStatement(self)
            else:
                return visitor.visitChildren(self)




    def externStatement(self):

        localctx = openpulseParser.ExternStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_externStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(openpulseParser.EXTERN)
            self.state = 489
            self.match(openpulseParser.Identifier)
            self.state = 490
            self.match(openpulseParser.LPAREN)
            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 114321292001294) != 0):
                self.state = 491
                self.externArgumentList()


            self.state = 494
            self.match(openpulseParser.RPAREN)
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 495
                self.returnSignature()


            self.state = 498
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # IdentifierListContext
            self.qubits = None # IdentifierListContext

        def GATE(self):
            return self.getToken(openpulseParser.GATE, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(openpulseParser.IdentifierListContext,i)


        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateStatement" ):
                listener.enterGateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateStatement" ):
                listener.exitGateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateStatement" ):
                return visitor.visitGateStatement(self)
            else:
                return visitor.visitChildren(self)




    def gateStatement(self):

        localctx = openpulseParser.GateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_gateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(openpulseParser.GATE)
            self.state = 501
            self.match(openpulseParser.Identifier)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 502
                self.match(openpulseParser.LPAREN)
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 503
                    localctx.params = self.identifierList()


                self.state = 506
                self.match(openpulseParser.RPAREN)


            self.state = 509
            localctx.qubits = self.identifierList()
            self.state = 510
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def indexedIdentifier(self):
            return self.getTypedRuleContext(openpulseParser.IndexedIdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def CompoundAssignmentOperator(self):
            return self.getToken(openpulseParser.CompoundAssignmentOperator, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def measureExpression(self):
            return self.getTypedRuleContext(openpulseParser.MeasureExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_assignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentStatement" ):
                listener.enterAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentStatement" ):
                listener.exitAssignmentStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentStatement" ):
                return visitor.visitAssignmentStatement(self)
            else:
                return visitor.visitChildren(self)




    def assignmentStatement(self):

        localctx = openpulseParser.AssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assignmentStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.indexedIdentifier()
            self.state = 513
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==69 or _la==87):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 516
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 53, 58, 63, 73, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                self.state = 514
                self.expression(0)
                pass
            elif token in [56]:
                self.state = 515
                self.measureExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 518
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = openpulseParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.expression(0)
            self.state = 521
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAL(self):
            return self.getToken(openpulseParser.CAL, 0)

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def CalibrationBlock(self):
            return self.getToken(openpulseParser.CalibrationBlock, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_calStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalStatement" ):
                listener.enterCalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalStatement" ):
                listener.exitCalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalStatement" ):
                return visitor.visitCalStatement(self)
            else:
                return visitor.visitChildren(self)




    def calStatement(self):

        localctx = openpulseParser.CalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_calStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(openpulseParser.CAL)
            self.state = 524
            self.match(openpulseParser.LBRACE)
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 525
                self.match(openpulseParser.CalibrationBlock)


            self.state = 528
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFCAL(self):
            return self.getToken(openpulseParser.DEFCAL, 0)

        def defcalTarget(self):
            return self.getTypedRuleContext(openpulseParser.DefcalTargetContext,0)


        def defcalOperandList(self):
            return self.getTypedRuleContext(openpulseParser.DefcalOperandListContext,0)


        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def returnSignature(self):
            return self.getTypedRuleContext(openpulseParser.ReturnSignatureContext,0)


        def CalibrationBlock(self):
            return self.getToken(openpulseParser.CalibrationBlock, 0)

        def defcalArgumentDefinitionList(self):
            return self.getTypedRuleContext(openpulseParser.DefcalArgumentDefinitionListContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_defcalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalStatement" ):
                listener.enterDefcalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalStatement" ):
                listener.exitDefcalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalStatement" ):
                return visitor.visitDefcalStatement(self)
            else:
                return visitor.visitChildren(self)




    def defcalStatement(self):

        localctx = openpulseParser.DefcalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_defcalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(openpulseParser.DEFCAL)
            self.state = 531
            self.defcalTarget()
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 532
                self.match(openpulseParser.LPAREN)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8926011318293495794) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 268179457) != 0):
                    self.state = 533
                    self.defcalArgumentDefinitionList()


                self.state = 536
                self.match(openpulseParser.RPAREN)


            self.state = 539
            self.defcalOperandList()
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 540
                self.returnSignature()


            self.state = 543
            self.match(openpulseParser.LBRACE)
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 544
                self.match(openpulseParser.CalibrationBlock)


            self.state = 547
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openpulseParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class BitwiseXorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def CARET(self):
            return self.getToken(openpulseParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseXorExpression" ):
                listener.enterBitwiseXorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseXorExpression" ):
                listener.exitBitwiseXorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseXorExpression" ):
                return visitor.visitBitwiseXorExpression(self)
            else:
                return visitor.visitChildren(self)


    class AdditiveExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def PLUS(self):
            return self.getToken(openpulseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(openpulseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)


    class DurationofExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DURATIONOF(self):
            return self.getToken(openpulseParser.DURATIONOF, 0)
        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)
        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationofExpression" ):
                listener.enterDurationofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationofExpression" ):
                listener.exitDurationofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDurationofExpression" ):
                return visitor.visitDurationofExpression(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesisExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpression" ):
                listener.enterParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpression" ):
                listener.exitParenthesisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesisExpression" ):
                return visitor.visitParenthesisExpression(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def ComparisonOperator(self):
            return self.getToken(openpulseParser.ComparisonOperator, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression" ):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression" ):
                listener.exitComparisonExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonExpression" ):
                return visitor.visitComparisonExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicativeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(openpulseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(openpulseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(openpulseParser.PERCENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def DOUBLE_PIPE(self):
            return self.getToken(openpulseParser.DOUBLE_PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)
        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)

        def arrayType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)


    class PowerExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def DOUBLE_ASTERISK(self):
            return self.getToken(openpulseParser.DOUBLE_ASTERISK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpression" ):
                listener.enterPowerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpression" ):
                listener.exitPowerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerExpression" ):
                return visitor.visitPowerExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitwiseOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def PIPE(self):
            return self.getToken(openpulseParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseOrExpression" ):
                listener.enterBitwiseOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseOrExpression" ):
                listener.exitBitwiseOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseOrExpression" ):
                return visitor.visitBitwiseOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class CallExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)
        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpression" ):
                listener.enterCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpression" ):
                listener.exitCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpression" ):
                return visitor.visitCallExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitshiftExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def BitshiftOperator(self):
            return self.getToken(openpulseParser.BitshiftOperator, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitshiftExpression" ):
                listener.enterBitshiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitshiftExpression" ):
                listener.exitBitshiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitshiftExpression" ):
                return visitor.visitBitshiftExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitwiseAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def AMPERSAND(self):
            return self.getToken(openpulseParser.AMPERSAND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseAndExpression" ):
                listener.enterBitwiseAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseAndExpression" ):
                listener.exitBitwiseAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseAndExpression" ):
                return visitor.visitBitwiseAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class EqualityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def EqualityOperator(self):
            return self.getToken(openpulseParser.EqualityOperator, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def DOUBLE_AMPERSAND(self):
            return self.getToken(openpulseParser.DOUBLE_AMPERSAND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class IndexExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)

        def indexOperator(self):
            return self.getTypedRuleContext(openpulseParser.IndexOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpression" ):
                listener.enterIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpression" ):
                listener.exitIndexExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexExpression" ):
                return visitor.visitIndexExpression(self)
            else:
                return visitor.visitChildren(self)


    class UnaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)

        def TILDE(self):
            return self.getToken(openpulseParser.TILDE, 0)
        def EXCLAMATION_POINT(self):
            return self.getToken(openpulseParser.EXCLAMATION_POINT, 0)
        def MINUS(self):
            return self.getToken(openpulseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)


    class LiteralExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)
        def BinaryIntegerLiteral(self):
            return self.getToken(openpulseParser.BinaryIntegerLiteral, 0)
        def OctalIntegerLiteral(self):
            return self.getToken(openpulseParser.OctalIntegerLiteral, 0)
        def DecimalIntegerLiteral(self):
            return self.getToken(openpulseParser.DecimalIntegerLiteral, 0)
        def HexIntegerLiteral(self):
            return self.getToken(openpulseParser.HexIntegerLiteral, 0)
        def FloatLiteral(self):
            return self.getToken(openpulseParser.FloatLiteral, 0)
        def ImaginaryLiteral(self):
            return self.getToken(openpulseParser.ImaginaryLiteral, 0)
        def BooleanLiteral(self):
            return self.getToken(openpulseParser.BooleanLiteral, 0)
        def BitstringLiteral(self):
            return self.getToken(openpulseParser.BitstringLiteral, 0)
        def TimingLiteral(self):
            return self.getToken(openpulseParser.TimingLiteral, 0)
        def HardwareQubit(self):
            return self.getToken(openpulseParser.HardwareQubit, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpression" ):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = openpulseParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                localctx = openpulseParser.ParenthesisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 550
                self.match(openpulseParser.LPAREN)
                self.state = 551
                self.expression(0)
                self.state = 552
                self.match(openpulseParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = openpulseParser.UnaryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 554
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 6145) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 555
                self.expression(15)
                pass

            elif la_ == 3:
                localctx = openpulseParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 558
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 45, 46]:
                    self.state = 556
                    self.scalarType()
                    pass
                elif token in [43]:
                    self.state = 557
                    self.arrayType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 560
                self.match(openpulseParser.LPAREN)
                self.state = 561
                self.expression(0)
                self.state = 562
                self.match(openpulseParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = openpulseParser.DurationofExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 564
                self.match(openpulseParser.DURATIONOF)
                self.state = 565
                self.match(openpulseParser.LPAREN)
                self.state = 566
                self.scope()
                self.state = 567
                self.match(openpulseParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = openpulseParser.CallExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 569
                self.match(openpulseParser.Identifier)
                self.state = 570
                self.match(openpulseParser.LPAREN)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8926011384865488882) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 268179457) != 0):
                    self.state = 571
                    self.expressionList()


                self.state = 574
                self.match(openpulseParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = openpulseParser.LiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 575
                _la = self._input.LA(1)
                if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 8787503087617) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 615
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 613
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                    if la_ == 1:
                        localctx = openpulseParser.PowerExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 578
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 579
                        localctx.op = self.match(openpulseParser.DOUBLE_ASTERISK)
                        self.state = 580
                        self.expression(16)
                        pass

                    elif la_ == 2:
                        localctx = openpulseParser.MultiplicativeExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 581
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 582
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 13) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 583
                        self.expression(15)
                        pass

                    elif la_ == 3:
                        localctx = openpulseParser.AdditiveExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 584
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 585
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==71 or _la==73):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 586
                        self.expression(14)
                        pass

                    elif la_ == 4:
                        localctx = openpulseParser.BitshiftExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 587
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 588
                        localctx.op = self.match(openpulseParser.BitshiftOperator)
                        self.state = 589
                        self.expression(13)
                        pass

                    elif la_ == 5:
                        localctx = openpulseParser.ComparisonExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 590
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 591
                        localctx.op = self.match(openpulseParser.ComparisonOperator)
                        self.state = 592
                        self.expression(12)
                        pass

                    elif la_ == 6:
                        localctx = openpulseParser.EqualityExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 593
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 594
                        localctx.op = self.match(openpulseParser.EqualityOperator)
                        self.state = 595
                        self.expression(11)
                        pass

                    elif la_ == 7:
                        localctx = openpulseParser.BitwiseAndExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 596
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 597
                        localctx.op = self.match(openpulseParser.AMPERSAND)
                        self.state = 598
                        self.expression(10)
                        pass

                    elif la_ == 8:
                        localctx = openpulseParser.BitwiseXorExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 599
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 600
                        localctx.op = self.match(openpulseParser.CARET)
                        self.state = 601
                        self.expression(9)
                        pass

                    elif la_ == 9:
                        localctx = openpulseParser.BitwiseOrExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 602
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 603
                        localctx.op = self.match(openpulseParser.PIPE)
                        self.state = 604
                        self.expression(8)
                        pass

                    elif la_ == 10:
                        localctx = openpulseParser.LogicalAndExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 605
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 606
                        localctx.op = self.match(openpulseParser.DOUBLE_AMPERSAND)
                        self.state = 607
                        self.expression(7)
                        pass

                    elif la_ == 11:
                        localctx = openpulseParser.LogicalOrExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 608
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 609
                        localctx.op = self.match(openpulseParser.DOUBLE_PIPE)
                        self.state = 610
                        self.expression(6)
                        pass

                    elif la_ == 12:
                        localctx = openpulseParser.IndexExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 611
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 612
                        self.indexOperator()
                        pass

             
                self.state = 617
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AliasExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def DOUBLE_PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.DOUBLE_PLUS)
            else:
                return self.getToken(openpulseParser.DOUBLE_PLUS, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_aliasExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasExpression" ):
                listener.enterAliasExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasExpression" ):
                listener.exitAliasExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasExpression" ):
                return visitor.visitAliasExpression(self)
            else:
                return visitor.visitChildren(self)




    def aliasExpression(self):

        localctx = openpulseParser.AliasExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_aliasExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.expression(0)
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==72:
                self.state = 619
                self.match(openpulseParser.DOUBLE_PLUS)
                self.state = 620
                self.expression(0)
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(openpulseParser.ArrayLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def measureExpression(self):
            return self.getTypedRuleContext(openpulseParser.MeasureExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_declarationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationExpression" ):
                listener.enterDeclarationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationExpression" ):
                listener.exitDeclarationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationExpression" ):
                return visitor.visitDeclarationExpression(self)
            else:
                return visitor.visitChildren(self)




    def declarationExpression(self):

        localctx = openpulseParser.DeclarationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_declarationExpression)
        try:
            self.state = 629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self.arrayLiteral()
                pass
            elif token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 53, 58, 63, 73, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 627
                self.expression(0)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 628
                self.measureExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEASURE(self):
            return self.getToken(openpulseParser.MEASURE, 0)

        def gateOperand(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_measureExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureExpression" ):
                listener.enterMeasureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureExpression" ):
                listener.exitMeasureExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureExpression" ):
                return visitor.visitMeasureExpression(self)
            else:
                return visitor.visitChildren(self)




    def measureExpression(self):

        localctx = openpulseParser.MeasureExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_measureExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(openpulseParser.MEASURE)
            self.state = 632
            self.gateOperand()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COLON)
            else:
                return self.getToken(openpulseParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeExpression" ):
                return visitor.visitRangeExpression(self)
            else:
                return visitor.visitChildren(self)




    def rangeExpression(self):

        localctx = openpulseParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_rangeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8926011384865488882) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 268179457) != 0):
                self.state = 634
                self.expression(0)


            self.state = 637
            self.match(openpulseParser.COLON)
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8926011384865488882) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 268179457) != 0):
                self.state = 638
                self.expression(0)


            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 641
                self.match(openpulseParser.COLON)
                self.state = 642
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_setExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetExpression" ):
                listener.enterSetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetExpression" ):
                listener.exitSetExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetExpression" ):
                return visitor.visitSetExpression(self)
            else:
                return visitor.visitChildren(self)




    def setExpression(self):

        localctx = openpulseParser.SetExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_setExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(openpulseParser.LBRACE)
            self.state = 646
            self.expression(0)
            self.state = 651
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 647
                    self.match(openpulseParser.COMMA)
                    self.state = 648
                    self.expression(0) 
                self.state = 653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 654
                self.match(openpulseParser.COMMA)


            self.state = 657
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def arrayLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ArrayLiteralContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ArrayLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = openpulseParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(openpulseParser.LBRACE)
            self.state = 662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 53, 58, 63, 73, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                self.state = 660
                self.expression(0)
                pass
            elif token in [61]:
                self.state = 661
                self.arrayLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 671
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 664
                    self.match(openpulseParser.COMMA)
                    self.state = 667
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 53, 58, 63, 73, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                        self.state = 665
                        self.expression(0)
                        pass
                    elif token in [61]:
                        self.state = 666
                        self.arrayLiteral()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 673
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 674
                self.match(openpulseParser.COMMA)


            self.state = 677
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def setExpression(self):
            return self.getTypedRuleContext(openpulseParser.SetExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def rangeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.RangeExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.RangeExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_indexOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOperator" ):
                listener.enterIndexOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOperator" ):
                listener.exitIndexOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexOperator" ):
                return visitor.visitIndexOperator(self)
            else:
                return visitor.visitChildren(self)




    def indexOperator(self):

        localctx = openpulseParser.IndexOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_indexOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(openpulseParser.LBRACKET)
            self.state = 698
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.state = 680
                self.setExpression()
                pass
            elif token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 53, 58, 63, 65, 73, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                self.state = 683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 681
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 682
                    self.rangeExpression()
                    pass


                self.state = 692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 685
                        self.match(openpulseParser.COMMA)
                        self.state = 688
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                        if la_ == 1:
                            self.state = 686
                            self.expression(0)
                            pass

                        elif la_ == 2:
                            self.state = 687
                            self.rangeExpression()
                            pass

                 
                    self.state = 694
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 695
                    self.match(openpulseParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 700
            self.match(openpulseParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def indexOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.IndexOperatorContext)
            else:
                return self.getTypedRuleContext(openpulseParser.IndexOperatorContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_indexedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexedIdentifier" ):
                listener.enterIndexedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexedIdentifier" ):
                listener.exitIndexedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexedIdentifier" ):
                return visitor.visitIndexedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def indexedIdentifier(self):

        localctx = openpulseParser.IndexedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_indexedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(openpulseParser.Identifier)
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 703
                self.indexOperator()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(openpulseParser.ARROW, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_returnSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnSignature" ):
                listener.enterReturnSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnSignature" ):
                listener.exitReturnSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnSignature" ):
                return visitor.visitReturnSignature(self)
            else:
                return visitor.visitChildren(self)




    def returnSignature(self):

        localctx = openpulseParser.ReturnSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_returnSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(openpulseParser.ARROW)
            self.state = 710
            self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(openpulseParser.AT, 0)

        def INV(self):
            return self.getToken(openpulseParser.INV, 0)

        def POW(self):
            return self.getToken(openpulseParser.POW, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def CTRL(self):
            return self.getToken(openpulseParser.CTRL, 0)

        def NEGCTRL(self):
            return self.getToken(openpulseParser.NEGCTRL, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateModifier" ):
                listener.enterGateModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateModifier" ):
                listener.exitGateModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateModifier" ):
                return visitor.visitGateModifier(self)
            else:
                return visitor.visitChildren(self)




    def gateModifier(self):

        localctx = openpulseParser.GateModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_gateModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.state = 712
                self.match(openpulseParser.INV)
                pass
            elif token in [49]:
                self.state = 713
                self.match(openpulseParser.POW)
                self.state = 714
                self.match(openpulseParser.LPAREN)
                self.state = 715
                self.expression(0)
                self.state = 716
                self.match(openpulseParser.RPAREN)
                pass
            elif token in [50, 51]:
                self.state = 718
                _la = self._input.LA(1)
                if not(_la==50 or _la==51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 719
                    self.match(openpulseParser.LPAREN)
                    self.state = 720
                    self.expression(0)
                    self.state = 721
                    self.match(openpulseParser.RPAREN)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 727
            self.match(openpulseParser.AT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QubitTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUBIT(self):
            return self.getToken(openpulseParser.QUBIT, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_qubitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQubitType" ):
                listener.enterQubitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQubitType" ):
                listener.exitQubitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQubitType" ):
                return visitor.visitQubitType(self)
            else:
                return visitor.visitChildren(self)




    def qubitType(self):

        localctx = openpulseParser.QubitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_qubitType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(openpulseParser.QUBIT)
            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 730
                self.designator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(openpulseParser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def COMMA(self):
            return self.getToken(openpulseParser.COMMA, 0)

        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = openpulseParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(openpulseParser.ARRAY)
            self.state = 734
            self.match(openpulseParser.LBRACKET)
            self.state = 735
            self.scalarType()
            self.state = 736
            self.match(openpulseParser.COMMA)
            self.state = 737
            self.expressionList()
            self.state = 738
            self.match(openpulseParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(openpulseParser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def COMMA(self):
            return self.getToken(openpulseParser.COMMA, 0)

        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def READONLY(self):
            return self.getToken(openpulseParser.READONLY, 0)

        def MUTABLE(self):
            return self.getToken(openpulseParser.MUTABLE, 0)

        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def DIM(self):
            return self.getToken(openpulseParser.DIM, 0)

        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_arrayReferenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayReferenceType" ):
                listener.enterArrayReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayReferenceType" ):
                listener.exitArrayReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayReferenceType" ):
                return visitor.visitArrayReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def arrayReferenceType(self):

        localctx = openpulseParser.ArrayReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_arrayReferenceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            _la = self._input.LA(1)
            if not(_la==31 or _la==32):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 741
            self.match(openpulseParser.ARRAY)
            self.state = 742
            self.match(openpulseParser.LBRACKET)
            self.state = 743
            self.scalarType()
            self.state = 744
            self.match(openpulseParser.COMMA)
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 53, 58, 63, 73, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]:
                self.state = 745
                self.expressionList()
                pass
            elif token in [52]:
                self.state = 746
                self.match(openpulseParser.DIM)
                self.state = 747
                self.match(openpulseParser.EQUALS)
                self.state = 748
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 751
            self.match(openpulseParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = openpulseParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_designator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(openpulseParser.LBRACKET)
            self.state = 754
            self.expression(0)
            self.state = 755
            self.match(openpulseParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEASURE(self):
            return self.getToken(openpulseParser.MEASURE, 0)

        def RESET(self):
            return self.getToken(openpulseParser.RESET, 0)

        def DELAY(self):
            return self.getToken(openpulseParser.DELAY, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_defcalTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalTarget" ):
                listener.enterDefcalTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalTarget" ):
                listener.exitDefcalTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalTarget" ):
                return visitor.visitDefcalTarget(self)
            else:
                return visitor.visitChildren(self)




    def defcalTarget(self):

        localctx = openpulseParser.DefcalTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_defcalTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            _la = self._input.LA(1)
            if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 4398046511111) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalArgumentDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def argumentDefinition(self):
            return self.getTypedRuleContext(openpulseParser.ArgumentDefinitionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_defcalArgumentDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalArgumentDefinition" ):
                listener.enterDefcalArgumentDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalArgumentDefinition" ):
                listener.exitDefcalArgumentDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalArgumentDefinition" ):
                return visitor.visitDefcalArgumentDefinition(self)
            else:
                return visitor.visitChildren(self)




    def defcalArgumentDefinition(self):

        localctx = openpulseParser.DefcalArgumentDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_defcalArgumentDefinition)
        try:
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 759
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 760
                self.argumentDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HardwareQubit(self):
            return self.getToken(openpulseParser.HardwareQubit, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_defcalOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalOperand" ):
                listener.enterDefcalOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalOperand" ):
                listener.exitDefcalOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalOperand" ):
                return visitor.visitDefcalOperand(self)
            else:
                return visitor.visitChildren(self)




    def defcalOperand(self):

        localctx = openpulseParser.DefcalOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_defcalOperand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            _la = self._input.LA(1)
            if not(_la==96 or _la==97):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self):
            return self.getTypedRuleContext(openpulseParser.IndexedIdentifierContext,0)


        def HardwareQubit(self):
            return self.getToken(openpulseParser.HardwareQubit, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateOperand" ):
                listener.enterGateOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateOperand" ):
                listener.exitGateOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateOperand" ):
                return visitor.visitGateOperand(self)
            else:
                return visitor.visitChildren(self)




    def gateOperand(self):

        localctx = openpulseParser.GateOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_gateOperand)
        try:
            self.state = 767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 765
                self.indexedIdentifier()
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 766
                self.match(openpulseParser.HardwareQubit)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def arrayReferenceType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayReferenceTypeContext,0)


        def CREG(self):
            return self.getToken(openpulseParser.CREG, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_externArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternArgument" ):
                listener.enterExternArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternArgument" ):
                listener.exitExternArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternArgument" ):
                return visitor.visitExternArgument(self)
            else:
                return visitor.visitChildren(self)




    def externArgument(self):

        localctx = openpulseParser.ExternArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_externArgument)
        self._la = 0 # Token type
        try:
            self.state = 775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 45, 46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.scalarType()
                pass
            elif token in [31, 32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 770
                self.arrayReferenceType()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 771
                self.match(openpulseParser.CREG)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 772
                    self.designator()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def qubitType(self):
            return self.getTypedRuleContext(openpulseParser.QubitTypeContext,0)


        def CREG(self):
            return self.getToken(openpulseParser.CREG, 0)

        def QREG(self):
            return self.getToken(openpulseParser.QREG, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def arrayReferenceType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayReferenceTypeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_argumentDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentDefinition" ):
                listener.enterArgumentDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentDefinition" ):
                listener.exitArgumentDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentDefinition" ):
                return visitor.visitArgumentDefinition(self)
            else:
                return visitor.visitChildren(self)




    def argumentDefinition(self):

        localctx = openpulseParser.ArgumentDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_argumentDefinition)
        self._la = 0 # Token type
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 36, 37, 38, 39, 40, 41, 42, 45, 46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.scalarType()
                self.state = 778
                self.match(openpulseParser.Identifier)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 780
                self.qubitType()
                self.state = 781
                self.match(openpulseParser.Identifier)
                pass
            elif token in [33, 35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 783
                _la = self._input.LA(1)
                if not(_la==33 or _la==35):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 784
                self.match(openpulseParser.Identifier)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 785
                    self.designator()


                pass
            elif token in [31, 32]:
                self.enterOuterAlt(localctx, 4)
                self.state = 788
                self.arrayReferenceType()
                self.state = 789
                self.match(openpulseParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentDefinitionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ArgumentDefinitionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ArgumentDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_argumentDefinitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentDefinitionList" ):
                listener.enterArgumentDefinitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentDefinitionList" ):
                listener.exitArgumentDefinitionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentDefinitionList" ):
                return visitor.visitArgumentDefinitionList(self)
            else:
                return visitor.visitChildren(self)




    def argumentDefinitionList(self):

        localctx = openpulseParser.ArgumentDefinitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_argumentDefinitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.argumentDefinition()
            self.state = 798
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 794
                    self.match(openpulseParser.COMMA)
                    self.state = 795
                    self.argumentDefinition() 
                self.state = 800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 801
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalArgumentDefinitionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defcalArgumentDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.DefcalArgumentDefinitionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.DefcalArgumentDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_defcalArgumentDefinitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalArgumentDefinitionList" ):
                listener.enterDefcalArgumentDefinitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalArgumentDefinitionList" ):
                listener.exitDefcalArgumentDefinitionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalArgumentDefinitionList" ):
                return visitor.visitDefcalArgumentDefinitionList(self)
            else:
                return visitor.visitChildren(self)




    def defcalArgumentDefinitionList(self):

        localctx = openpulseParser.DefcalArgumentDefinitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_defcalArgumentDefinitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.defcalArgumentDefinition()
            self.state = 809
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 805
                    self.match(openpulseParser.COMMA)
                    self.state = 806
                    self.defcalArgumentDefinition() 
                self.state = 811
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 812
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalOperandListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defcalOperand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.DefcalOperandContext)
            else:
                return self.getTypedRuleContext(openpulseParser.DefcalOperandContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_defcalOperandList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalOperandList" ):
                listener.enterDefcalOperandList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalOperandList" ):
                listener.exitDefcalOperandList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalOperandList" ):
                return visitor.visitDefcalOperandList(self)
            else:
                return visitor.visitChildren(self)




    def defcalOperandList(self):

        localctx = openpulseParser.DefcalOperandListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_defcalOperandList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.defcalOperand()
            self.state = 820
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 816
                    self.match(openpulseParser.COMMA)
                    self.state = 817
                    self.defcalOperand() 
                self.state = 822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 823
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = openpulseParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.expression(0)
            self.state = 831
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 827
                    self.match(openpulseParser.COMMA)
                    self.state = 828
                    self.expression(0) 
                self.state = 833
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 834
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.Identifier)
            else:
                return self.getToken(openpulseParser.Identifier, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = openpulseParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(openpulseParser.Identifier)
            self.state = 842
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 838
                    self.match(openpulseParser.COMMA)
                    self.state = 839
                    self.match(openpulseParser.Identifier) 
                self.state = 844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 845
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateOperandListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gateOperand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.GateOperandContext)
            else:
                return self.getTypedRuleContext(openpulseParser.GateOperandContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateOperandList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateOperandList" ):
                listener.enterGateOperandList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateOperandList" ):
                listener.exitGateOperandList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateOperandList" ):
                return visitor.visitGateOperandList(self)
            else:
                return visitor.visitChildren(self)




    def gateOperandList(self):

        localctx = openpulseParser.GateOperandListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_gateOperandList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.gateOperand()
            self.state = 853
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 849
                    self.match(openpulseParser.COMMA)
                    self.state = 850
                    self.gateOperand() 
                self.state = 855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 856
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExternArgumentContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExternArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_externArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternArgumentList" ):
                listener.enterExternArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternArgumentList" ):
                listener.exitExternArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternArgumentList" ):
                return visitor.visitExternArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def externArgumentList(self):

        localctx = openpulseParser.ExternArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_externArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.externArgument()
            self.state = 864
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 860
                    self.match(openpulseParser.COMMA)
                    self.state = 861
                    self.externArgument() 
                self.state = 866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 867
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[40] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 17)
         




